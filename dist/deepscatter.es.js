var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};
function namespace(name) {
  var prefix = name += "", i = prefix.indexOf(":");
  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns")
    name = name.slice(i + 1);
  return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name } : name;
}
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator(name) {
  var fullname = namespace(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}
function none() {
}
function selector(selector2) {
  return selector2 == null ? none : function() {
    return this.querySelector(selector2);
  };
}
function selection_select(select2) {
  if (typeof select2 !== "function")
    select2 = selector(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select2.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}
function array(x) {
  return x == null ? [] : Array.isArray(x) ? x : Array.from(x);
}
function empty() {
  return [];
}
function selectorAll(selector2) {
  return selector2 == null ? empty : function() {
    return this.querySelectorAll(selector2);
  };
}
function arrayAll(select2) {
  return function() {
    return array(select2.apply(this, arguments));
  };
}
function selection_selectAll(select2) {
  if (typeof select2 === "function")
    select2 = arrayAll(select2);
  else
    select2 = selectorAll(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        subgroups.push(select2.call(node, node.__data__, i, group));
        parents.push(node);
      }
    }
  }
  return new Selection$1(subgroups, parents);
}
function matcher(selector2) {
  return function() {
    return this.matches(selector2);
  };
}
function childMatcher(selector2) {
  return function(node) {
    return node.matches(selector2);
  };
}
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selection_selectChild(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}
var filter = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter.call(this.children, match);
  };
}
function selection_selectChildren(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}
function selection_filter(match) {
  if (typeof match !== "function")
    match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection$1(subgroups, this._parents);
}
function sparse(update) {
  return new Array(update.length);
}
function selection_enter() {
  return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
}
function EnterNode(parent, datum2) {
  this.ownerDocument = parent.ownerDocument;
  this.namespaceURI = parent.namespaceURI;
  this._next = null;
  this._parent = parent;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector2) {
    return this._parent.querySelector(selector2);
  },
  querySelectorAll: function(selector2) {
    return this._parent.querySelectorAll(selector2);
  }
};
function constant$2(x) {
  return function() {
    return x;
  };
}
function bindIndex(parent, group, enter, update, exit, data2) {
  var i = 0, node, groupLength = group.length, dataLength = data2.length;
  for (; i < dataLength; ++i) {
    if (node = group[i]) {
      node.__data__ = data2[i];
      update[i] = node;
    } else {
      enter[i] = new EnterNode(parent, data2[i]);
    }
  }
  for (; i < groupLength; ++i) {
    if (node = group[i]) {
      exit[i] = node;
    }
  }
}
function bindKey(parent, group, enter, update, exit, data2, key) {
  var i, node, nodeByKeyValue = new Map(), groupLength = group.length, dataLength = data2.length, keyValues = new Array(groupLength), keyValue;
  for (i = 0; i < groupLength; ++i) {
    if (node = group[i]) {
      keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i = 0; i < dataLength; ++i) {
    keyValue = key.call(parent, data2[i], i, data2) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update[i] = node;
      node.__data__ = data2[i];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i] = new EnterNode(parent, data2[i]);
    }
  }
  for (i = 0; i < groupLength; ++i) {
    if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
      exit[i] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function selection_data(value, key) {
  if (!arguments.length)
    return Array.from(this, datum);
  var bind = key ? bindKey : bindIndex, parents = this._parents, groups = this._groups;
  if (typeof value !== "function")
    value = constant$2(value);
  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
    var parent = parents[j], group = groups[j], groupLength = group.length, data2 = arraylike(value.call(parent, parent && parent.__data__, j, parents)), dataLength = data2.length, enterGroup = enter[j] = new Array(dataLength), updateGroup = update[j] = new Array(dataLength), exitGroup = exit[j] = new Array(groupLength);
    bind(parent, group, enterGroup, updateGroup, exitGroup, data2, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1)
          i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength)
          ;
        previous._next = next || null;
      }
    }
  }
  update = new Selection$1(update, parents);
  update._enter = enter;
  update._exit = exit;
  return update;
}
function arraylike(data2) {
  return typeof data2 === "object" && "length" in data2 ? data2 : Array.from(data2);
}
function selection_exit() {
  return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
}
function selection_join(onenter, onupdate, onexit) {
  var enter = this.enter(), update = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter)
      enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update = onupdate(update);
    if (update)
      update = update.selection();
  }
  if (onexit == null)
    exit.remove();
  else
    onexit(exit);
  return enter && update ? enter.merge(update).order() : update;
}
function selection_merge(context) {
  var selection2 = context.selection ? context.selection() : context;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge2[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Selection$1(merges, this._parents);
}
function selection_order() {
  for (var groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
      if (node = group[i]) {
        if (next && node.compareDocumentPosition(next) ^ 4)
          next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}
function selection_sort(compare) {
  if (!compare)
    compare = ascending$1;
  function compareNode(a, b) {
    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
  }
  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        sortgroup[i] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection$1(sortgroups, this._parents).order();
}
function ascending$1(a, b) {
  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
function selection_call() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}
function selection_nodes() {
  return Array.from(this);
}
function selection_node() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
      var node = group[i];
      if (node)
        return node;
    }
  }
  return null;
}
function selection_size() {
  let size = 0;
  for (const node of this)
    ++size;
  return size;
}
function selection_empty() {
  return !this.node();
}
function selection_each(callback) {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        callback.call(node, node.__data__, i, group);
    }
  }
  return this;
}
function attrRemove$1(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS$1(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant$1(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS$1(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction$1(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttribute(name);
    else
      this.setAttribute(name, v);
  };
}
function attrFunctionNS$1(fullname, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.removeAttributeNS(fullname.space, fullname.local);
    else
      this.setAttributeNS(fullname.space, fullname.local, v);
  };
}
function selection_attr(name, value) {
  var fullname = namespace(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS$1 : attrRemove$1 : typeof value === "function" ? fullname.local ? attrFunctionNS$1 : attrFunction$1 : fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, value));
}
function defaultView(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}
function styleRemove$1(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant$1(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction$1(name, value, priority) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      this.style.removeProperty(name);
    else
      this.style.setProperty(name, v, priority);
  };
}
function selection_style(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove$1 : typeof value === "function" ? styleFunction$1 : styleConstant$1)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
}
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (v == null)
      delete this[name];
    else
      this[name] = v;
  };
}
function selection_property(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i = this._names.indexOf(name);
    if (i < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i = this._names.indexOf(name);
    if (i >= 0) {
      this._names.splice(i, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names) {
  var list2 = classList(node), i = -1, n = names.length;
  while (++i < n)
    list2.add(names[i]);
}
function classedRemove(node, names) {
  var list2 = classList(node), i = -1, n = names.length;
  while (++i < n)
    list2.remove(names[i]);
}
function classedTrue(names) {
  return function() {
    classedAdd(this, names);
  };
}
function classedFalse(names) {
  return function() {
    classedRemove(this, names);
  };
}
function classedFunction(names, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
  };
}
function selection_classed(name, value) {
  var names = classArray(name + "");
  if (arguments.length < 2) {
    var list2 = classList(this.node()), i = -1, n = names.length;
    while (++i < n)
      if (!list2.contains(names[i]))
        return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
}
function textRemove() {
  this.textContent = "";
}
function textConstant$1(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction$1(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.textContent = v == null ? "" : v;
  };
}
function selection_text(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction$1 : textConstant$1)(value)) : this.node().textContent;
}
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v = value.apply(this, arguments);
    this.innerHTML = v == null ? "" : v;
  };
}
function selection_html(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}
function raise() {
  if (this.nextSibling)
    this.parentNode.appendChild(this);
}
function selection_raise() {
  return this.each(raise);
}
function lower() {
  if (this.previousSibling)
    this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function selection_lower() {
  return this.each(lower);
}
function selection_append(name) {
  var create2 = typeof name === "function" ? name : creator(name);
  return this.select(function() {
    return this.appendChild(create2.apply(this, arguments));
  });
}
function constantNull() {
  return null;
}
function selection_insert(name, before) {
  var create2 = typeof name === "function" ? name : creator(name), select2 = before == null ? constantNull : typeof before === "function" ? before : selector(before);
  return this.select(function() {
    return this.insertBefore(create2.apply(this, arguments), select2.apply(this, arguments) || null);
  });
}
function remove() {
  var parent = this.parentNode;
  if (parent)
    parent.removeChild(this);
}
function selection_remove() {
  return this.each(remove);
}
function selection_cloneShallow() {
  var clone = this.cloneNode(false), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_cloneDeep() {
  var clone = this.cloneNode(true), parent = this.parentNode;
  return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
}
function selection_clone(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}
function selection_datum(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames$1(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    return { type: t, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on)
      return;
    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
        this.removeEventListener(o.type, o.listener, o.options);
      } else {
        on[++i] = o;
      }
    }
    if (++i)
      on.length = i;
    else
      delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o, listener = contextListener(value);
    if (on)
      for (var j = 0, m = on.length; j < m; ++j) {
        if ((o = on[j]).type === typename.type && o.name === typename.name) {
          this.removeEventListener(o.type, o.listener, o.options);
          this.addEventListener(o.type, o.listener = listener, o.options = options);
          o.value = value;
          return;
        }
      }
    this.addEventListener(typename.type, listener, options);
    o = { type: typename.type, name: typename.name, value, listener, options };
    if (!on)
      this.__on = [o];
    else
      on.push(o);
  };
}
function selection_on(typename, value, options) {
  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on)
      for (var j = 0, m = on.length, o; j < m; ++j) {
        for (i = 0, o = on[j]; i < n; ++i) {
          if ((t = typenames[i]).type === o.type && t.name === o.name) {
            return o.value;
          }
        }
      }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i = 0; i < n; ++i)
    this.each(on(typenames[i], value, options));
  return this;
}
function dispatchEvent(node, type2, params) {
  var window2 = defaultView(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type2, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params)
      event.initEvent(type2, params.bubbles, params.cancelable), event.detail = params.detail;
    else
      event.initEvent(type2, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params);
  };
}
function dispatchFunction(type2, params) {
  return function() {
    return dispatchEvent(this, type2, params.apply(this, arguments));
  };
}
function selection_dispatch(type2, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type2, params));
}
function* selection_iterator() {
  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
      if (node = group[i])
        yield node;
    }
  }
}
var root = [null];
function Selection$1(groups, parents) {
  this._groups = groups;
  this._parents = parents;
}
function selection() {
  return new Selection$1([[document.documentElement]], root);
}
function selection_selection() {
  return this;
}
Selection$1.prototype = selection.prototype = {
  constructor: Selection$1,
  select: selection_select,
  selectAll: selection_selectAll,
  selectChild: selection_selectChild,
  selectChildren: selection_selectChildren,
  filter: selection_filter,
  data: selection_data,
  enter: selection_enter,
  exit: selection_exit,
  join: selection_join,
  merge: selection_merge,
  selection: selection_selection,
  order: selection_order,
  sort: selection_sort,
  call: selection_call,
  nodes: selection_nodes,
  node: selection_node,
  size: selection_size,
  empty: selection_empty,
  each: selection_each,
  attr: selection_attr,
  style: selection_style,
  property: selection_property,
  classed: selection_classed,
  text: selection_text,
  html: selection_html,
  raise: selection_raise,
  lower: selection_lower,
  append: selection_append,
  insert: selection_insert,
  remove: selection_remove,
  clone: selection_clone,
  datum: selection_datum,
  on: selection_on,
  dispatch: selection_dispatch,
  [Symbol.iterator]: selection_iterator
};
function select(selector2) {
  return typeof selector2 === "string" ? new Selection$1([[document.querySelector(selector2)]], [document.documentElement]) : new Selection$1([[selector2]], root);
}
function sourceEvent(event) {
  let sourceEvent2;
  while (sourceEvent2 = event.sourceEvent)
    event = sourceEvent2;
  return event;
}
function pointer(event, node) {
  event = sourceEvent(event);
  if (node === void 0)
    node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      point.x = event.clientX, point.y = event.clientY;
      point = point.matrixTransform(node.getScreenCTM().inverse());
      return [point.x, point.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}
function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
function bisector(f) {
  let delta = f;
  let compare1 = f;
  let compare2 = f;
  if (f.length !== 2) {
    delta = (d, x) => f(d) - x;
    compare1 = ascending;
    compare2 = (d, x) => ascending(f(d), x);
  }
  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0)
        return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0)
          lo = mid + 1;
        else
          hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }
  return { left, center, right };
}
function number$1(x) {
  return x === null ? NaN : +x;
}
const ascendingBisect = bisector(ascending);
const bisectRight = ascendingBisect.right;
const bisectLeft = ascendingBisect.left;
bisector(number$1).center;
function extent(values, valueof) {
  let min2;
  let max2;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min2 === void 0) {
          if (value >= value)
            min2 = max2 = value;
        } else {
          if (min2 > value)
            min2 = value;
          if (max2 < value)
            max2 = value;
        }
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min2 === void 0) {
          if (value >= value)
            min2 = max2 = value;
        } else {
          if (min2 > value)
            min2 = value;
          if (max2 < value)
            max2 = value;
        }
      }
    }
  }
  return [min2, max2];
}
class Adder {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x) {
    const p = this._partials;
    let i = 0;
    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j], hi = x + y, lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo)
        p[i++] = lo;
      x = hi;
    }
    p[i] = x;
    this._n = i + 1;
    return this;
  }
  valueOf() {
    const p = this._partials;
    let n = this._n, x, y, lo, hi = 0;
    if (n > 0) {
      hi = p[--n];
      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo)
          break;
      }
      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi)
          hi = x;
      }
    }
    return hi;
  }
}
class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: new Map() }, _key: { value: key } });
    if (entries != null)
      for (const [key2, value] of entries)
        this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
}
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key))
    return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(value);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
var e10 = Math.sqrt(50), e5 = Math.sqrt(10), e2 = Math.sqrt(2);
function ticks(start2, stop, count) {
  var reverse, i = -1, n, ticks2, step;
  stop = +stop, start2 = +start2, count = +count;
  if (start2 === stop && count > 0)
    return [start2];
  if (reverse = stop < start2)
    n = start2, start2 = stop, stop = n;
  if ((step = tickIncrement(start2, stop, count)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start2 / step), r1 = Math.round(stop / step);
    if (r0 * step < start2)
      ++r0;
    if (r1 * step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start2 * step), r1 = Math.round(stop * step);
    if (r0 / step < start2)
      ++r0;
    if (r1 / step > stop)
      --r1;
    ticks2 = new Array(n = r1 - r0 + 1);
    while (++i < n)
      ticks2[i] = (r0 + i) / step;
  }
  if (reverse)
    ticks2.reverse();
  return ticks2;
}
function tickIncrement(start2, stop, count) {
  var step = (stop - start2) / Math.max(0, count), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start2, stop, count) {
  var step0 = Math.abs(stop - start2) / Math.max(0, count), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop < start2 ? -step1 : step1;
}
function max(values, valueof) {
  let max2;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
        max2 = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max2 < value || max2 === void 0 && value >= value)) {
        max2 = value;
      }
    }
  }
  return max2;
}
function min(values, valueof) {
  let min2;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
        min2 = value;
      }
    }
  }
  return min2;
}
function mean(values, valueof) {
  let count = 0;
  let sum2 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count, sum2 += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count, sum2 += value;
      }
    }
  }
  if (count)
    return sum2 / count;
}
function* flatten(arrays) {
  for (const array2 of arrays) {
    yield* array2;
  }
}
function merge$1(arrays) {
  return Array.from(flatten(arrays));
}
function range(start2, stop, step) {
  start2 = +start2, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start2, start2 = 0, 1) : n < 3 ? 1 : +step;
  var i = -1, n = Math.max(0, Math.ceil((stop - start2) / step)) | 0, range2 = new Array(n);
  while (++i < n) {
    range2[i] = start2 + i * step;
  }
  return range2;
}
var shuffle = shuffler(Math.random);
function shuffler(random) {
  return function shuffle2(array2, i0 = 0, i1 = array2.length) {
    let m = i1 - (i0 = +i0);
    while (m) {
      const i = random() * m-- | 0, t = array2[m + i0];
      array2[m + i0] = array2[i + i0];
      array2[i + i0] = t;
    }
    return array2;
  };
}
function sum$1(values, valueof) {
  let sum2 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum2 += value;
      }
    }
  } else {
    let index = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        sum2 += value;
      }
    }
  }
  return sum2;
}
var epsilon = 1e-6;
var pi = Math.PI;
var tau = pi * 2;
var degrees$2 = 180 / pi;
var radians$1 = pi / 180;
var abs = Math.abs;
var cos = Math.cos;
var sin = Math.sin;
var sqrt$1 = Math.sqrt;
function noop$1() {
}
function streamGeometry(geometry, stream2) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream2);
  }
}
var streamObjectType = {
  Feature: function(object2, stream2) {
    streamGeometry(object2.geometry, stream2);
  },
  FeatureCollection: function(object2, stream2) {
    var features = object2.features, i = -1, n = features.length;
    while (++i < n)
      streamGeometry(features[i].geometry, stream2);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream2) {
    stream2.sphere();
  },
  Point: function(object2, stream2) {
    object2 = object2.coordinates;
    stream2.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      object2 = coordinates[i], stream2.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream2) {
    streamLine(object2.coordinates, stream2, 0);
  },
  MultiLineString: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      streamLine(coordinates[i], stream2, 0);
  },
  Polygon: function(object2, stream2) {
    streamPolygon(object2.coordinates, stream2);
  },
  MultiPolygon: function(object2, stream2) {
    var coordinates = object2.coordinates, i = -1, n = coordinates.length;
    while (++i < n)
      streamPolygon(coordinates[i], stream2);
  },
  GeometryCollection: function(object2, stream2) {
    var geometries = object2.geometries, i = -1, n = geometries.length;
    while (++i < n)
      streamGeometry(geometries[i], stream2);
  }
};
function streamLine(coordinates, stream2, closed) {
  var i = -1, n = coordinates.length - closed, coordinate;
  stream2.lineStart();
  while (++i < n)
    coordinate = coordinates[i], stream2.point(coordinate[0], coordinate[1], coordinate[2]);
  stream2.lineEnd();
}
function streamPolygon(coordinates, stream2) {
  var i = -1, n = coordinates.length;
  stream2.polygonStart();
  while (++i < n)
    streamLine(coordinates[i], stream2, 1);
  stream2.polygonEnd();
}
function geoStream(object2, stream2) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream2);
  } else {
    streamGeometry(object2, stream2);
  }
}
function clipBuffer() {
  var lines = [], line;
  return {
    point: function(x, y, m) {
      line.push([x, y, m]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop$1,
    rejoin: function() {
      if (lines.length > 1)
        lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}
function pointEqual(a, b) {
  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
}
function Intersection(point, points, other, entry) {
  this.x = point;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function clipRejoin(segments, compareIntersection, startInside, interpolate2, stream2) {
  var subject = [], clip = [], i, n;
  segments.forEach(function(segment) {
    if ((n2 = segment.length - 1) <= 0)
      return;
    var n2, p0 = segment[0], p1 = segment[n2], x;
    if (pointEqual(p0, p1)) {
      if (!p0[2] && !p1[2]) {
        stream2.lineStart();
        for (i = 0; i < n2; ++i)
          stream2.point((p0 = segment[i])[0], p0[1]);
        stream2.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x = new Intersection(p0, segment, null, true));
    clip.push(x.o = new Intersection(p0, null, x, false));
    subject.push(x = new Intersection(p1, segment, null, false));
    clip.push(x.o = new Intersection(p1, null, x, true));
  });
  if (!subject.length)
    return;
  clip.sort(compareIntersection);
  link(subject);
  link(clip);
  for (i = 0, n = clip.length; i < n; ++i) {
    clip[i].e = startInside = !startInside;
  }
  var start2 = subject[0], points, point;
  while (1) {
    var current = start2, isSubject = true;
    while (current.v)
      if ((current = current.n) === start2)
        return;
    points = current.z;
    stream2.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i = 0, n = points.length; i < n; ++i)
            stream2.point((point = points[i])[0], point[1]);
        } else {
          interpolate2(current.x, current.n.x, 1, stream2);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i = points.length - 1; i >= 0; --i)
            stream2.point((point = points[i])[0], point[1]);
        } else {
          interpolate2(current.x, current.p.x, -1, stream2);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream2.lineEnd();
  }
}
function link(array2) {
  if (!(n = array2.length))
    return;
  var n, i = 0, a = array2[0], b;
  while (++i < n) {
    a.n = b = array2[i];
    b.p = a;
    a = b;
  }
  a.n = b = array2[0];
  b.p = a;
}
function clipLine(a, b, x02, y02, x12, y12) {
  var ax = a[0], ay = a[1], bx = b[0], by = b[1], t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
  r = x02 - ax;
  if (!dx && r > 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r < t0)
      return;
    if (r < t1)
      t1 = r;
  } else if (dx > 0) {
    if (r > t1)
      return;
    if (r > t0)
      t0 = r;
  }
  r = x12 - ax;
  if (!dx && r < 0)
    return;
  r /= dx;
  if (dx < 0) {
    if (r > t1)
      return;
    if (r > t0)
      t0 = r;
  } else if (dx > 0) {
    if (r < t0)
      return;
    if (r < t1)
      t1 = r;
  }
  r = y02 - ay;
  if (!dy && r > 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r < t0)
      return;
    if (r < t1)
      t1 = r;
  } else if (dy > 0) {
    if (r > t1)
      return;
    if (r > t0)
      t0 = r;
  }
  r = y12 - ay;
  if (!dy && r < 0)
    return;
  r /= dy;
  if (dy < 0) {
    if (r > t1)
      return;
    if (r > t0)
      t0 = r;
  } else if (dy > 0) {
    if (r < t0)
      return;
    if (r < t1)
      t1 = r;
  }
  if (t0 > 0)
    a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
  if (t1 < 1)
    b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
  return true;
}
var clipMax = 1e9, clipMin = -clipMax;
function clipRectangle(x02, y02, x12, y12) {
  function visible(x, y) {
    return x02 <= x && x <= x12 && y02 <= y && y <= y12;
  }
  function interpolate2(from, to, direction, stream2) {
    var a = 0, a1 = 0;
    if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
      do
        stream2.point(a === 0 || a === 3 ? x02 : x12, a > 1 ? y12 : y02);
      while ((a = (a + direction + 4) % 4) !== a1);
    } else {
      stream2.point(to[0], to[1]);
    }
  }
  function corner(p, direction) {
    return abs(p[0] - x02) < epsilon ? direction > 0 ? 0 : 3 : abs(p[0] - x12) < epsilon ? direction > 0 ? 2 : 1 : abs(p[1] - y02) < epsilon ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
  }
  function compareIntersection(a, b) {
    return comparePoint(a.x, b.x);
  }
  function comparePoint(a, b) {
    var ca = corner(a, 1), cb = corner(b, 1);
    return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
  }
  return function(stream2) {
    var activeStream = stream2, bufferStream = clipBuffer(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point(x, y) {
      if (visible(x, y))
        activeStream.point(x, y);
    }
    function polygonInside() {
      var winding = 0;
      for (var i = 0, n = polygon.length; i < n; ++i) {
        for (var ring2 = polygon[i], j = 1, m = ring2.length, point2 = ring2[0], a0, a1, b0 = point2[0], b1 = point2[1]; j < m; ++j) {
          a0 = b0, a1 = b1, point2 = ring2[j], b0 = point2[0], b1 = point2[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x02 - a0))
              ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x02 - a0))
              --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge$1(segments)).length;
      if (cleanInside || visible2) {
        stream2.polygonStart();
        if (cleanInside) {
          stream2.lineStart();
          interpolate2(null, null, 1, stream2);
          stream2.lineEnd();
        }
        if (visible2) {
          clipRejoin(segments, compareIntersection, startInside, interpolate2, stream2);
        }
        stream2.polygonEnd();
      }
      activeStream = stream2, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint;
      if (polygon)
        polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint(x__, y__);
        if (v__ && v_)
          bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point;
      if (v_)
        activeStream.lineEnd();
    }
    function linePoint(x, y) {
      var v = visible(x, y);
      if (polygon)
        ring.push([x, y]);
      if (first) {
        x__ = x, y__ = y, v__ = v;
        first = false;
        if (v) {
          activeStream.lineStart();
          activeStream.point(x, y);
        }
      } else {
        if (v && v_)
          activeStream.point(x, y);
        else {
          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
          if (clipLine(a, b, x02, y02, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a[0], a[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v)
              activeStream.lineEnd();
            clean = false;
          } else if (v) {
            activeStream.lineStart();
            activeStream.point(x, y);
            clean = false;
          }
        }
      }
      x_ = x, y_ = y, v_ = v;
    }
    return clipStream;
  };
}
var identity$5 = (x) => x;
var areaSum = new Adder(), areaRingSum = new Adder(), x00$2, y00$2, x0$3, y0$3;
var areaStream = {
  point: noop$1,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: function() {
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop$1;
    areaSum.add(abs(areaRingSum));
    areaRingSum = new Adder();
  },
  result: function() {
    var area2 = areaSum / 2;
    areaSum = new Adder();
    return area2;
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaPointFirst(x, y) {
  areaStream.point = areaPoint;
  x00$2 = x0$3 = x, y00$2 = y0$3 = y;
}
function areaPoint(x, y) {
  areaRingSum.add(y0$3 * x - x0$3 * y);
  x0$3 = x, y0$3 = y;
}
function areaRingEnd() {
  areaPoint(x00$2, y00$2);
}
var pathArea = areaStream;
var x0$2 = Infinity, y0$2 = x0$2, x1 = -x0$2, y1 = x1;
var boundsStream = {
  point: boundsPoint,
  lineStart: noop$1,
  lineEnd: noop$1,
  polygonStart: noop$1,
  polygonEnd: noop$1,
  result: function() {
    var bounds = [[x0$2, y0$2], [x1, y1]];
    x1 = y1 = -(y0$2 = x0$2 = Infinity);
    return bounds;
  }
};
function boundsPoint(x, y) {
  if (x < x0$2)
    x0$2 = x;
  if (x > x1)
    x1 = x;
  if (y < y0$2)
    y0$2 = y;
  if (y > y1)
    y1 = y;
}
var boundsStream$1 = boundsStream;
var X0$1 = 0, Y0$1 = 0, Z0 = 0, X1 = 0, Y1 = 0, Z1 = 0, X2 = 0, Y2 = 0, Z2 = 0, x00$1, y00$1, x0$1, y0$1;
var centroidStream = {
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.point = centroidPoint;
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  },
  result: function() {
    var centroid = Z2 ? [X2 / Z2, Y2 / Z2] : Z1 ? [X1 / Z1, Y1 / Z1] : Z0 ? [X0$1 / Z0, Y0$1 / Z0] : [NaN, NaN];
    X0$1 = Y0$1 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
    return centroid;
  }
};
function centroidPoint(x, y) {
  X0$1 += x;
  Y0$1 += y;
  ++Z0;
}
function centroidLineStart() {
  centroidStream.point = centroidPointFirstLine;
}
function centroidPointFirstLine(x, y) {
  centroidStream.point = centroidPointLine;
  centroidPoint(x0$1 = x, y0$1 = y);
}
function centroidPointLine(x, y) {
  var dx = x - x0$1, dy = y - y0$1, z = sqrt$1(dx * dx + dy * dy);
  X1 += z * (x0$1 + x) / 2;
  Y1 += z * (y0$1 + y) / 2;
  Z1 += z;
  centroidPoint(x0$1 = x, y0$1 = y);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidPointFirstRing;
}
function centroidRingEnd() {
  centroidPointRing(x00$1, y00$1);
}
function centroidPointFirstRing(x, y) {
  centroidStream.point = centroidPointRing;
  centroidPoint(x00$1 = x0$1 = x, y00$1 = y0$1 = y);
}
function centroidPointRing(x, y) {
  var dx = x - x0$1, dy = y - y0$1, z = sqrt$1(dx * dx + dy * dy);
  X1 += z * (x0$1 + x) / 2;
  Y1 += z * (y0$1 + y) / 2;
  Z1 += z;
  z = y0$1 * x - x0$1 * y;
  X2 += z * (x0$1 + x);
  Y2 += z * (y0$1 + y);
  Z2 += z * 3;
  centroidPoint(x0$1 = x, y0$1 = y);
}
var pathCentroid = centroidStream;
function PathContext(context) {
  this._context = context;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_) {
    return this._radius = _, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._context.closePath();
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x, y);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x, y);
        break;
      }
      default: {
        this._context.moveTo(x + this._radius, y);
        this._context.arc(x, y, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop$1
};
var lengthSum = new Adder(), lengthRing, x00, y00, x0, y0;
var lengthStream = {
  point: noop$1,
  lineStart: function() {
    lengthStream.point = lengthPointFirst;
  },
  lineEnd: function() {
    if (lengthRing)
      lengthPoint(x00, y00);
    lengthStream.point = noop$1;
  },
  polygonStart: function() {
    lengthRing = true;
  },
  polygonEnd: function() {
    lengthRing = null;
  },
  result: function() {
    var length = +lengthSum;
    lengthSum = new Adder();
    return length;
  }
};
function lengthPointFirst(x, y) {
  lengthStream.point = lengthPoint;
  x00 = x0 = x, y00 = y0 = y;
}
function lengthPoint(x, y) {
  x0 -= x, y0 -= y;
  lengthSum.add(sqrt$1(x0 * x0 + y0 * y0));
  x0 = x, y0 = y;
}
var pathMeasure = lengthStream;
function PathString() {
  this._string = [];
}
PathString.prototype = {
  _radius: 4.5,
  _circle: circle(4.5),
  pointRadius: function(_) {
    if ((_ = +_) !== this._radius)
      this._radius = _, this._circle = null;
    return this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0)
      this._string.push("Z");
    this._point = NaN;
  },
  point: function(x, y) {
    switch (this._point) {
      case 0: {
        this._string.push("M", x, ",", y);
        this._point = 1;
        break;
      }
      case 1: {
        this._string.push("L", x, ",", y);
        break;
      }
      default: {
        if (this._circle == null)
          this._circle = circle(this._radius);
        this._string.push("M", x, ",", y, this._circle);
        break;
      }
    }
  },
  result: function() {
    if (this._string.length) {
      var result = this._string.join("");
      this._string = [];
      return result;
    } else {
      return null;
    }
  }
};
function circle(radius) {
  return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
}
function geoPath(projection, context) {
  var pointRadius = 4.5, projectionStream, contextStream;
  function path(object2) {
    if (object2) {
      if (typeof pointRadius === "function")
        contextStream.pointRadius(+pointRadius.apply(this, arguments));
      geoStream(object2, projectionStream(contextStream));
    }
    return contextStream.result();
  }
  path.area = function(object2) {
    geoStream(object2, projectionStream(pathArea));
    return pathArea.result();
  };
  path.measure = function(object2) {
    geoStream(object2, projectionStream(pathMeasure));
    return pathMeasure.result();
  };
  path.bounds = function(object2) {
    geoStream(object2, projectionStream(boundsStream$1));
    return boundsStream$1.result();
  };
  path.centroid = function(object2) {
    geoStream(object2, projectionStream(pathCentroid));
    return pathCentroid.result();
  };
  path.projection = function(_) {
    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$5) : (projection = _).stream, path) : projection;
  };
  path.context = function(_) {
    if (!arguments.length)
      return context;
    contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
    if (typeof pointRadius !== "function")
      contextStream.pointRadius(pointRadius);
    return path;
  };
  path.pointRadius = function(_) {
    if (!arguments.length)
      return pointRadius;
    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
    return path;
  };
  return path.projection(projection).context(context);
}
function transformer$2(methods) {
  return function(stream2) {
    var s = new TransformStream();
    for (var key in methods)
      s[key] = methods[key];
    s.stream = stream2;
    return s;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x, y) {
    this.stream.point(x, y);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};
function fit(projection, fitBounds, object2) {
  var clip = projection.clipExtent && projection.clipExtent();
  projection.scale(150).translate([0, 0]);
  if (clip != null)
    projection.clipExtent(null);
  geoStream(object2, projection.stream(boundsStream$1));
  fitBounds(boundsStream$1.result());
  if (clip != null)
    projection.clipExtent(clip);
  return projection;
}
function fitExtent(projection, extent2, object2) {
  return fit(projection, function(b) {
    var w = extent2[1][0] - extent2[0][0], h = extent2[1][1] - extent2[0][1], k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])), x = +extent2[0][0] + (w - k * (b[1][0] + b[0][0])) / 2, y = +extent2[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitSize(projection, size, object2) {
  return fitExtent(projection, [[0, 0], size], object2);
}
function fitWidth(projection, width, object2) {
  return fit(projection, function(b) {
    var w = +width, k = w / (b[1][0] - b[0][0]), x = (w - k * (b[1][0] + b[0][0])) / 2, y = -k * b[0][1];
    projection.scale(150 * k).translate([x, y]);
  }, object2);
}
function fitHeight(projection, height, object2) {
  return fit(projection, function(b) {
    var h = +height, k = h / (b[1][1] - b[0][1]), x = -k * b[0][0], y = (h - k * (b[1][1] + b[0][1])) / 2;
    projection.scale(150 * k).translate([x, y]);
  }, object2);
}
function geoIdentity() {
  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, alpha = 0, ca, sa, x02 = null, y02, x12, y12, kx = 1, ky = 1, transform = transformer$2({
    point: function(x, y) {
      var p = projection([x, y]);
      this.stream.point(p[0], p[1]);
    }
  }), postclip = identity$5, cache, cacheStream;
  function reset() {
    kx = k * sx;
    ky = k * sy;
    cache = cacheStream = null;
    return projection;
  }
  function projection(p) {
    var x = p[0] * kx, y = p[1] * ky;
    if (alpha) {
      var t = y * ca - x * sa;
      x = x * ca + y * sa;
      y = t;
    }
    return [x + tx, y + ty];
  }
  projection.invert = function(p) {
    var x = p[0] - tx, y = p[1] - ty;
    if (alpha) {
      var t = y * ca + x * sa;
      x = x * ca - y * sa;
      y = t;
    }
    return [x / kx, y / ky];
  };
  projection.stream = function(stream2) {
    return cache && cacheStream === stream2 ? cache : cache = transform(postclip(cacheStream = stream2));
  };
  projection.postclip = function(_) {
    return arguments.length ? (postclip = _, x02 = y02 = x12 = y12 = null, reset()) : postclip;
  };
  projection.clipExtent = function(_) {
    return arguments.length ? (postclip = _ == null ? (x02 = y02 = x12 = y12 = null, identity$5) : clipRectangle(x02 = +_[0][0], y02 = +_[0][1], x12 = +_[1][0], y12 = +_[1][1]), reset()) : x02 == null ? null : [[x02, y02], [x12, y12]];
  };
  projection.scale = function(_) {
    return arguments.length ? (k = +_, reset()) : k;
  };
  projection.translate = function(_) {
    return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
  };
  projection.angle = function(_) {
    return arguments.length ? (alpha = _ % 360 * radians$1, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees$2;
  };
  projection.reflectX = function(_) {
    return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
  };
  projection.reflectY = function(_) {
    return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
  };
  projection.fitExtent = function(extent2, object2) {
    return fitExtent(projection, extent2, object2);
  };
  projection.fitSize = function(size, object2) {
    return fitSize(projection, size, object2);
  };
  projection.fitWidth = function(width, object2) {
    return fitWidth(projection, width, object2);
  };
  projection.fitHeight = function(height, object2) {
    return fitHeight(projection, height, object2);
  };
  return projection;
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var lodash_merge = { exports: {} };
(function(module, exports) {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var HOT_COUNT = 800, HOT_SPAN = 16;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
  var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root2 = freeGlobal || freeSelf || Function("return this")();
  var freeExports = exports && !exports.nodeType && exports;
  var freeModule = freeExports && true && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  var freeProcess = moduleExports && freeGlobal.process;
  var nodeUtil = function() {
    try {
      var types = freeModule && freeModule.require && freeModule.require("util").types;
      if (types) {
        return types;
      }
      return freeProcess && freeProcess.binding && freeProcess.binding("util");
    } catch (e) {
    }
  }();
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
  function apply(func, thisArg, args2) {
    switch (args2.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args2[0]);
      case 2:
        return func.call(thisArg, args2[0], args2[1]);
      case 3:
        return func.call(thisArg, args2[0], args2[1], args2[2]);
    }
    return func.apply(thisArg, args2);
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }
  function getValue(object2, key) {
    return object2 == null ? void 0 : object2[key];
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
  var coreJsData = root2["__core-js_shared__"];
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var nativeObjectToString = objectProto.toString;
  var objectCtorString = funcToString.call(Object);
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer = moduleExports ? root2.Buffer : void 0, Symbol2 = root2.Symbol, Uint8Array2 = root2.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
  var defineProperty = function() {
    try {
      var func = getNative(Object, "defineProperty");
      func({}, "", {});
      return func;
    } catch (e) {
    }
  }();
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0, nativeMax = Math.max, nativeNow = Date.now;
  var Map2 = getNative(root2, "Map"), nativeCreate = getNative(Object, "create");
  var baseCreate = function() {
    function object2() {
    }
    return function(proto) {
      if (!isObject2(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object2.prototype = proto;
      var result = new object2();
      object2.prototype = void 0;
      return result;
    };
  }();
  function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }
  function hashGet(key) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
  }
  function hashHas(key) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
  }
  function hashSet(key, value) {
    var data2 = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }
  function listCacheDelete(key) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index, 1);
    }
    --this.size;
    return true;
  }
  function listCacheGet(key) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    return index < 0 ? void 0 : data2[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    if (index < 0) {
      ++this.size;
      data2.push([key, value]);
    } else {
      data2[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      "hash": new Hash(),
      "map": new (Map2 || ListCache)(),
      "string": new Hash()
    };
  }
  function mapCacheDelete(key) {
    var result = getMapData(this, key)["delete"](key);
    this.size -= result ? 1 : 0;
    return result;
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    var data2 = getMapData(this, key), size = data2.size;
    data2.set(key, value);
    this.size += data2.size == size ? 0 : 1;
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack(entries) {
    var data2 = this.__data__ = new ListCache(entries);
    this.size = data2.size;
  }
  function stackClear() {
    this.__data__ = new ListCache();
    this.size = 0;
  }
  function stackDelete(key) {
    var data2 = this.__data__, result = data2["delete"](key);
    this.size = data2.size;
    return result;
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var data2 = this.__data__;
    if (data2 instanceof ListCache) {
      var pairs = data2.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        this.size = ++data2.size;
        return this;
      }
      data2 = this.__data__ = new MapCache(pairs);
    }
    data2.set(key, value);
    this.size = data2.size;
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignMergeValue(object2, key, value) {
    if (value !== void 0 && !eq(object2[key], value) || value === void 0 && !(key in object2)) {
      baseAssignValue(object2, key, value);
    }
  }
  function assignValue(object2, key, value) {
    var objValue = object2[key];
    if (!(hasOwnProperty.call(object2, key) && eq(objValue, value)) || value === void 0 && !(key in object2)) {
      baseAssignValue(object2, key, value);
    }
  }
  function assocIndexOf(array2, key) {
    var length = array2.length;
    while (length--) {
      if (eq(array2[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssignValue(object2, key, value) {
    if (key == "__proto__" && defineProperty) {
      defineProperty(object2, key, {
        "configurable": true,
        "enumerable": true,
        "value": value,
        "writable": true
      });
    } else {
      object2[key] = value;
    }
  }
  var baseFor = createBaseFor();
  function baseGetTag(value) {
    if (value == null) {
      return value === void 0 ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
  }
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }
  function baseIsNative(value) {
    if (!isObject2(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }
  function baseKeysIn(object2) {
    if (!isObject2(object2)) {
      return nativeKeysIn(object2);
    }
    var isProto = isPrototype(object2), result = [];
    for (var key in object2) {
      if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object2, key)))) {
        result.push(key);
      }
    }
    return result;
  }
  function baseMerge(object2, source, srcIndex, customizer, stack) {
    if (object2 === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack());
      if (isObject2(srcValue)) {
        baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : void 0;
        if (newValue === void 0) {
          newValue = srcValue;
        }
        assignMergeValue(object2, key, newValue);
      }
    }, keysIn);
  }
  function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
      assignMergeValue(object2, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : void 0;
    var isCommon = newValue === void 0;
    if (isCommon) {
      var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray2(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        } else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        } else {
          newValue = [];
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject2(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack["delete"](srcValue);
    }
    assignMergeValue(object2, key, newValue);
  }
  function baseRest(func, start2) {
    return setToString(overRest(func, start2, identity2), func + "");
  }
  var baseSetToString = !defineProperty ? identity2 : function(func, string) {
    return defineProperty(func, "toString", {
      "configurable": true,
      "enumerable": false,
      "value": constant2(string),
      "writable": true
    });
  };
  function cloneBuffer(buffer2, isDeep) {
    if (isDeep) {
      return buffer2.slice();
    }
    var length = buffer2.length, result = allocUnsafe ? allocUnsafe(length) : new buffer2.constructor(length);
    buffer2.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array2) {
    var index = -1, length = source.length;
    array2 || (array2 = Array(length));
    while (++index < length) {
      array2[index] = source[index];
    }
    return array2;
  }
  function copyObject(source, props, object2, customizer) {
    var isNew = !object2;
    object2 || (object2 = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
      if (newValue === void 0) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object2, key, newValue);
      } else {
        assignValue(object2, key, newValue);
      }
    }
    return object2;
  }
  function createAssigner(assigner) {
    return baseRest(function(object2, sources) {
      var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
      customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? void 0 : customizer;
        length = 1;
      }
      object2 = Object(object2);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object2, source, index, customizer);
        }
      }
      return object2;
    });
  }
  function createBaseFor(fromRight) {
    return function(object2, iteratee, keysFunc) {
      var index = -1, iterable2 = Object(object2), props = keysFunc(object2), length = props.length;
      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable2[key], key, iterable2) === false) {
          break;
        }
      }
      return object2;
    };
  }
  function getMapData(map2, key) {
    var data2 = map2.__data__;
    return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object2, key) {
    var value = getValue(object2, key);
    return baseIsNative(value) ? value : void 0;
  }
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
      value[symToStringTag] = void 0;
      var unmasked = true;
    } catch (e) {
    }
    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }
  function initCloneObject(object2) {
    return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
  }
  function isIndex(value, length) {
    var type2 = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type2 == "number" || type2 != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isIterateeCall(value, index, object2) {
    if (!isObject2(object2)) {
      return false;
    }
    var type2 = typeof index;
    if (type2 == "number" ? isArrayLike(object2) && isIndex(index, object2.length) : type2 == "string" && index in object2) {
      return eq(object2[index], value);
    }
    return false;
  }
  function isKeyable(value) {
    var type2 = typeof value;
    return type2 == "string" || type2 == "number" || type2 == "symbol" || type2 == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function nativeKeysIn(object2) {
    var result = [];
    if (object2 != null) {
      for (var key in Object(object2)) {
        result.push(key);
      }
    }
    return result;
  }
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  function overRest(func, start2, transform) {
    start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
    return function() {
      var args2 = arguments, index = -1, length = nativeMax(args2.length - start2, 0), array2 = Array(length);
      while (++index < length) {
        array2[index] = args2[start2 + index];
      }
      index = -1;
      var otherArgs = Array(start2 + 1);
      while (++index < start2) {
        otherArgs[index] = args2[index];
      }
      otherArgs[start2] = transform(array2);
      return apply(func, this, otherArgs);
    };
  }
  function safeGet(object2, key) {
    if (key === "constructor" && typeof object2[key] === "function") {
      return;
    }
    if (key == "__proto__") {
      return;
    }
    return object2[key];
  }
  var setToString = shortOut(baseSetToString);
  function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
      var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(void 0, arguments);
    };
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArguments = baseIsArguments(function() {
    return arguments;
  }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
  };
  var isArray2 = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isFunction(value) {
    if (!isObject2(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject2(value) {
    var type2 = typeof value;
    return value != null && (type2 == "object" || type2 == "function");
  }
  function isObjectLike(value) {
    return value != null && typeof value == "object";
  }
  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
    return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
  }
  var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }
  function keysIn(object2) {
    return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
  }
  var merge2 = createAssigner(function(object2, source, srcIndex) {
    baseMerge(object2, source, srcIndex);
  });
  function constant2(value) {
    return function() {
      return value;
    };
  }
  function identity2(value) {
    return value;
  }
  function stubFalse() {
    return false;
  }
  module.exports = merge2;
})(lodash_merge, lodash_merge.exports);
var merge = lodash_merge.exports;
var frame = 0, timeout$1 = 0, interval$2 = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance === "object" && performance.now ? performance : Date, setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) {
  setTimeout(f, 17);
};
function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}
function clearNow() {
  clockNow = 0;
}
function Timer() {
  this._call = this._time = this._next = null;
}
Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function(callback, delay, time2) {
    if (typeof callback !== "function")
      throw new TypeError("callback is not a function");
    time2 = (time2 == null ? now() : +time2) + (delay == null ? 0 : +delay);
    if (!this._next && taskTail !== this) {
      if (taskTail)
        taskTail._next = this;
      else
        taskHead = this;
      taskTail = this;
    }
    this._call = callback;
    this._time = time2;
    sleep();
  },
  stop: function() {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};
function timer(callback, delay, time2) {
  var t = new Timer();
  t.restart(callback, delay, time2);
  return t;
}
function timerFlush() {
  now();
  ++frame;
  var t = taskHead, e;
  while (t) {
    if ((e = clockNow - t._time) >= 0)
      t._call.call(void 0, e);
    t = t._next;
  }
  --frame;
}
function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout$1 = 0;
  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}
function poke() {
  var now2 = clock.now(), delay = now2 - clockLast;
  if (delay > pokeDelay)
    clockSkew -= delay, clockLast = now2;
}
function nap() {
  var t0, t1 = taskHead, t2, time2 = Infinity;
  while (t1) {
    if (t1._call) {
      if (time2 > t1._time)
        time2 = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }
  taskTail = t0;
  sleep(time2);
}
function sleep(time2) {
  if (frame)
    return;
  if (timeout$1)
    timeout$1 = clearTimeout(timeout$1);
  var delay = time2 - clockNow;
  if (delay > 24) {
    if (time2 < Infinity)
      timeout$1 = setTimeout(wake, time2 - clock.now() - clockSkew);
    if (interval$2)
      interval$2 = clearInterval(interval$2);
  } else {
    if (!interval$2)
      clockLast = clock.now(), interval$2 = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
function timeout(callback, delay, time2) {
  var t = new Timer();
  delay = delay == null ? 0 : +delay;
  t.restart((elapsed) => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time2);
  return t;
}
var noop = { value: () => {
} };
function dispatch() {
  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
    if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t))
      throw new Error("illegal type: " + t);
    _[t] = [];
  }
  return new Dispatch(_);
}
function Dispatch(_) {
  this._ = _;
}
function parseTypenames(typenames, types) {
  return typenames.trim().split(/^|\s+/).map(function(t) {
    var name = "", i = t.indexOf(".");
    if (i >= 0)
      name = t.slice(i + 1), t = t.slice(0, i);
    if (t && !types.hasOwnProperty(t))
      throw new Error("unknown type: " + t);
    return { type: t, name };
  });
}
Dispatch.prototype = dispatch.prototype = {
  constructor: Dispatch,
  on: function(typename, callback) {
    var _ = this._, T = parseTypenames(typename + "", _), t, i = -1, n = T.length;
    if (arguments.length < 2) {
      while (++i < n)
        if ((t = (typename = T[i]).type) && (t = get$2(_[t], typename.name)))
          return t;
      return;
    }
    if (callback != null && typeof callback !== "function")
      throw new Error("invalid callback: " + callback);
    while (++i < n) {
      if (t = (typename = T[i]).type)
        _[t] = set$2(_[t], typename.name, callback);
      else if (callback == null)
        for (t in _)
          _[t] = set$2(_[t], typename.name, null);
    }
    return this;
  },
  copy: function() {
    var copy2 = {}, _ = this._;
    for (var t in _)
      copy2[t] = _[t].slice();
    return new Dispatch(copy2);
  },
  call: function(type2, that) {
    if ((n = arguments.length - 2) > 0)
      for (var args2 = new Array(n), i = 0, n, t; i < n; ++i)
        args2[i] = arguments[i + 2];
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args2);
  },
  apply: function(type2, that, args2) {
    if (!this._.hasOwnProperty(type2))
      throw new Error("unknown type: " + type2);
    for (var t = this._[type2], i = 0, n = t.length; i < n; ++i)
      t[i].value.apply(that, args2);
  }
};
function get$2(type2, name) {
  for (var i = 0, n = type2.length, c2; i < n; ++i) {
    if ((c2 = type2[i]).name === name) {
      return c2.value;
    }
  }
}
function set$2(type2, name, callback) {
  for (var i = 0, n = type2.length; i < n; ++i) {
    if (type2[i].name === name) {
      type2[i] = noop, type2 = type2.slice(0, i).concat(type2.slice(i + 1));
      break;
    }
  }
  if (callback != null)
    type2.push({ name, value: callback });
  return type2;
}
const nonpassivecapture = { capture: true, passive: false };
function noevent$1(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function dragDisable(view) {
  var root2 = view.document.documentElement, selection2 = select(view).on("dragstart.drag", noevent$1, nonpassivecapture);
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", noevent$1, nonpassivecapture);
  } else {
    root2.__noselect = root2.style.MozUserSelect;
    root2.style.MozUserSelect = "none";
  }
}
function yesdrag(view, noclick) {
  var root2 = view.document.documentElement, selection2 = select(view).on("dragstart.drag", null);
  if (noclick) {
    selection2.on("click.drag", noevent$1, nonpassivecapture);
    setTimeout(function() {
      selection2.on("click.drag", null);
    }, 0);
  }
  if ("onselectstart" in root2) {
    selection2.on("selectstart.drag", null);
  } else {
    root2.style.MozUserSelect = root2.__noselect;
    delete root2.__noselect;
  }
}
function define(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}
function Color$1() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"), reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"), reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"), reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"), reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"), reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define(Color$1, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m, l;
  format2 = (format2 + "").trim().toLowerCase();
  return (m = reHex.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n) {
  return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
}
function rgba(r, g, b, a) {
  if (a <= 0)
    r = g = b = NaN;
  return new Rgb(r, g, b, a);
}
function rgbConvert(o) {
  if (!(o instanceof Color$1))
    o = color(o);
  if (!o)
    return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}
function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}
function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}
define(Rgb, rgb, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a = this.opacity;
  a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
  return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h, s, l, a) {
  if (a <= 0)
    h = s = l = NaN;
  else if (l <= 0 || l >= 1)
    h = s = NaN;
  else if (s <= 0)
    h = NaN;
  return new Hsl(h, s, l, a);
}
function hslConvert(o) {
  if (o instanceof Hsl)
    return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color$1))
    o = color(o);
  if (!o)
    return new Hsl();
  if (o instanceof Hsl)
    return o;
  o = o.rgb();
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r, g, b), max2 = Math.max(r, g, b), h = NaN, s = max2 - min2, l = (max2 + min2) / 2;
  if (s) {
    if (r === max2)
      h = (g - b) / s + (g < b) * 6;
    else if (g === max2)
      h = (b - r) / s + 2;
    else
      h = (r - g) / s + 4;
    s /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }
  return new Hsl(h, s, l, o.opacity);
}
function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}
function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define(Hsl, hsl, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = this.h % 360 + (this.h < 0) * 360, s = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s, m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a = this.opacity;
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
    return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
  }
}));
function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
const radians = Math.PI / 180;
const degrees$1 = 180 / Math.PI;
var A = -0.14861, B = 1.78277, C = -0.29227, D = -0.90649, E = 1.97294, ED = E * D, EB = E * B, BC_DA = B * C - D * A;
function cubehelixConvert(o) {
  if (o instanceof Cubehelix)
    return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Rgb))
    o = rgbConvert(o);
  var r = o.r / 255, g = o.g / 255, b = o.b / 255, l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB), bl = b - l, k = (E * (g - l) - C * bl) / D, s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), h = s ? Math.atan2(k, bl) * degrees$1 - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}
function cubehelix$2(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}
function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}
define(Cubehelix, cubehelix$2, extend(Color$1, {
  brighter: function(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  darker: function(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },
  rgb: function() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * radians, l = +this.l, a = isNaN(this.s) ? 0 : this.s * l * (1 - l), cosh2 = Math.cos(h), sinh2 = Math.sin(h);
    return new Rgb(255 * (l + a * (A * cosh2 + B * sinh2)), 255 * (l + a * (C * cosh2 + D * sinh2)), 255 * (l + a * (E * cosh2)), this.opacity);
  }
}));
function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1, t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}
function basis$1(values) {
  var n = values.length - 1;
  return function(t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
var constant$1 = (x) => () => x;
function linear$1(a, d) {
  return function(t) {
    return a + t * d;
  };
}
function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
    return Math.pow(a + t * b, y);
  };
}
function hue(a, b) {
  var d = b - a;
  return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$1(isNaN(a) ? b : a);
}
function gamma(y) {
  return (y = +y) === 1 ? nogamma : function(a, b) {
    return b - a ? exponential(a, b, y) : constant$1(isNaN(a) ? b : a);
  };
}
function nogamma(a, b) {
  var d = b - a;
  return d ? linear$1(a, d) : constant$1(isNaN(a) ? b : a);
}
var interpolateRgb = function rgbGamma(y) {
  var color2 = gamma(y);
  function rgb$1(start2, end) {
    var r = color2((start2 = rgb(start2)).r, (end = rgb(end)).r), g = color2(start2.g, end.g), b = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t) {
      start2.r = r(t);
      start2.g = g(t);
      start2.b = b(t);
      start2.opacity = opacity(t);
      return start2 + "";
    };
  }
  rgb$1.gamma = rgbGamma;
  return rgb$1;
}(1);
function rgbSpline(spline) {
  return function(colors2) {
    var n = colors2.length, r = new Array(n), g = new Array(n), b = new Array(n), i, color2;
    for (i = 0; i < n; ++i) {
      color2 = rgb(colors2[i]);
      r[i] = color2.r || 0;
      g[i] = color2.g || 0;
      b[i] = color2.b || 0;
    }
    r = spline(r);
    g = spline(g);
    b = spline(b);
    color2.opacity = 1;
    return function(t) {
      color2.r = r(t);
      color2.g = g(t);
      color2.b = b(t);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis$1);
function numberArray(a, b) {
  if (!b)
    b = [];
  var n = a ? Math.min(b.length, a.length) : 0, c2 = b.slice(), i;
  return function(t) {
    for (i = 0; i < n; ++i)
      c2[i] = a[i] * (1 - t) + b[i] * t;
    return c2;
  };
}
function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
function genericArray(a, b) {
  var nb = b ? b.length : 0, na = a ? Math.min(nb, a.length) : 0, x = new Array(na), c2 = new Array(nb), i;
  for (i = 0; i < na; ++i)
    x[i] = interpolate$1(a[i], b[i]);
  for (; i < nb; ++i)
    c2[i] = b[i];
  return function(t) {
    for (i = 0; i < na; ++i)
      c2[i] = x[i](t);
    return c2;
  };
}
function date$2(a, b) {
  var d = new Date();
  return a = +a, b = +b, function(t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
function interpolateNumber(a, b) {
  return a = +a, b = +b, function(t) {
    return a * (1 - t) + b * t;
  };
}
function object(a, b) {
  var i = {}, c2 = {}, k;
  if (a === null || typeof a !== "object")
    a = {};
  if (b === null || typeof b !== "object")
    b = {};
  for (k in b) {
    if (k in a) {
      i[k] = interpolate$1(a[k], b[k]);
    } else {
      c2[k] = b[k];
    }
  }
  return function(t) {
    for (k in i)
      c2[k] = i[k](t);
    return c2;
  };
}
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
function zero(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t) {
    return b(t) + "";
  };
}
function interpolateString(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
  a = a + "", b = b + "";
  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s[i])
        s[i] += bs;
      else
        s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s[i])
        s[i] += bm;
      else
        s[++i] = bm;
    } else {
      s[++i] = null;
      q.push({ i, x: interpolateNumber(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i])
      s[i] += bs;
    else
      s[++i] = bs;
  }
  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function(t) {
    for (var i2 = 0, o; i2 < b; ++i2)
      s[(o = q[i2]).i] = o.x(t);
    return s.join("");
  });
}
function interpolate$1(a, b) {
  var t = typeof b, c2;
  return b == null || t === "boolean" ? constant$1(b) : (t === "number" ? interpolateNumber : t === "string" ? (c2 = color(b)) ? (b = c2, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date$2 : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object : interpolateNumber)(a, b);
}
function interpolateRound(a, b) {
  return a = +a, b = +b, function(t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
var degrees = 180 / Math.PI;
var identity$4 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose(a, b, c2, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b))
    a /= scaleX, b /= scaleX;
  if (skewX = a * c2 + b * d)
    c2 -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c2 * c2 + d * d))
    c2 /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c2)
    a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX,
    scaleY
  };
}
var svgNode;
function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? identity$4 : decompose(m.a, m.b, m.c, m.d, m.e, m.f);
}
function parseSvg(value) {
  if (value == null)
    return identity$4;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity$4;
  value = value.matrix;
  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
}
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180)
        b += 360;
      else if (b - a > 180)
        a += 360;
      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }
  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: interpolateNumber(a, b) });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a, b) {
    var s = [], q = [];
    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null;
    return function(t) {
      var i = -1, n = q.length, o;
      while (++i < n)
        s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");
var epsilon2 = 1e-12;
function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}
function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}
function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}
var interpolateZoom = function zoomRho(rho, rho2, rho4) {
  function zoom2(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;
      i = function(t) {
        return [
          ux0 + t * dx,
          uy0 + t * dy,
          w0 * Math.exp(rho * t * S)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;
      i = function(t) {
        var s = t * S, coshr0 = cosh(r0), u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [
          ux0 + u * dx,
          uy0 + u * dy,
          w0 * coshr0 / cosh(rho * s + r0)
        ];
      };
    }
    i.duration = S * 1e3 * rho / Math.SQRT2;
    return i;
  }
  zoom2.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom2;
}(Math.SQRT2, 2, 4);
function cubehelix$1(hue2) {
  return function cubehelixGamma(y) {
    y = +y;
    function cubehelix2(start2, end) {
      var h = hue2((start2 = cubehelix$2(start2)).h, (end = cubehelix$2(end)).h), s = nogamma(start2.s, end.s), l = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t) {
        start2.h = h(t);
        start2.s = s(t);
        start2.l = l(Math.pow(t, y));
        start2.opacity = opacity(t);
        return start2 + "";
      };
    }
    cubehelix2.gamma = cubehelixGamma;
    return cubehelix2;
  }(1);
}
cubehelix$1(hue);
var cubehelixLong = cubehelix$1(nogamma);
var emptyOn = dispatch("start", "end", "cancel", "interrupt");
var emptyTween = [];
var CREATED = 0;
var SCHEDULED = 1;
var STARTING = 2;
var STARTED = 3;
var RUNNING = 4;
var ENDING = 5;
var ENDED = 6;
function schedule(node, name, id2, index, group, timing) {
  var schedules = node.__transition;
  if (!schedules)
    node.__transition = {};
  else if (id2 in schedules)
    return;
  create(node, id2, {
    name,
    index,
    group,
    on: emptyOn,
    tween: emptyTween,
    time: timing.time,
    delay: timing.delay,
    duration: timing.duration,
    ease: timing.ease,
    timer: null,
    state: CREATED
  });
}
function init(node, id2) {
  var schedule2 = get$1(node, id2);
  if (schedule2.state > CREATED)
    throw new Error("too late; already scheduled");
  return schedule2;
}
function set$1(node, id2) {
  var schedule2 = get$1(node, id2);
  if (schedule2.state > STARTED)
    throw new Error("too late; already running");
  return schedule2;
}
function get$1(node, id2) {
  var schedule2 = node.__transition;
  if (!schedule2 || !(schedule2 = schedule2[id2]))
    throw new Error("transition not found");
  return schedule2;
}
function create(node, id2, self2) {
  var schedules = node.__transition, tween;
  schedules[id2] = self2;
  self2.timer = timer(schedule2, 0, self2.time);
  function schedule2(elapsed) {
    self2.state = SCHEDULED;
    self2.timer.restart(start2, self2.delay, self2.time);
    if (self2.delay <= elapsed)
      start2(elapsed - self2.delay);
  }
  function start2(elapsed) {
    var i, j, n, o;
    if (self2.state !== SCHEDULED)
      return stop();
    for (i in schedules) {
      o = schedules[i];
      if (o.name !== self2.name)
        continue;
      if (o.state === STARTED)
        return timeout(start2);
      if (o.state === RUNNING) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("interrupt", node, node.__data__, o.index, o.group);
        delete schedules[i];
      } else if (+i < id2) {
        o.state = ENDED;
        o.timer.stop();
        o.on.call("cancel", node, node.__data__, o.index, o.group);
        delete schedules[i];
      }
    }
    timeout(function() {
      if (self2.state === STARTED) {
        self2.state = RUNNING;
        self2.timer.restart(tick, self2.delay, self2.time);
        tick(elapsed);
      }
    });
    self2.state = STARTING;
    self2.on.call("start", node, node.__data__, self2.index, self2.group);
    if (self2.state !== STARTING)
      return;
    self2.state = STARTED;
    tween = new Array(n = self2.tween.length);
    for (i = 0, j = -1; i < n; ++i) {
      if (o = self2.tween[i].value.call(node, node.__data__, self2.index, self2.group)) {
        tween[++j] = o;
      }
    }
    tween.length = j + 1;
  }
  function tick(elapsed) {
    var t = elapsed < self2.duration ? self2.ease.call(null, elapsed / self2.duration) : (self2.timer.restart(stop), self2.state = ENDING, 1), i = -1, n = tween.length;
    while (++i < n) {
      tween[i].call(node, t);
    }
    if (self2.state === ENDING) {
      self2.on.call("end", node, node.__data__, self2.index, self2.group);
      stop();
    }
  }
  function stop() {
    self2.state = ENDED;
    self2.timer.stop();
    delete schedules[id2];
    for (var i in schedules)
      return;
    delete node.__transition;
  }
}
function interrupt(node, name) {
  var schedules = node.__transition, schedule2, active, empty2 = true, i;
  if (!schedules)
    return;
  name = name == null ? null : name + "";
  for (i in schedules) {
    if ((schedule2 = schedules[i]).name !== name) {
      empty2 = false;
      continue;
    }
    active = schedule2.state > STARTING && schedule2.state < ENDING;
    schedule2.state = ENDED;
    schedule2.timer.stop();
    schedule2.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule2.index, schedule2.group);
    delete schedules[i];
  }
  if (empty2)
    delete node.__transition;
}
function selection_interrupt(name) {
  return this.each(function() {
    interrupt(this, name);
  });
}
function tweenRemove(id2, name) {
  var tween0, tween1;
  return function() {
    var schedule2 = set$1(this, id2), tween = schedule2.tween;
    if (tween !== tween0) {
      tween1 = tween0 = tween;
      for (var i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1 = tween1.slice();
          tween1.splice(i, 1);
          break;
        }
      }
    }
    schedule2.tween = tween1;
  };
}
function tweenFunction(id2, name, value) {
  var tween0, tween1;
  if (typeof value !== "function")
    throw new Error();
  return function() {
    var schedule2 = set$1(this, id2), tween = schedule2.tween;
    if (tween !== tween0) {
      tween1 = (tween0 = tween).slice();
      for (var t = { name, value }, i = 0, n = tween1.length; i < n; ++i) {
        if (tween1[i].name === name) {
          tween1[i] = t;
          break;
        }
      }
      if (i === n)
        tween1.push(t);
    }
    schedule2.tween = tween1;
  };
}
function transition_tween(name, value) {
  var id2 = this._id;
  name += "";
  if (arguments.length < 2) {
    var tween = get$1(this.node(), id2).tween;
    for (var i = 0, n = tween.length, t; i < n; ++i) {
      if ((t = tween[i]).name === name) {
        return t.value;
      }
    }
    return null;
  }
  return this.each((value == null ? tweenRemove : tweenFunction)(id2, name, value));
}
function tweenValue(transition, name, value) {
  var id2 = transition._id;
  transition.each(function() {
    var schedule2 = set$1(this, id2);
    (schedule2.value || (schedule2.value = {}))[name] = value.apply(this, arguments);
  });
  return function(node) {
    return get$1(node, id2).value[name];
  };
}
function interpolate(a, b) {
  var c2;
  return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c2 = color(b)) ? (b = c2, interpolateRgb) : interpolateString)(a, b);
}
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttribute(name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function attrConstantNS(fullname, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = this.getAttributeNS(fullname.space, fullname.local);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function attrFunction(name, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttribute(name);
    string0 = this.getAttribute(name);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function attrFunctionNS(fullname, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0, value1 = value(this), string1;
    if (value1 == null)
      return void this.removeAttributeNS(fullname.space, fullname.local);
    string0 = this.getAttributeNS(fullname.space, fullname.local);
    string1 = value1 + "";
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function transition_attr(name, value) {
  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value));
}
function attrInterpolate(name, i) {
  return function(t) {
    this.setAttribute(name, i.call(this, t));
  };
}
function attrInterpolateNS(fullname, i) {
  return function(t) {
    this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
  };
}
function attrTweenNS(fullname, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolateNS(fullname, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function attrTween(name, value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && attrInterpolate(name, i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_attrTween(name, value) {
  var key = "attr." + name;
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  var fullname = namespace(name);
  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
}
function delayFunction(id2, value) {
  return function() {
    init(this, id2).delay = +value.apply(this, arguments);
  };
}
function delayConstant(id2, value) {
  return value = +value, function() {
    init(this, id2).delay = value;
  };
}
function transition_delay(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id2, value)) : get$1(this.node(), id2).delay;
}
function durationFunction(id2, value) {
  return function() {
    set$1(this, id2).duration = +value.apply(this, arguments);
  };
}
function durationConstant(id2, value) {
  return value = +value, function() {
    set$1(this, id2).duration = value;
  };
}
function transition_duration(value) {
  var id2 = this._id;
  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id2, value)) : get$1(this.node(), id2).duration;
}
function easeConstant(id2, value) {
  if (typeof value !== "function")
    throw new Error();
  return function() {
    set$1(this, id2).ease = value;
  };
}
function transition_ease(value) {
  var id2 = this._id;
  return arguments.length ? this.each(easeConstant(id2, value)) : get$1(this.node(), id2).ease;
}
function easeVarying(id2, value) {
  return function() {
    var v = value.apply(this, arguments);
    if (typeof v !== "function")
      throw new Error();
    set$1(this, id2).ease = v;
  };
}
function transition_easeVarying(value) {
  if (typeof value !== "function")
    throw new Error();
  return this.each(easeVarying(this._id, value));
}
function transition_filter(match) {
  if (typeof match !== "function")
    match = matcher(match);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
        subgroup.push(node);
      }
    }
  }
  return new Transition(subgroups, this._parents, this._name, this._id);
}
function transition_merge(transition) {
  if (transition._id !== this._id)
    throw new Error();
  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge2 = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
      if (node = group0[i] || group1[i]) {
        merge2[i] = node;
      }
    }
  }
  for (; j < m0; ++j) {
    merges[j] = groups0[j];
  }
  return new Transition(merges, this._parents, this._name, this._id);
}
function start(name) {
  return (name + "").trim().split(/^|\s+/).every(function(t) {
    var i = t.indexOf(".");
    if (i >= 0)
      t = t.slice(0, i);
    return !t || t === "start";
  });
}
function onFunction(id2, name, listener) {
  var on0, on1, sit = start(name) ? init : set$1;
  return function() {
    var schedule2 = sit(this, id2), on = schedule2.on;
    if (on !== on0)
      (on1 = (on0 = on).copy()).on(name, listener);
    schedule2.on = on1;
  };
}
function transition_on(name, listener) {
  var id2 = this._id;
  return arguments.length < 2 ? get$1(this.node(), id2).on.on(name) : this.each(onFunction(id2, name, listener));
}
function removeFunction(id2) {
  return function() {
    var parent = this.parentNode;
    for (var i in this.__transition)
      if (+i !== id2)
        return;
    if (parent)
      parent.removeChild(this);
  };
}
function transition_remove() {
  return this.on("end.remove", removeFunction(this._id));
}
function transition_select(select2) {
  var name = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selector(select2);
  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
      if ((node = group[i]) && (subnode = select2.call(node, node.__data__, i, group))) {
        if ("__data__" in node)
          subnode.__data__ = node.__data__;
        subgroup[i] = subnode;
        schedule(subgroup[i], name, id2, i, subgroup, get$1(node, id2));
      }
    }
  }
  return new Transition(subgroups, this._parents, name, id2);
}
function transition_selectAll(select2) {
  var name = this._name, id2 = this._id;
  if (typeof select2 !== "function")
    select2 = selectorAll(select2);
  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        for (var children2 = select2.call(node, node.__data__, i, group), child, inherit2 = get$1(node, id2), k = 0, l = children2.length; k < l; ++k) {
          if (child = children2[k]) {
            schedule(child, name, id2, k, children2, inherit2);
          }
        }
        subgroups.push(children2);
        parents.push(node);
      }
    }
  }
  return new Transition(subgroups, parents, name, id2);
}
var Selection = selection.prototype.constructor;
function transition_selection() {
  return new Selection(this._groups, this._parents);
}
function styleNull(name, interpolate2) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), string1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, string10 = string1);
  };
}
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, interpolate2, value1) {
  var string00, string1 = value1 + "", interpolate0;
  return function() {
    var string0 = styleValue(this, name);
    return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate2(string00 = string0, value1);
  };
}
function styleFunction(name, interpolate2, value) {
  var string00, string10, interpolate0;
  return function() {
    var string0 = styleValue(this, name), value1 = value(this), string1 = value1 + "";
    if (value1 == null)
      string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
    return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate2(string00 = string0, value1));
  };
}
function styleMaybeRemove(id2, name) {
  var on0, on1, listener0, key = "style." + name, event = "end." + key, remove2;
  return function() {
    var schedule2 = set$1(this, id2), on = schedule2.on, listener = schedule2.value[key] == null ? remove2 || (remove2 = styleRemove(name)) : void 0;
    if (on !== on0 || listener0 !== listener)
      (on1 = (on0 = on).copy()).on(event, listener0 = listener);
    schedule2.on = on1;
  };
}
function transition_style(name, value, priority) {
  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
  return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove(name)) : typeof value === "function" ? this.styleTween(name, styleFunction(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant(name, i, value), priority).on("end.style." + name, null);
}
function styleInterpolate(name, i, priority) {
  return function(t) {
    this.style.setProperty(name, i.call(this, t), priority);
  };
}
function styleTween(name, value, priority) {
  var t, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t = (i0 = i) && styleInterpolate(name, i, priority);
    return t;
  }
  tween._value = value;
  return tween;
}
function transition_styleTween(name, value, priority) {
  var key = "style." + (name += "");
  if (arguments.length < 2)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var value1 = value(this);
    this.textContent = value1 == null ? "" : value1;
  };
}
function transition_text(value) {
  return this.tween("text", typeof value === "function" ? textFunction(tweenValue(this, "text", value)) : textConstant(value == null ? "" : value + ""));
}
function textInterpolate(i) {
  return function(t) {
    this.textContent = i.call(this, t);
  };
}
function textTween(value) {
  var t0, i0;
  function tween() {
    var i = value.apply(this, arguments);
    if (i !== i0)
      t0 = (i0 = i) && textInterpolate(i);
    return t0;
  }
  tween._value = value;
  return tween;
}
function transition_textTween(value) {
  var key = "text";
  if (arguments.length < 1)
    return (key = this.tween(key)) && key._value;
  if (value == null)
    return this.tween(key, null);
  if (typeof value !== "function")
    throw new Error();
  return this.tween(key, textTween(value));
}
function transition_transition() {
  var name = this._name, id0 = this._id, id1 = newId();
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        var inherit2 = get$1(node, id0);
        schedule(node, name, id1, i, group, {
          time: inherit2.time + inherit2.delay + inherit2.duration,
          delay: 0,
          duration: inherit2.duration,
          ease: inherit2.ease
        });
      }
    }
  }
  return new Transition(groups, this._parents, name, id1);
}
function transition_end() {
  var on0, on1, that = this, id2 = that._id, size = that.size();
  return new Promise(function(resolve, reject) {
    var cancel = { value: reject }, end = { value: function() {
      if (--size === 0)
        resolve();
    } };
    that.each(function() {
      var schedule2 = set$1(this, id2), on = schedule2.on;
      if (on !== on0) {
        on1 = (on0 = on).copy();
        on1._.cancel.push(cancel);
        on1._.interrupt.push(cancel);
        on1._.end.push(end);
      }
      schedule2.on = on1;
    });
    if (size === 0)
      resolve();
  });
}
var id = 0;
function Transition(groups, parents, name, id2) {
  this._groups = groups;
  this._parents = parents;
  this._name = name;
  this._id = id2;
}
function newId() {
  return ++id;
}
var selection_prototype = selection.prototype;
Transition.prototype = {
  constructor: Transition,
  select: transition_select,
  selectAll: transition_selectAll,
  selectChild: selection_prototype.selectChild,
  selectChildren: selection_prototype.selectChildren,
  filter: transition_filter,
  merge: transition_merge,
  selection: transition_selection,
  transition: transition_transition,
  call: selection_prototype.call,
  nodes: selection_prototype.nodes,
  node: selection_prototype.node,
  size: selection_prototype.size,
  empty: selection_prototype.empty,
  each: selection_prototype.each,
  on: transition_on,
  attr: transition_attr,
  attrTween: transition_attrTween,
  style: transition_style,
  styleTween: transition_styleTween,
  text: transition_text,
  textTween: transition_textTween,
  remove: transition_remove,
  tween: transition_tween,
  delay: transition_delay,
  duration: transition_duration,
  ease: transition_ease,
  easeVarying: transition_easeVarying,
  end: transition_end,
  [Symbol.iterator]: selection_prototype[Symbol.iterator]
};
function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
var defaultTiming = {
  time: null,
  delay: 0,
  duration: 250,
  ease: cubicInOut
};
function inherit(node, id2) {
  var timing;
  while (!(timing = node.__transition) || !(timing = timing[id2])) {
    if (!(node = node.parentNode)) {
      throw new Error(`transition ${id2} not found`);
    }
  }
  return timing;
}
function selection_transition(name) {
  var id2, timing;
  if (name instanceof Transition) {
    id2 = name._id, name = name._name;
  } else {
    id2 = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
  }
  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
      if (node = group[i]) {
        schedule(node, name, id2, i, group, timing || inherit(node, id2));
      }
    }
  }
  return new Transition(groups, this._parents, name, id2);
}
selection.prototype.interrupt = selection_interrupt;
selection.prototype.transition = selection_transition;
var constant = (x) => () => x;
function ZoomEvent(type2, {
  sourceEvent: sourceEvent2,
  target,
  transform,
  dispatch: dispatch2
}) {
  Object.defineProperties(this, {
    type: { value: type2, enumerable: true, configurable: true },
    sourceEvent: { value: sourceEvent2, enumerable: true, configurable: true },
    target: { value: target, enumerable: true, configurable: true },
    transform: { value: transform, enumerable: true, configurable: true },
    _: { value: dispatch2 }
  });
}
function Transform(k, x, y) {
  this.k = k;
  this.x = x;
  this.y = y;
}
Transform.prototype = {
  constructor: Transform,
  scale: function(k) {
    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
  },
  translate: function(x, y) {
    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
  },
  apply: function(point) {
    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
  },
  applyX: function(x) {
    return x * this.k + this.x;
  },
  applyY: function(y) {
    return y * this.k + this.y;
  },
  invert: function(location) {
    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
  },
  invertX: function(x) {
    return (x - this.x) / this.k;
  },
  invertY: function(y) {
    return (y - this.y) / this.k;
  },
  rescaleX: function(x) {
    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
  },
  rescaleY: function(y) {
    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
  },
  toString: function() {
    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
  }
};
var identity$3 = new Transform(1, 0, 0);
function nopropagation(event) {
  event.stopImmediatePropagation();
}
function noevent(event) {
  event.preventDefault();
  event.stopImmediatePropagation();
}
function defaultFilter(event) {
  return (!event.ctrlKey || event.type === "wheel") && !event.button;
}
function defaultExtent() {
  var e = this;
  if (e instanceof SVGElement) {
    e = e.ownerSVGElement || e;
    if (e.hasAttribute("viewBox")) {
      e = e.viewBox.baseVal;
      return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
    }
    return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
  }
  return [[0, 0], [e.clientWidth, e.clientHeight]];
}
function defaultTransform() {
  return this.__zoom || identity$3;
}
function defaultWheelDelta(event) {
  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 2e-3) * (event.ctrlKey ? 10 : 1);
}
function defaultTouchable() {
  return navigator.maxTouchPoints || "ontouchstart" in this;
}
function defaultConstrain(transform, extent2, translateExtent) {
  var dx0 = transform.invertX(extent2[0][0]) - translateExtent[0][0], dx1 = transform.invertX(extent2[1][0]) - translateExtent[1][0], dy0 = transform.invertY(extent2[0][1]) - translateExtent[0][1], dy1 = transform.invertY(extent2[1][1]) - translateExtent[1][1];
  return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
}
function zoom() {
  var filter2 = defaultFilter, extent2 = defaultExtent, constrain = defaultConstrain, wheelDelta = defaultWheelDelta, touchable = defaultTouchable, scaleExtent = [0, Infinity], translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]], duration = 250, interpolate2 = interpolateZoom, listeners = dispatch("start", "zoom", "end"), touchstarting, touchfirst, touchending, touchDelay = 500, wheelDelay = 150, clickDistance2 = 0, tapDistance = 10;
  function zoom2(selection2) {
    selection2.property("__zoom", defaultTransform).on("wheel.zoom", wheeled, { passive: false }).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
  }
  zoom2.transform = function(collection, transform, point, event) {
    var selection2 = collection.selection ? collection.selection() : collection;
    selection2.property("__zoom", defaultTransform);
    if (collection !== selection2) {
      schedule2(collection, transform, point, event);
    } else {
      selection2.interrupt().each(function() {
        gesture(this, arguments).event(event).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
      });
    }
  };
  zoom2.scaleBy = function(selection2, k, p, event) {
    zoom2.scaleTo(selection2, function() {
      var k0 = this.__zoom.k, k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return k0 * k1;
    }, p, event);
  };
  zoom2.scaleTo = function(selection2, k, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent2.apply(this, arguments), t0 = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p, p1 = t0.invert(p0), k1 = typeof k === "function" ? k.apply(this, arguments) : k;
      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
    }, p, event);
  };
  zoom2.translateBy = function(selection2, x, y, event) {
    zoom2.transform(selection2, function() {
      return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent2.apply(this, arguments), translateExtent);
    }, null, event);
  };
  zoom2.translateTo = function(selection2, x, y, p, event) {
    zoom2.transform(selection2, function() {
      var e = extent2.apply(this, arguments), t = this.__zoom, p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
      return constrain(identity$3.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
    }, p, event);
  };
  function scale(transform, k) {
    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
    return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
  }
  function translate(transform, p0, p1) {
    var x = p0[0] - p1[0] * transform.k, y = p0[1] - p1[1] * transform.k;
    return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
  }
  function centroid(extent3) {
    return [(+extent3[0][0] + +extent3[1][0]) / 2, (+extent3[0][1] + +extent3[1][1]) / 2];
  }
  function schedule2(transition, transform, point, event) {
    transition.on("start.zoom", function() {
      gesture(this, arguments).event(event).start();
    }).on("interrupt.zoom end.zoom", function() {
      gesture(this, arguments).event(event).end();
    }).tween("zoom", function() {
      var that = this, args2 = arguments, g = gesture(that, args2).event(event), e = extent2.apply(that, args2), p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args2) : point, w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]), a = that.__zoom, b = typeof transform === "function" ? transform.apply(that, args2) : transform, i = interpolate2(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
      return function(t) {
        if (t === 1)
          t = b;
        else {
          var l = i(t), k = w / l[2];
          t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
        }
        g.zoom(null, t);
      };
    });
  }
  function gesture(that, args2, clean) {
    return !clean && that.__zooming || new Gesture(that, args2);
  }
  function Gesture(that, args2) {
    this.that = that;
    this.args = args2;
    this.active = 0;
    this.sourceEvent = null;
    this.extent = extent2.apply(that, args2);
    this.taps = 0;
  }
  Gesture.prototype = {
    event: function(event) {
      if (event)
        this.sourceEvent = event;
      return this;
    },
    start: function() {
      if (++this.active === 1) {
        this.that.__zooming = this;
        this.emit("start");
      }
      return this;
    },
    zoom: function(key, transform) {
      if (this.mouse && key !== "mouse")
        this.mouse[1] = transform.invert(this.mouse[0]);
      if (this.touch0 && key !== "touch")
        this.touch0[1] = transform.invert(this.touch0[0]);
      if (this.touch1 && key !== "touch")
        this.touch1[1] = transform.invert(this.touch1[0]);
      this.that.__zoom = transform;
      this.emit("zoom");
      return this;
    },
    end: function() {
      if (--this.active === 0) {
        delete this.that.__zooming;
        this.emit("end");
      }
      return this;
    },
    emit: function(type2) {
      var d = select(this.that).datum();
      listeners.call(type2, this.that, new ZoomEvent(type2, {
        sourceEvent: this.sourceEvent,
        target: zoom2,
        type: type2,
        transform: this.that.__zoom,
        dispatch: listeners
      }), d);
    }
  };
  function wheeled(event, ...args2) {
    if (!filter2.apply(this, arguments))
      return;
    var g = gesture(this, args2).event(event), t = this.__zoom, k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))), p = pointer(event);
    if (g.wheel) {
      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
        g.mouse[1] = t.invert(g.mouse[0] = p);
      }
      clearTimeout(g.wheel);
    } else if (t.k === k)
      return;
    else {
      g.mouse = [p, t.invert(p)];
      interrupt(this);
      g.start();
    }
    noevent(event);
    g.wheel = setTimeout(wheelidled, wheelDelay);
    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
    function wheelidled() {
      g.wheel = null;
      g.end();
    }
  }
  function mousedowned(event, ...args2) {
    if (touchending || !filter2.apply(this, arguments))
      return;
    var currentTarget = event.currentTarget, g = gesture(this, args2, true).event(event), v = select(event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true), p = pointer(event, currentTarget), x02 = event.clientX, y02 = event.clientY;
    dragDisable(event.view);
    nopropagation(event);
    g.mouse = [p, this.__zoom.invert(p)];
    interrupt(this);
    g.start();
    function mousemoved(event2) {
      noevent(event2);
      if (!g.moved) {
        var dx = event2.clientX - x02, dy = event2.clientY - y02;
        g.moved = dx * dx + dy * dy > clickDistance2;
      }
      g.event(event2).zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = pointer(event2, currentTarget), g.mouse[1]), g.extent, translateExtent));
    }
    function mouseupped(event2) {
      v.on("mousemove.zoom mouseup.zoom", null);
      yesdrag(event2.view, g.moved);
      noevent(event2);
      g.event(event2).end();
    }
  }
  function dblclicked(event, ...args2) {
    if (!filter2.apply(this, arguments))
      return;
    var t0 = this.__zoom, p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this), p1 = t0.invert(p0), k1 = t0.k * (event.shiftKey ? 0.5 : 2), t1 = constrain(translate(scale(t0, k1), p0, p1), extent2.apply(this, args2), translateExtent);
    noevent(event);
    if (duration > 0)
      select(this).transition().duration(duration).call(schedule2, t1, p0, event);
    else
      select(this).call(zoom2.transform, t1, p0, event);
  }
  function touchstarted(event, ...args2) {
    if (!filter2.apply(this, arguments))
      return;
    var touches = event.touches, n = touches.length, g = gesture(this, args2, event.changedTouches.length === n).event(event), started, i, t, p;
    nopropagation(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      p = [p, this.__zoom.invert(p), t.identifier];
      if (!g.touch0)
        g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;
      else if (!g.touch1 && g.touch0[2] !== p[2])
        g.touch1 = p, g.taps = 0;
    }
    if (touchstarting)
      touchstarting = clearTimeout(touchstarting);
    if (started) {
      if (g.taps < 2)
        touchfirst = p[0], touchstarting = setTimeout(function() {
          touchstarting = null;
        }, touchDelay);
      interrupt(this);
      g.start();
    }
  }
  function touchmoved(event, ...args2) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args2).event(event), touches = event.changedTouches, n = touches.length, i, t, p, l;
    noevent(event);
    for (i = 0; i < n; ++i) {
      t = touches[i], p = pointer(t, this);
      if (g.touch0 && g.touch0[2] === t.identifier)
        g.touch0[0] = p;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        g.touch1[0] = p;
    }
    t = g.that.__zoom;
    if (g.touch1) {
      var p0 = g.touch0[0], l0 = g.touch0[1], p1 = g.touch1[0], l1 = g.touch1[1], dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp, dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
      t = scale(t, Math.sqrt(dp / dl));
      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
    } else if (g.touch0)
      p = g.touch0[0], l = g.touch0[1];
    else
      return;
    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
  }
  function touchended(event, ...args2) {
    if (!this.__zooming)
      return;
    var g = gesture(this, args2).event(event), touches = event.changedTouches, n = touches.length, i, t;
    nopropagation(event);
    if (touchending)
      clearTimeout(touchending);
    touchending = setTimeout(function() {
      touchending = null;
    }, touchDelay);
    for (i = 0; i < n; ++i) {
      t = touches[i];
      if (g.touch0 && g.touch0[2] === t.identifier)
        delete g.touch0;
      else if (g.touch1 && g.touch1[2] === t.identifier)
        delete g.touch1;
    }
    if (g.touch1 && !g.touch0)
      g.touch0 = g.touch1, delete g.touch1;
    if (g.touch0)
      g.touch0[1] = this.__zoom.invert(g.touch0[0]);
    else {
      g.end();
      if (g.taps === 2) {
        t = pointer(t, this);
        if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
          var p = select(this).on("dblclick.zoom");
          if (p)
            p.apply(this, arguments);
        }
      }
    }
  }
  zoom2.wheelDelta = function(_) {
    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom2) : wheelDelta;
  };
  zoom2.filter = function(_) {
    return arguments.length ? (filter2 = typeof _ === "function" ? _ : constant(!!_), zoom2) : filter2;
  };
  zoom2.touchable = function(_) {
    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom2) : touchable;
  };
  zoom2.extent = function(_) {
    return arguments.length ? (extent2 = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom2) : extent2;
  };
  zoom2.scaleExtent = function(_) {
    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom2) : [scaleExtent[0], scaleExtent[1]];
  };
  zoom2.translateExtent = function(_) {
    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom2) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
  };
  zoom2.constrain = function(_) {
    return arguments.length ? (constrain = _, zoom2) : constrain;
  };
  zoom2.duration = function(_) {
    return arguments.length ? (duration = +_, zoom2) : duration;
  };
  zoom2.interpolate = function(_) {
    return arguments.length ? (interpolate2 = _, zoom2) : interpolate2;
  };
  zoom2.on = function() {
    var value = listeners.on.apply(listeners, arguments);
    return value === listeners ? zoom2 : value;
  };
  zoom2.clickDistance = function(_) {
    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom2) : Math.sqrt(clickDistance2);
  };
  zoom2.tapDistance = function(_) {
    return arguments.length ? (tapDistance = +_, zoom2) : tapDistance;
  };
  return zoom2;
}
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}
function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;
    case 1: {
      if (typeof domain === "function")
        this.interpolator(domain);
      else
        this.range(domain);
      break;
    }
    default: {
      this.domain(domain);
      if (typeof interpolator === "function")
        this.interpolator(interpolator);
      else
        this.range(interpolator);
      break;
    }
  }
  return this;
}
const implicit = Symbol("implicit");
function ordinal() {
  var index = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale(d) {
    let i = index.get(d);
    if (i === void 0) {
      if (unknown !== implicit)
        return unknown;
      index.set(d, i = domain.push(d) - 1);
    }
    return range2[i % range2.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index = new InternMap();
    for (const value of _) {
      if (index.has(value))
        continue;
      index.set(value, domain.push(value) - 1);
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), scale) : range2.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}
function constants(x) {
  return function() {
    return x;
  };
}
function number(x) {
  return +x;
}
var unit = [0, 1];
function identity$2(x) {
  return x;
}
function normalize(a, b) {
  return (b -= a = +a) ? function(x) {
    return (x - a) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a, b) {
  var t;
  if (a > b)
    t = a, a = b, b = t;
  return function(x) {
    return Math.max(a, Math.min(b, x));
  };
}
function bimap(domain, range2, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x) {
    return r0(d0(x));
  };
}
function polymap(domain, range2, interpolate2) {
  var j = Math.min(domain.length, range2.length) - 1, d = new Array(j), r = new Array(j), i = -1;
  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate2(range2[i], range2[i + 1]);
  }
  return function(x) {
    var i2 = bisectRight(domain, x, 1, j) - 1;
    return r[i2](d[i2](x));
  };
}
function copy$1(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer$1() {
  var domain = unit, range2 = unit, interpolate2 = interpolate$1, transform, untransform, unknown, clamp = identity$2, piecewise, output, input;
  function rescale() {
    var n = Math.min(domain.length, range2.length);
    if (clamp !== identity$2)
      clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range2, interpolate2)))(transform(clamp(x)));
  }
  scale.invert = function(y) {
    return clamp(untransform((input || (input = piecewise(range2, domain.map(transform), interpolateNumber)))(y)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range2 = Array.from(_), rescale()) : range2.slice();
  };
  scale.rangeRound = function(_) {
    return range2 = Array.from(_), interpolate2 = interpolateRound, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity$2, rescale()) : clamp !== identity$2;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate2 = _, rescale()) : interpolate2;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}
function continuous() {
  return transformer$1()(identity$2, identity$2);
}
function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
}
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0)
    return null;
  var i, coefficient = x.slice(0, i);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}
function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}
function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
    while (i > 0 && g > 0) {
      if (length + g + 1 > width)
        g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width)
        break;
      g = grouping[j = (j + 1) % grouping.length];
    }
    return t.reverse().join(thousands);
  };
}
function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
function formatTrim(s) {
  out:
    for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0)
            i0 = i;
          i1 = i;
          break;
        default:
          if (!+s[i])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
var prefixExponent;
function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1], i = exponent2 - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent2 / 3))) * 3) + 1, n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0];
}
function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d)
    return x + "";
  var coefficient = d[0], exponent2 = d[1];
  return exponent2 < 0 ? "0." + new Array(-exponent2).join("0") + coefficient : coefficient.length > exponent2 + 1 ? coefficient.slice(0, exponent2 + 1) + "." + coefficient.slice(exponent2 + 1) : coefficient + new Array(exponent2 - coefficient.length + 2).join("0");
}
var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};
function identity$1(x) {
  return x;
}
var map$2 = Array.prototype.map, prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function formatLocale(locale2) {
  var group = locale2.grouping === void 0 || locale2.thousands === void 0 ? identity$1 : formatGroup(map$2.call(locale2.grouping, Number), locale2.thousands + ""), currencyPrefix = locale2.currency === void 0 ? "" : locale2.currency[0] + "", currencySuffix = locale2.currency === void 0 ? "" : locale2.currency[1] + "", decimal2 = locale2.decimal === void 0 ? "." : locale2.decimal + "", numerals = locale2.numerals === void 0 ? identity$1 : formatNumerals(map$2.call(locale2.numerals, String)), percent = locale2.percent === void 0 ? "%" : locale2.percent + "", minus = locale2.minus === void 0 ? "\u2212" : locale2.minus + "", nan = locale2.nan === void 0 ? "NaN" : locale2.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign = specifier.sign, symbol = specifier.symbol, zero2 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type2 = specifier.type;
    if (type2 === "n")
      comma = true, type2 = "g";
    else if (!formatTypes[type2])
      precision === void 0 && (precision = 12), trim = true, type2 = "g";
    if (zero2 || fill === "0" && align === "=")
      zero2 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type2) ? "0" + type2.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type2) ? percent : "";
    var formatType = formatTypes[type2], maybeSuffix = /[defgprs%]/.test(type2);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type2) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i, n, c2;
      if (type2 === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim(value);
        if (valueNegative && +value === 0 && sign !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type2 === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
              valueSuffix = (c2 === 46 ? decimal2 + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }
      if (comma && !zero2)
        value = group(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero2)
        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3, k = Math.pow(10, -e), prefix = prefixes[8 + e / 3];
    return function(value2) {
      return f(k * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}
function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}
function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}
function precisionRound(step, max2) {
  step = Math.abs(step), max2 = Math.abs(max2) - step;
  return Math.max(0, exponent(max2) - exponent(step)) + 1;
}
function tickFormat(start2, stop, count, specifier) {
  var step = tickStep(start2, stop, count), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start2), Math.abs(stop)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
  };
  scale.tickFormat = function(count, specifier) {
    var d = domain();
    return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };
  scale.nice = function(count) {
    if (count == null)
      count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start2 = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop < start2) {
      step = start2, start2 = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop, count);
      if (step === prestep) {
        d[i0] = start2;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear() {
  var scale = continuous();
  scale.copy = function() {
    return copy$1(scale, linear());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}
function identity(domain) {
  var unknown;
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : x;
  }
  scale.invert = scale;
  scale.domain = scale.range = function(_) {
    return arguments.length ? (domain = Array.from(_, number), scale) : domain.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return identity(domain).unknown(unknown);
  };
  domain = arguments.length ? Array.from(domain, number) : [0, 1];
  return linearish(scale);
}
function nice(domain, interval2) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x02 = domain[i0], x12 = domain[i1], t;
  if (x12 < x02) {
    t = i0, i0 = i1, i1 = t;
    t = x02, x02 = x12, x12 = t;
  }
  domain[i0] = interval2.floor(x02);
  domain[i1] = interval2.ceil(x12);
  return domain;
}
function transformLog(x) {
  return Math.log(x);
}
function transformExp(x) {
  return Math.exp(x);
}
function transformLogn(x) {
  return -Math.log(-x);
}
function transformExpn(x) {
  return -Math.exp(-x);
}
function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}
function powp(base2) {
  return base2 === 10 ? pow10 : base2 === Math.E ? Math.exp : (x) => Math.pow(base2, x);
}
function logp(base2) {
  return base2 === Math.E ? Math.log : base2 === 10 && Math.log10 || base2 === 2 && Math.log2 || (base2 = Math.log(base2), (x) => Math.log(x) / base2);
}
function reflect(f) {
  return (x, k) => -f(-x, k);
}
function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base2 = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base2), pows = powp(base2);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base2 = +_, rescale()) : base2;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = (count) => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;
    if (r)
      [u, v] = [v, u];
    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];
    if (!(base2 % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0)
        for (; i <= j; ++i) {
          for (k = 1; k < base2; ++k) {
            t = i < 0 ? k / pows(-i) : k * pows(i);
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      else
        for (; i <= j; ++i) {
          for (k = base2 - 1; k >= 1; --k) {
            t = i > 0 ? k / pows(-i) : k * pows(i);
            if (t < u)
              continue;
            if (t > v)
              break;
            z.push(t);
          }
        }
      if (z.length * 2 < n)
        z = ticks(u, v, n);
    } else {
      z = ticks(i, j, Math.min(j - i, n)).map(pows);
    }
    return r ? z.reverse() : z;
  };
  scale.tickFormat = (count, specifier) => {
    if (count == null)
      count = 10;
    if (specifier == null)
      specifier = base2 === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base2 % 1) && (specifier = formatSpecifier(specifier)).precision == null)
        specifier.trim = true;
      specifier = format(specifier);
    }
    if (count === Infinity)
      return specifier;
    const k = Math.max(1, base2 * count / scale.ticks().length);
    return (d) => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base2 < base2 - 0.5)
        i *= base2;
      return i <= k ? specifier(d) : "";
    };
  };
  scale.nice = () => {
    return domain(nice(domain(), {
      floor: (x) => pows(Math.floor(logs(x))),
      ceil: (x) => pows(Math.ceil(logs(x)))
    }));
  };
  return scale;
}
function log() {
  const scale = loggish(transformer$1()).domain([1, 10]);
  scale.copy = () => copy$1(scale, log()).base(scale.base());
  initRange.apply(scale, arguments);
  return scale;
}
function transformPow(exponent2) {
  return function(x) {
    return x < 0 ? -Math.pow(-x, exponent2) : Math.pow(x, exponent2);
  };
}
function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}
function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}
function powish(transform) {
  var scale = transform(identity$2, identity$2), exponent2 = 1;
  function rescale() {
    return exponent2 === 1 ? transform(identity$2, identity$2) : exponent2 === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent2), transformPow(1 / exponent2));
  }
  scale.exponent = function(_) {
    return arguments.length ? (exponent2 = +_, rescale()) : exponent2;
  };
  return linearish(scale);
}
function pow() {
  var scale = powish(transformer$1());
  scale.copy = function() {
    return copy$1(scale, pow()).exponent(scale.exponent());
  };
  initRange.apply(scale, arguments);
  return scale;
}
function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
function transformer() {
  var x02 = 0, x12 = 1, t0, t1, k10, transform, interpolator = identity$2, clamp = false, unknown;
  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }
  scale.domain = function(_) {
    return arguments.length ? ([x02, x12] = _, t0 = transform(x02 = +x02), t1 = transform(x12 = +x12), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x02, x12];
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };
  scale.interpolator = function(_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };
  function range2(interpolate2) {
    return function(_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }
  scale.range = range2(interpolate$1);
  scale.rangeRound = range2(interpolateRound);
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t) {
    transform = t, t0 = t(x02), t1 = t(x12), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}
function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}
function sequential() {
  var scale = linearish(transformer()(identity$2));
  scale.copy = function() {
    return copy(scale, sequential());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialLog() {
  var scale = loggish(transformer()).domain([1, 10]);
  scale.copy = function() {
    return copy(scale, sequentialLog()).base(scale.base());
  };
  return initInterpolator.apply(scale, arguments);
}
function sequentialPow() {
  var scale = powish(transformer());
  scale.copy = function() {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };
  return initInterpolator.apply(scale, arguments);
}
class Zoom {
  constructor(selector2, prefs) {
    this.prefs = prefs;
    this.canvas = select(selector2);
    this.width = +this.canvas.attr("width");
    this.height = +this.canvas.attr("height");
    this.renderers = new Map();
    this.renderers = new Map();
  }
  attach_tiles(tiles) {
    this.tileSet = tiles;
    this.tileSet._zoom = this;
    return this;
  }
  attach_renderer(key, renderer) {
    this.renderers.set(key, renderer);
    renderer.bind_zoom(this);
    renderer.zoom.initialize_zoom();
    return this;
  }
  zoom_to(k, x = null, y = null, duration = 4e3) {
    const scales2 = this.scales();
    const {
      canvas,
      zoomer,
      width,
      height
    } = this;
    const t = identity$3.translate(width / 2, height / 2).scale(k).translate(-scales2.x(x), -scales2.y(y));
    canvas.transition().duration(duration).call(zoomer.transform, t);
  }
  html_annotation(points) {
    const div = this.canvas.node().parentNode.parentNode;
    const els = select(div).selectAll("div.tooltip").data(points).join((enter) => enter.append("div").attr("class", "tooltip").style("top", 0).style("left", 0).style("position", "absolute").style("z-index", 100).style("border-radius", "8px").style("padding", "10px").style("background", "ivory").style("opacity", 0.75), (update) => update.html((d) => this.tooltip_html(d.data)), (exit) => exit.call((e) => e.remove()));
    els.html((d) => this.tooltip_html(d.data)).style("transform", (d) => {
      const t = `translate(${+d.x + d.dx}px, ${+d.y + d.dy}px)`;
      return t;
    });
  }
  get tooltip_html() {
    if (this._tooltip_html_function === void 0) {
      return label_from_point;
    } else {
      return this._tooltip_html_function;
    }
  }
  set tooltip_html(f) {
    throw new Error("Don't set this directly; set on the parent scatterplot.");
  }
  zoom_to_bbox(corners, duration = 4) {
    const scales2 = this.scales();
    const [x02, x12] = corners.x.map(scales2.x);
    const [y02, y12] = corners.y.map(scales2.y);
    const {
      canvas,
      zoomer,
      width,
      height
    } = this;
    const t = identity$3.translate(width / 2, height / 2).scale(0.9 / Math.max((x12 - x02) / width, (y12 - y02) / height)).translate(-(x02 + x12) / 2, -(y02 + y12) / 2);
    canvas.transition().duration(duration * 1e3).call(zoomer.transform, t);
  }
  initialize_zoom() {
    const { width, height, canvas } = this;
    this.transform = identity$3;
    const zoomer = zoom().scaleExtent([1 / 3, 1e5]).extent([[0, 0], [width, height]]).on("zoom", (event) => {
      this.transform = event.transform;
      this.restart_timer(10 * 1e3);
    });
    canvas.call(zoomer);
    this.add_mouseover();
    this.zoomer = zoomer;
  }
  add_mouseover() {
    let last_fired = 0;
    const renderer = this.renderers.get("regl");
    const x_aes = renderer.aes.dim("x").current;
    const y_aes = renderer.aes.dim("y").current;
    this.canvas.on("mousemove", (event) => {
      if (Date.now() - last_fired < 1e3 / 20) {
        return;
      }
      last_fired = Date.now();
      const p = renderer.color_pick(event.layerX, event.layerY);
      const data2 = p ? [p] : [];
      const d = data2[0];
      const annotations = d ? [
        {
          x: event.layerX,
          y: event.layerY,
          data: d,
          dx: 0,
          dy: 30
        }
      ] : [];
      const { x_, y_ } = this.scales();
      this.html_annotation(annotations);
      select("#deepscatter-svg").selectAll("circle.label").data(data2, (d_) => d_.ix).join((enter) => enter.append("circle").attr("class", "label").attr("stroke", "#110022").attr("r", 12).attr("fill", (dd) => this.renderers.get("regl").aes.dim("color").current.apply(dd)).attr("cx", (datum2) => x_(x_aes.value_for(datum2))).attr("cy", (datum2) => y_(y_aes.value_for(datum2))), (update) => update.attr("fill", (dd) => this.renderers.get("regl").aes.dim("color").current.apply(dd)), (exit) => exit.call((e) => e.remove())).on("click", (ev, dd) => {
        this.renderers.get("regl").click_function(dd, ev);
      });
    });
  }
  current_corners() {
    const { width, height } = this;
    const scales2 = this.scales();
    if (scales2 === void 0) {
      return void 0;
    }
    const { x_, y_ } = scales2;
    return {
      x: [x_.invert(0), x_.invert(width)],
      y: [y_.invert(0), y_.invert(height)]
    };
  }
  current_center() {
    const { x, y } = this.current_corners();
    return [
      (x[0] + x[1]) / 2,
      (y[0] + y[1]) / 2
    ];
  }
  restart_timer(run_at_least = 1e4) {
    let stop_at = Date.now() + run_at_least;
    if (this._timer) {
      if (this._timer.stop_at > stop_at) {
        stop_at = this._timer.stop_at;
      }
      this._timer.stop();
    }
    const t = timer(this.tick.bind(this));
    this._timer = t;
    this._timer.stop_at = stop_at;
    return this._timer;
  }
  data(dataset) {
    if (dataset === void 0) {
      return this.tileSet;
    }
    this.tileSet = dataset;
    return this;
  }
  scales(equal_units = true) {
    if (this._scales) {
      this._scales.x_ = this.transform.rescaleX(this._scales.x);
      this._scales.y_ = this.transform.rescaleY(this._scales.y);
      return this._scales;
    }
    const { width, height } = this;
    const { extent: extent2 } = this.tileSet;
    const scales2 = {};
    if (extent2 === void 0) {
      return void 0;
    }
    const scale_dat = {};
    for (const [name, dim] of [["x", width], ["y", height]]) {
      const limits = extent2[name];
      const size_range = limits[1] - limits[0];
      scale_dat[name] = {
        limits,
        size_range,
        pixels_per_unit: dim / size_range
      };
    }
    const data_aspect_ratio = scale_dat.x.pixels_per_unit / scale_dat.y.pixels_per_unit;
    let x_buffer_size = 0;
    let y_buffer_size = 0;
    let x_target_size = width;
    let y_target_size = height;
    if (data_aspect_ratio > 1) {
      x_target_size = width / data_aspect_ratio;
      x_buffer_size = (width - x_target_size) / 2;
    } else {
      y_target_size = height * data_aspect_ratio;
      y_buffer_size = (height - y_target_size) / 2;
    }
    scales2.x = linear().domain(scale_dat.x.limits).range([x_buffer_size, width - x_buffer_size]);
    scales2.y = linear().domain(scale_dat.y.limits).range([y_buffer_size, height - y_buffer_size]);
    scales2.x_ = this.transform.rescaleX(scales2.x);
    scales2.y_ = this.transform.rescaleY(scales2.y);
    this._scales = scales2;
    return scales2;
  }
  webgl_scale(flatten2 = true) {
    const { x, y } = this.scales();
    const transform = window_transform(x, y).flat();
    return transform;
  }
  tick(force = false) {
    this._start = this._start || Date.now();
    if (force !== true) {
      if (this._timer) {
        if (this._timer.stop_at <= Date.now()) {
          this._timer.stop();
        }
      }
    }
  }
}
function window_transform(x_scale, y_scale) {
  function gap(array2) {
    return array2[1] - array2[0];
  }
  const x_mid = mean(x_scale.domain());
  const y_mid = mean(y_scale.domain());
  const xmulti = gap(x_scale.range()) / gap(x_scale.domain());
  const ymulti = gap(y_scale.range()) / gap(y_scale.domain());
  const m1 = [
    [xmulti, 0, -xmulti * x_mid + mean(x_scale.range())],
    [0, ymulti, -ymulti * y_mid + mean(y_scale.range())],
    [0, 0, 1]
  ];
  return m1;
}
function label_from_point(point, defaults = null) {
  let output = "<dl>";
  const nope = new Set([
    "x",
    "y",
    "ix",
    "bookstack",
    null,
    "tile_key"
  ]);
  for (const [k, v] of point.entries()) {
    if (defaults !== null) {
      if (!defaults.has(k)) {
        continue;
      }
    } else {
      if (nope.has(k)) {
        continue;
      }
      if (k.match(/_dict_index/)) {
        continue;
      }
      if (v === null) {
        continue;
      }
      if (v === "") {
        continue;
      }
    }
    output += `<dt>${k}</dt>`;
    output += `<dd>${v}<dd>`;
  }
  return `${output}</dl>`;
}
var regl = { exports: {} };
(function(module, exports) {
  (function(global2, factory) {
    module.exports = factory();
  })(commonjsGlobal, function() {
    var isTypedArray2 = function(x) {
      return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;
    };
    var extend2 = function(base2, opts) {
      var keys = Object.keys(opts);
      for (var i = 0; i < keys.length; ++i) {
        base2[keys[i]] = opts[keys[i]];
      }
      return base2;
    };
    var endl = "\n";
    function decodeB64(str) {
      if (typeof atob !== "undefined") {
        return atob(str);
      }
      return "base64:" + str;
    }
    function raise2(message2) {
      var error = new Error("(regl) " + message2);
      console.error(error);
      throw error;
    }
    function check(pred, message2) {
      if (!pred) {
        raise2(message2);
      }
    }
    function encolon(message2) {
      if (message2) {
        return ": " + message2;
      }
      return "";
    }
    function checkParameter(param, possibilities, message2) {
      if (!(param in possibilities)) {
        raise2("unknown parameter (" + param + ")" + encolon(message2) + ". possible values: " + Object.keys(possibilities).join());
      }
    }
    function checkIsTypedArray(data2, message2) {
      if (!isTypedArray2(data2)) {
        raise2("invalid parameter type" + encolon(message2) + ". must be a typed array");
      }
    }
    function standardTypeEh(value, type2) {
      switch (type2) {
        case "number":
          return typeof value === "number";
        case "object":
          return typeof value === "object";
        case "string":
          return typeof value === "string";
        case "boolean":
          return typeof value === "boolean";
        case "function":
          return typeof value === "function";
        case "undefined":
          return typeof value === "undefined";
        case "symbol":
          return typeof value === "symbol";
      }
    }
    function checkTypeOf(value, type2, message2) {
      if (!standardTypeEh(value, type2)) {
        raise2("invalid parameter type" + encolon(message2) + ". expected " + type2 + ", got " + typeof value);
      }
    }
    function checkNonNegativeInt(value, message2) {
      if (!(value >= 0 && (value | 0) === value)) {
        raise2("invalid parameter type, (" + value + ")" + encolon(message2) + ". must be a nonnegative integer");
      }
    }
    function checkOneOf(value, list2, message2) {
      if (list2.indexOf(value) < 0) {
        raise2("invalid value" + encolon(message2) + ". must be one of: " + list2);
      }
    }
    var constructorKeys = [
      "gl",
      "canvas",
      "container",
      "attributes",
      "pixelRatio",
      "extensions",
      "optionalExtensions",
      "profile",
      "onDone"
    ];
    function checkConstructor(obj) {
      Object.keys(obj).forEach(function(key) {
        if (constructorKeys.indexOf(key) < 0) {
          raise2('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
        }
      });
    }
    function leftPad(str, n) {
      str = str + "";
      while (str.length < n) {
        str = " " + str;
      }
      return str;
    }
    function ShaderFile() {
      this.name = "unknown";
      this.lines = [];
      this.index = {};
      this.hasErrors = false;
    }
    function ShaderLine(number2, line2) {
      this.number = number2;
      this.line = line2;
      this.errors = [];
    }
    function ShaderError(fileNumber, lineNumber, message2) {
      this.file = fileNumber;
      this.line = lineNumber;
      this.message = message2;
    }
    function guessCommand() {
      var error = new Error();
      var stack = (error.stack || error).toString();
      var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);
      if (pat) {
        return pat[1];
      }
      var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);
      if (pat2) {
        return pat2[1];
      }
      return "unknown";
    }
    function guessCallSite() {
      var error = new Error();
      var stack = (error.stack || error).toString();
      var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);
      if (pat) {
        return pat[1];
      }
      var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);
      if (pat2) {
        return pat2[1];
      }
      return "unknown";
    }
    function parseSource(source, command) {
      var lines2 = source.split("\n");
      var lineNumber = 1;
      var fileNumber = 0;
      var files = {
        unknown: new ShaderFile(),
        0: new ShaderFile()
      };
      files.unknown.name = files[0].name = command || guessCommand();
      files.unknown.lines.push(new ShaderLine(0, ""));
      for (var i = 0; i < lines2.length; ++i) {
        var line2 = lines2[i];
        var parts = /^\s*#\s*(\w+)\s+(.+)\s*$/.exec(line2);
        if (parts) {
          switch (parts[1]) {
            case "line":
              var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);
              if (lineNumberInfo) {
                lineNumber = lineNumberInfo[1] | 0;
                if (lineNumberInfo[2]) {
                  fileNumber = lineNumberInfo[2] | 0;
                  if (!(fileNumber in files)) {
                    files[fileNumber] = new ShaderFile();
                  }
                }
              }
              break;
            case "define":
              var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);
              if (nameInfo) {
                files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];
              }
              break;
          }
        }
        files[fileNumber].lines.push(new ShaderLine(lineNumber++, line2));
      }
      Object.keys(files).forEach(function(fileNumber2) {
        var file2 = files[fileNumber2];
        file2.lines.forEach(function(line3) {
          file2.index[line3.number] = line3;
        });
      });
      return files;
    }
    function parseErrorLog(errLog) {
      var result = [];
      errLog.split("\n").forEach(function(errMsg) {
        if (errMsg.length < 5) {
          return;
        }
        var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(errMsg);
        if (parts) {
          result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));
        } else if (errMsg.length > 0) {
          result.push(new ShaderError("unknown", 0, errMsg));
        }
      });
      return result;
    }
    function annotateFiles(files, errors) {
      errors.forEach(function(error) {
        var file2 = files[error.file];
        if (file2) {
          var line2 = file2.index[error.line];
          if (line2) {
            line2.errors.push(error);
            file2.hasErrors = true;
            return;
          }
        }
        files.unknown.hasErrors = true;
        files.unknown.lines[0].errors.push(error);
      });
    }
    function checkShaderError(gl, shader, source, type2, command) {
      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
        var errLog = gl.getShaderInfoLog(shader);
        var typeName = type2 === gl.FRAGMENT_SHADER ? "fragment" : "vertex";
        checkCommandType(source, "string", typeName + " shader source must be a string", command);
        var files = parseSource(source, command);
        var errors = parseErrorLog(errLog);
        annotateFiles(files, errors);
        Object.keys(files).forEach(function(fileNumber) {
          var file2 = files[fileNumber];
          if (!file2.hasErrors) {
            return;
          }
          var strings = [""];
          var styles = [""];
          function push(str, style) {
            strings.push(str);
            styles.push(style || "");
          }
          push("file number " + fileNumber + ": " + file2.name + "\n", "color:red;text-decoration:underline;font-weight:bold");
          file2.lines.forEach(function(line2) {
            if (line2.errors.length > 0) {
              push(leftPad(line2.number, 4) + "|  ", "background-color:yellow; font-weight:bold");
              push(line2.line + endl, "color:red; background-color:yellow; font-weight:bold");
              var offset = 0;
              line2.errors.forEach(function(error) {
                var message2 = error.message;
                var token = /^\s*'(.*)'\s*:\s*(.*)$/.exec(message2);
                if (token) {
                  var tokenPat = token[1];
                  message2 = token[2];
                  switch (tokenPat) {
                    case "assign":
                      tokenPat = "=";
                      break;
                  }
                  offset = Math.max(line2.line.indexOf(tokenPat, offset), 0);
                } else {
                  offset = 0;
                }
                push(leftPad("| ", 6));
                push(leftPad("^^^", offset + 3) + endl, "font-weight:bold");
                push(leftPad("| ", 6));
                push(message2 + endl, "font-weight:bold");
              });
              push(leftPad("| ", 6) + endl);
            } else {
              push(leftPad(line2.number, 4) + "|  ");
              push(line2.line + endl, "color:red");
            }
          });
          if (typeof document !== "undefined" && !window.chrome) {
            styles[0] = strings.join("%c");
            console.log.apply(console, styles);
          } else {
            console.log(strings.join(""));
          }
        });
        check.raise("Error compiling " + typeName + " shader, " + files[0].name);
      }
    }
    function checkLinkError(gl, program, fragShader, vertShader, command) {
      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        var errLog = gl.getProgramInfoLog(program);
        var fragParse = parseSource(fragShader, command);
        var vertParse = parseSource(vertShader, command);
        var header = 'Error linking program with vertex shader, "' + vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';
        if (typeof document !== "undefined") {
          console.log("%c" + header + endl + "%c" + errLog, "color:red;text-decoration:underline;font-weight:bold", "color:red");
        } else {
          console.log(header + endl + errLog);
        }
        check.raise(header);
      }
    }
    function saveCommandRef(object2) {
      object2._commandRef = guessCommand();
    }
    function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {
      saveCommandRef(opts);
      function id2(str) {
        if (str) {
          return stringStore.id(str);
        }
        return 0;
      }
      opts._fragId = id2(opts.static.frag);
      opts._vertId = id2(opts.static.vert);
      function addProps(dict, set2) {
        Object.keys(set2).forEach(function(u) {
          dict[stringStore.id(u)] = true;
        });
      }
      var uniformSet = opts._uniformSet = {};
      addProps(uniformSet, uniforms.static);
      addProps(uniformSet, uniforms.dynamic);
      var attributeSet = opts._attributeSet = {};
      addProps(attributeSet, attributes.static);
      addProps(attributeSet, attributes.dynamic);
      opts._hasCount = "count" in opts.static || "count" in opts.dynamic || "elements" in opts.static || "elements" in opts.dynamic;
    }
    function commandRaise(message2, command) {
      var callSite = guessCallSite();
      raise2(message2 + " in command " + (command || guessCommand()) + (callSite === "unknown" ? "" : " called from " + callSite));
    }
    function checkCommand(pred, message2, command) {
      if (!pred) {
        commandRaise(message2, command || guessCommand());
      }
    }
    function checkParameterCommand(param, possibilities, message2, command) {
      if (!(param in possibilities)) {
        commandRaise("unknown parameter (" + param + ")" + encolon(message2) + ". possible values: " + Object.keys(possibilities).join(), command || guessCommand());
      }
    }
    function checkCommandType(value, type2, message2, command) {
      if (!standardTypeEh(value, type2)) {
        commandRaise("invalid parameter type" + encolon(message2) + ". expected " + type2 + ", got " + typeof value, command || guessCommand());
      }
    }
    function checkOptional(block) {
      block();
    }
    function checkFramebufferFormat(attachment, texFormats, rbFormats) {
      if (attachment.texture) {
        checkOneOf(attachment.texture._texture.internalformat, texFormats, "unsupported texture format for attachment");
      } else {
        checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, "unsupported renderbuffer format for attachment");
      }
    }
    var GL_CLAMP_TO_EDGE = 33071;
    var GL_NEAREST = 9728;
    var GL_NEAREST_MIPMAP_NEAREST = 9984;
    var GL_LINEAR_MIPMAP_NEAREST = 9985;
    var GL_NEAREST_MIPMAP_LINEAR = 9986;
    var GL_LINEAR_MIPMAP_LINEAR = 9987;
    var GL_BYTE = 5120;
    var GL_UNSIGNED_BYTE = 5121;
    var GL_SHORT = 5122;
    var GL_UNSIGNED_SHORT = 5123;
    var GL_INT = 5124;
    var GL_UNSIGNED_INT = 5125;
    var GL_FLOAT = 5126;
    var GL_UNSIGNED_SHORT_4_4_4_4 = 32819;
    var GL_UNSIGNED_SHORT_5_5_5_1 = 32820;
    var GL_UNSIGNED_SHORT_5_6_5 = 33635;
    var GL_UNSIGNED_INT_24_8_WEBGL = 34042;
    var GL_HALF_FLOAT_OES = 36193;
    var TYPE_SIZE = {};
    TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;
    TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;
    TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;
    function pixelSize(type2, channels) {
      if (type2 === GL_UNSIGNED_SHORT_5_5_5_1 || type2 === GL_UNSIGNED_SHORT_4_4_4_4 || type2 === GL_UNSIGNED_SHORT_5_6_5) {
        return 2;
      } else if (type2 === GL_UNSIGNED_INT_24_8_WEBGL) {
        return 4;
      } else {
        return TYPE_SIZE[type2] * channels;
      }
    }
    function isPow2(v) {
      return !(v & v - 1) && !!v;
    }
    function checkTexture2D(info, mipData, limits) {
      var i;
      var w = mipData.width;
      var h = mipData.height;
      var c2 = mipData.channels;
      check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, "invalid texture shape");
      if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
        check(isPow2(w) && isPow2(h), "incompatible wrap mode for texture, both width and height must be power of 2");
      }
      if (mipData.mipmask === 1) {
        if (w !== 1 && h !== 1) {
          check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, "min filter requires mipmap");
        }
      } else {
        check(isPow2(w) && isPow2(h), "texture must be a square power of 2 to support mipmapping");
        check(mipData.mipmask === (w << 1) - 1, "missing or incomplete mipmap data");
      }
      if (mipData.type === GL_FLOAT) {
        if (limits.extensions.indexOf("oes_texture_float_linear") < 0) {
          check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, "filter not supported, must enable oes_texture_float_linear");
        }
        check(!info.genMipmaps, "mipmap generation not supported with float textures");
      }
      var mipimages = mipData.images;
      for (i = 0; i < 16; ++i) {
        if (mipimages[i]) {
          var mw = w >> i;
          var mh = h >> i;
          check(mipData.mipmask & 1 << i, "missing mipmap data");
          var img = mipimages[i];
          check(img.width === mw && img.height === mh, "invalid shape for mip images");
          check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, "incompatible type for mip image");
          if (img.compressed)
            ;
          else if (img.data) {
            var rowSize = Math.ceil(pixelSize(img.type, c2) * mw / img.unpackAlignment) * img.unpackAlignment;
            check(img.data.byteLength === rowSize * mh, "invalid data for image, buffer size is inconsistent with image format");
          } else if (img.element)
            ;
          else if (img.copy)
            ;
        } else if (!info.genMipmaps) {
          check((mipData.mipmask & 1 << i) === 0, "extra mipmap data");
        }
      }
      if (mipData.compressed) {
        check(!info.genMipmaps, "mipmap generation for compressed images not supported");
      }
    }
    function checkTextureCube(texture, info, faces, limits) {
      var w = texture.width;
      var h = texture.height;
      var c2 = texture.channels;
      check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, "invalid texture shape");
      check(w === h, "cube map must be square");
      check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, "wrap mode not supported by cube map");
      for (var i = 0; i < faces.length; ++i) {
        var face = faces[i];
        check(face.width === w && face.height === h, "inconsistent cube map face shape");
        if (info.genMipmaps) {
          check(!face.compressed, "can not generate mipmap for compressed textures");
          check(face.mipmask === 1, "can not specify mipmaps and generate mipmaps");
        }
        var mipmaps = face.images;
        for (var j = 0; j < 16; ++j) {
          var img = mipmaps[j];
          if (img) {
            var mw = w >> j;
            var mh = h >> j;
            check(face.mipmask & 1 << j, "missing mipmap data");
            check(img.width === mw && img.height === mh, "invalid shape for mip images");
            check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, "incompatible type for mip image");
            if (img.compressed)
              ;
            else if (img.data) {
              check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c2), img.unpackAlignment), "invalid data for image, buffer size is inconsistent with image format");
            } else if (img.element)
              ;
            else if (img.copy)
              ;
          }
        }
      }
    }
    var check$1 = extend2(check, {
      optional: checkOptional,
      raise: raise2,
      commandRaise,
      command: checkCommand,
      parameter: checkParameter,
      commandParameter: checkParameterCommand,
      constructor: checkConstructor,
      type: checkTypeOf,
      commandType: checkCommandType,
      isTypedArray: checkIsTypedArray,
      nni: checkNonNegativeInt,
      oneOf: checkOneOf,
      shaderError: checkShaderError,
      linkError: checkLinkError,
      callSite: guessCallSite,
      saveCommandRef,
      saveDrawInfo: saveDrawCommandInfo,
      framebufferFormat: checkFramebufferFormat,
      guessCommand,
      texture2D: checkTexture2D,
      textureCube: checkTextureCube
    });
    var VARIABLE_COUNTER = 0;
    var DYN_FUNC = 0;
    var DYN_CONSTANT = 5;
    var DYN_ARRAY = 6;
    function DynamicVariable(type2, data2) {
      this.id = VARIABLE_COUNTER++;
      this.type = type2;
      this.data = data2;
    }
    function escapeStr(str) {
      return str.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
    }
    function splitParts(str) {
      if (str.length === 0) {
        return [];
      }
      var firstChar = str.charAt(0);
      var lastChar = str.charAt(str.length - 1);
      if (str.length > 1 && firstChar === lastChar && (firstChar === '"' || firstChar === "'")) {
        return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"'];
      }
      var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);
      if (parts) {
        return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));
      }
      var subparts = str.split(".");
      if (subparts.length === 1) {
        return ['"' + escapeStr(str) + '"'];
      }
      var result = [];
      for (var i = 0; i < subparts.length; ++i) {
        result = result.concat(splitParts(subparts[i]));
      }
      return result;
    }
    function toAccessorString(str) {
      return "[" + splitParts(str).join("][") + "]";
    }
    function defineDynamic(type2, data2) {
      return new DynamicVariable(type2, toAccessorString(data2 + ""));
    }
    function isDynamic(x) {
      return typeof x === "function" && !x._reglType || x instanceof DynamicVariable;
    }
    function unbox(x, path) {
      if (typeof x === "function") {
        return new DynamicVariable(DYN_FUNC, x);
      } else if (typeof x === "number" || typeof x === "boolean") {
        return new DynamicVariable(DYN_CONSTANT, x);
      } else if (Array.isArray(x)) {
        return new DynamicVariable(DYN_ARRAY, x.map(function(y, i) {
          return unbox(y, path + "[" + i + "]");
        }));
      } else if (x instanceof DynamicVariable) {
        return x;
      }
      check$1(false, "invalid option type in uniform " + path);
    }
    var dynamic = {
      DynamicVariable,
      define: defineDynamic,
      isDynamic,
      unbox,
      accessor: toAccessorString
    };
    var raf = {
      next: typeof requestAnimationFrame === "function" ? function(cb) {
        return requestAnimationFrame(cb);
      } : function(cb) {
        return setTimeout(cb, 16);
      },
      cancel: typeof cancelAnimationFrame === "function" ? function(raf2) {
        return cancelAnimationFrame(raf2);
      } : clearTimeout
    };
    var clock2 = typeof performance !== "undefined" && performance.now ? function() {
      return performance.now();
    } : function() {
      return +new Date();
    };
    function createStringStore() {
      var stringIds = { "": 0 };
      var stringValues = [""];
      return {
        id: function(str) {
          var result = stringIds[str];
          if (result) {
            return result;
          }
          result = stringIds[str] = stringValues.length;
          stringValues.push(str);
          return result;
        },
        str: function(id2) {
          return stringValues[id2];
        }
      };
    }
    function createCanvas(element, onDone, pixelRatio) {
      var canvas = document.createElement("canvas");
      extend2(canvas.style, {
        border: 0,
        margin: 0,
        padding: 0,
        top: 0,
        left: 0,
        width: "100%",
        height: "100%"
      });
      element.appendChild(canvas);
      if (element === document.body) {
        canvas.style.position = "absolute";
        extend2(element.style, {
          margin: 0,
          padding: 0
        });
      }
      function resize() {
        var w = window.innerWidth;
        var h = window.innerHeight;
        if (element !== document.body) {
          var bounds = canvas.getBoundingClientRect();
          w = bounds.right - bounds.left;
          h = bounds.bottom - bounds.top;
        }
        canvas.width = pixelRatio * w;
        canvas.height = pixelRatio * h;
      }
      var resizeObserver;
      if (element !== document.body && typeof ResizeObserver === "function") {
        resizeObserver = new ResizeObserver(function() {
          setTimeout(resize);
        });
        resizeObserver.observe(element);
      } else {
        window.addEventListener("resize", resize, false);
      }
      function onDestroy() {
        if (resizeObserver) {
          resizeObserver.disconnect();
        } else {
          window.removeEventListener("resize", resize);
        }
        element.removeChild(canvas);
      }
      resize();
      return {
        canvas,
        onDestroy
      };
    }
    function createContext(canvas, contextAttributes) {
      function get2(name) {
        try {
          return canvas.getContext(name, contextAttributes);
        } catch (e) {
          return null;
        }
      }
      return get2("webgl") || get2("experimental-webgl") || get2("webgl-experimental");
    }
    function isHTMLElement(obj) {
      return typeof obj.nodeName === "string" && typeof obj.appendChild === "function" && typeof obj.getBoundingClientRect === "function";
    }
    function isWebGLContext(obj) {
      return typeof obj.drawArrays === "function" || typeof obj.drawElements === "function";
    }
    function parseExtensions(input) {
      if (typeof input === "string") {
        return input.split();
      }
      check$1(Array.isArray(input), "invalid extension array");
      return input;
    }
    function getElement(desc) {
      if (typeof desc === "string") {
        check$1(typeof document !== "undefined", "not supported outside of DOM");
        return document.querySelector(desc);
      }
      return desc;
    }
    function parseArgs(args_) {
      var args2 = args_ || {};
      var element, container, canvas, gl;
      var contextAttributes = {};
      var extensions = [];
      var optionalExtensions = [];
      var pixelRatio = typeof window === "undefined" ? 1 : window.devicePixelRatio;
      var profile = false;
      var onDone = function(err) {
        if (err) {
          check$1.raise(err);
        }
      };
      var onDestroy = function() {
      };
      if (typeof args2 === "string") {
        check$1(typeof document !== "undefined", "selector queries only supported in DOM enviroments");
        element = document.querySelector(args2);
        check$1(element, "invalid query string for element");
      } else if (typeof args2 === "object") {
        if (isHTMLElement(args2)) {
          element = args2;
        } else if (isWebGLContext(args2)) {
          gl = args2;
          canvas = gl.canvas;
        } else {
          check$1.constructor(args2);
          if ("gl" in args2) {
            gl = args2.gl;
          } else if ("canvas" in args2) {
            canvas = getElement(args2.canvas);
          } else if ("container" in args2) {
            container = getElement(args2.container);
          }
          if ("attributes" in args2) {
            contextAttributes = args2.attributes;
            check$1.type(contextAttributes, "object", "invalid context attributes");
          }
          if ("extensions" in args2) {
            extensions = parseExtensions(args2.extensions);
          }
          if ("optionalExtensions" in args2) {
            optionalExtensions = parseExtensions(args2.optionalExtensions);
          }
          if ("onDone" in args2) {
            check$1.type(args2.onDone, "function", "invalid or missing onDone callback");
            onDone = args2.onDone;
          }
          if ("profile" in args2) {
            profile = !!args2.profile;
          }
          if ("pixelRatio" in args2) {
            pixelRatio = +args2.pixelRatio;
            check$1(pixelRatio > 0, "invalid pixel ratio");
          }
        }
      } else {
        check$1.raise("invalid arguments to regl");
      }
      if (element) {
        if (element.nodeName.toLowerCase() === "canvas") {
          canvas = element;
        } else {
          container = element;
        }
      }
      if (!gl) {
        if (!canvas) {
          check$1(typeof document !== "undefined", "must manually specify webgl context outside of DOM environments");
          var result = createCanvas(container || document.body, onDone, pixelRatio);
          if (!result) {
            return null;
          }
          canvas = result.canvas;
          onDestroy = result.onDestroy;
        }
        if (contextAttributes.premultipliedAlpha === void 0)
          contextAttributes.premultipliedAlpha = true;
        gl = createContext(canvas, contextAttributes);
      }
      if (!gl) {
        onDestroy();
        onDone("webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org");
        return null;
      }
      return {
        gl,
        canvas,
        container,
        extensions,
        optionalExtensions,
        pixelRatio,
        profile,
        onDone,
        onDestroy
      };
    }
    function createExtensionCache(gl, config) {
      var extensions = {};
      function tryLoadExtension(name_) {
        check$1.type(name_, "string", "extension name must be string");
        var name2 = name_.toLowerCase();
        var ext;
        try {
          ext = extensions[name2] = gl.getExtension(name2);
        } catch (e) {
        }
        return !!ext;
      }
      for (var i = 0; i < config.extensions.length; ++i) {
        var name = config.extensions[i];
        if (!tryLoadExtension(name)) {
          config.onDestroy();
          config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
          return null;
        }
      }
      config.optionalExtensions.forEach(tryLoadExtension);
      return {
        extensions,
        restore: function() {
          Object.keys(extensions).forEach(function(name2) {
            if (extensions[name2] && !tryLoadExtension(name2)) {
              throw new Error("(regl): error restoring extension " + name2);
            }
          });
        }
      };
    }
    function loop(n, f) {
      var result = Array(n);
      for (var i = 0; i < n; ++i) {
        result[i] = f(i);
      }
      return result;
    }
    var GL_BYTE$1 = 5120;
    var GL_UNSIGNED_BYTE$2 = 5121;
    var GL_SHORT$1 = 5122;
    var GL_UNSIGNED_SHORT$1 = 5123;
    var GL_INT$1 = 5124;
    var GL_UNSIGNED_INT$1 = 5125;
    var GL_FLOAT$2 = 5126;
    function nextPow16(v) {
      for (var i = 16; i <= 1 << 28; i *= 16) {
        if (v <= i) {
          return i;
        }
      }
      return 0;
    }
    function log2(v) {
      var r, shift;
      r = (v > 65535) << 4;
      v >>>= r;
      shift = (v > 255) << 3;
      v >>>= shift;
      r |= shift;
      shift = (v > 15) << 2;
      v >>>= shift;
      r |= shift;
      shift = (v > 3) << 1;
      v >>>= shift;
      r |= shift;
      return r | v >> 1;
    }
    function createPool() {
      var bufferPool = loop(8, function() {
        return [];
      });
      function alloc(n) {
        var sz = nextPow16(n);
        var bin = bufferPool[log2(sz) >> 2];
        if (bin.length > 0) {
          return bin.pop();
        }
        return new ArrayBuffer(sz);
      }
      function free(buf) {
        bufferPool[log2(buf.byteLength) >> 2].push(buf);
      }
      function allocType(type2, n) {
        var result = null;
        switch (type2) {
          case GL_BYTE$1:
            result = new Int8Array(alloc(n), 0, n);
            break;
          case GL_UNSIGNED_BYTE$2:
            result = new Uint8Array(alloc(n), 0, n);
            break;
          case GL_SHORT$1:
            result = new Int16Array(alloc(2 * n), 0, n);
            break;
          case GL_UNSIGNED_SHORT$1:
            result = new Uint16Array(alloc(2 * n), 0, n);
            break;
          case GL_INT$1:
            result = new Int32Array(alloc(4 * n), 0, n);
            break;
          case GL_UNSIGNED_INT$1:
            result = new Uint32Array(alloc(4 * n), 0, n);
            break;
          case GL_FLOAT$2:
            result = new Float32Array(alloc(4 * n), 0, n);
            break;
          default:
            return null;
        }
        if (result.length !== n) {
          return result.subarray(0, n);
        }
        return result;
      }
      function freeType(array2) {
        free(array2.buffer);
      }
      return {
        alloc,
        free,
        allocType,
        freeType
      };
    }
    var pool = createPool();
    pool.zero = createPool();
    var GL_SUBPIXEL_BITS = 3408;
    var GL_RED_BITS = 3410;
    var GL_GREEN_BITS = 3411;
    var GL_BLUE_BITS = 3412;
    var GL_ALPHA_BITS = 3413;
    var GL_DEPTH_BITS = 3414;
    var GL_STENCIL_BITS = 3415;
    var GL_ALIASED_POINT_SIZE_RANGE = 33901;
    var GL_ALIASED_LINE_WIDTH_RANGE = 33902;
    var GL_MAX_TEXTURE_SIZE = 3379;
    var GL_MAX_VIEWPORT_DIMS = 3386;
    var GL_MAX_VERTEX_ATTRIBS = 34921;
    var GL_MAX_VERTEX_UNIFORM_VECTORS = 36347;
    var GL_MAX_VARYING_VECTORS = 36348;
    var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
    var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
    var GL_MAX_TEXTURE_IMAGE_UNITS = 34930;
    var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
    var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    var GL_MAX_RENDERBUFFER_SIZE = 34024;
    var GL_VENDOR = 7936;
    var GL_RENDERER = 7937;
    var GL_VERSION = 7938;
    var GL_SHADING_LANGUAGE_VERSION = 35724;
    var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
    var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 36063;
    var GL_MAX_DRAW_BUFFERS_WEBGL = 34852;
    var GL_TEXTURE_2D = 3553;
    var GL_TEXTURE_CUBE_MAP = 34067;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
    var GL_TEXTURE0 = 33984;
    var GL_RGBA = 6408;
    var GL_FLOAT$1 = 5126;
    var GL_UNSIGNED_BYTE$1 = 5121;
    var GL_FRAMEBUFFER = 36160;
    var GL_FRAMEBUFFER_COMPLETE = 36053;
    var GL_COLOR_ATTACHMENT0 = 36064;
    var GL_COLOR_BUFFER_BIT$1 = 16384;
    var wrapLimits = function(gl, extensions) {
      var maxAnisotropic = 1;
      if (extensions.ext_texture_filter_anisotropic) {
        maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
      }
      var maxDrawbuffers = 1;
      var maxColorAttachments = 1;
      if (extensions.webgl_draw_buffers) {
        maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
        maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
      }
      var readFloat = !!extensions.oes_texture_float;
      if (readFloat) {
        var readFloatTexture = gl.createTexture();
        gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
        gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);
        var fbo = gl.createFramebuffer();
        gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
        gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
        gl.bindTexture(GL_TEXTURE_2D, null);
        if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE)
          readFloat = false;
        else {
          gl.viewport(0, 0, 1, 1);
          gl.clearColor(1, 0, 0, 1);
          gl.clear(GL_COLOR_BUFFER_BIT$1);
          var pixels = pool.allocType(GL_FLOAT$1, 4);
          gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);
          if (gl.getError())
            readFloat = false;
          else {
            gl.deleteFramebuffer(fbo);
            gl.deleteTexture(readFloatTexture);
            readFloat = pixels[0] === 1;
          }
          pool.freeType(pixels);
        }
      }
      var isIE = typeof navigator !== "undefined" && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));
      var npotTextureCube = true;
      if (!isIE) {
        var cubeTexture = gl.createTexture();
        var data2 = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
        gl.activeTexture(GL_TEXTURE0);
        gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
        gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data2);
        pool.freeType(data2);
        gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
        gl.deleteTexture(cubeTexture);
        npotTextureCube = !gl.getError();
      }
      return {
        colorBits: [
          gl.getParameter(GL_RED_BITS),
          gl.getParameter(GL_GREEN_BITS),
          gl.getParameter(GL_BLUE_BITS),
          gl.getParameter(GL_ALPHA_BITS)
        ],
        depthBits: gl.getParameter(GL_DEPTH_BITS),
        stencilBits: gl.getParameter(GL_STENCIL_BITS),
        subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),
        extensions: Object.keys(extensions).filter(function(ext) {
          return !!extensions[ext];
        }),
        maxAnisotropic,
        maxDrawbuffers,
        maxColorAttachments,
        pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
        lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
        maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
        maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
        maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
        maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
        maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
        maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
        maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
        maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
        maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
        maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
        maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),
        glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
        renderer: gl.getParameter(GL_RENDERER),
        vendor: gl.getParameter(GL_VENDOR),
        version: gl.getParameter(GL_VERSION),
        readFloat,
        npotTextureCube
      };
    };
    function isNDArrayLike(obj) {
      return !!obj && typeof obj === "object" && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === "number" && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray2(obj.data));
    }
    var values = function(obj) {
      return Object.keys(obj).map(function(key) {
        return obj[key];
      });
    };
    var flattenUtils = {
      shape: arrayShape$1,
      flatten: flattenArray
    };
    function flatten1D(array2, nx, out) {
      for (var i = 0; i < nx; ++i) {
        out[i] = array2[i];
      }
    }
    function flatten2D(array2, nx, ny, out) {
      var ptr = 0;
      for (var i = 0; i < nx; ++i) {
        var row2 = array2[i];
        for (var j = 0; j < ny; ++j) {
          out[ptr++] = row2[j];
        }
      }
    }
    function flatten3D(array2, nx, ny, nz, out, ptr_) {
      var ptr = ptr_;
      for (var i = 0; i < nx; ++i) {
        var row2 = array2[i];
        for (var j = 0; j < ny; ++j) {
          var col2 = row2[j];
          for (var k = 0; k < nz; ++k) {
            out[ptr++] = col2[k];
          }
        }
      }
    }
    function flattenRec(array2, shape, level, out, ptr) {
      var stride = 1;
      for (var i = level + 1; i < shape.length; ++i) {
        stride *= shape[i];
      }
      var n = shape[level];
      if (shape.length - level === 4) {
        var nx = shape[level + 1];
        var ny = shape[level + 2];
        var nz = shape[level + 3];
        for (i = 0; i < n; ++i) {
          flatten3D(array2[i], nx, ny, nz, out, ptr);
          ptr += stride;
        }
      } else {
        for (i = 0; i < n; ++i) {
          flattenRec(array2[i], shape, level + 1, out, ptr);
          ptr += stride;
        }
      }
    }
    function flattenArray(array2, shape, type2, out_) {
      var sz = 1;
      if (shape.length) {
        for (var i = 0; i < shape.length; ++i) {
          sz *= shape[i];
        }
      } else {
        sz = 0;
      }
      var out = out_ || pool.allocType(type2, sz);
      switch (shape.length) {
        case 0:
          break;
        case 1:
          flatten1D(array2, shape[0], out);
          break;
        case 2:
          flatten2D(array2, shape[0], shape[1], out);
          break;
        case 3:
          flatten3D(array2, shape[0], shape[1], shape[2], out, 0);
          break;
        default:
          flattenRec(array2, shape, 0, out, 0);
      }
      return out;
    }
    function arrayShape$1(array_) {
      var shape = [];
      for (var array2 = array_; array2.length; array2 = array2[0]) {
        shape.push(array2.length);
      }
      return shape;
    }
    var arrayTypes = {
      "[object Int8Array]": 5120,
      "[object Int16Array]": 5122,
      "[object Int32Array]": 5124,
      "[object Uint8Array]": 5121,
      "[object Uint8ClampedArray]": 5121,
      "[object Uint16Array]": 5123,
      "[object Uint32Array]": 5125,
      "[object Float32Array]": 5126,
      "[object Float64Array]": 5121,
      "[object ArrayBuffer]": 5121
    };
    var int8 = 5120;
    var int16 = 5122;
    var int32 = 5124;
    var uint8 = 5121;
    var uint16 = 5123;
    var uint32 = 5125;
    var float2 = 5126;
    var float32 = 5126;
    var glTypes = {
      int8,
      int16,
      int32,
      uint8,
      uint16,
      uint32,
      float: float2,
      float32
    };
    var dynamic$1 = 35048;
    var stream2 = 35040;
    var usageTypes = {
      dynamic: dynamic$1,
      stream: stream2,
      "static": 35044
    };
    var arrayFlatten = flattenUtils.flatten;
    var arrayShape = flattenUtils.shape;
    var GL_STATIC_DRAW = 35044;
    var GL_STREAM_DRAW = 35040;
    var GL_UNSIGNED_BYTE$3 = 5121;
    var GL_FLOAT$3 = 5126;
    var DTYPES_SIZES = [];
    DTYPES_SIZES[5120] = 1;
    DTYPES_SIZES[5122] = 2;
    DTYPES_SIZES[5124] = 4;
    DTYPES_SIZES[5121] = 1;
    DTYPES_SIZES[5123] = 2;
    DTYPES_SIZES[5125] = 4;
    DTYPES_SIZES[5126] = 4;
    function typedArrayCode(data2) {
      return arrayTypes[Object.prototype.toString.call(data2)] | 0;
    }
    function copyArray(out, inp) {
      for (var i = 0; i < inp.length; ++i) {
        out[i] = inp[i];
      }
    }
    function transpose(result, data2, shapeX, shapeY, strideX, strideY, offset) {
      var ptr = 0;
      for (var i = 0; i < shapeX; ++i) {
        for (var j = 0; j < shapeY; ++j) {
          result[ptr++] = data2[strideX * i + strideY * j + offset];
        }
      }
    }
    function wrapBufferState(gl, stats2, config, destroyBuffer) {
      var bufferCount = 0;
      var bufferSet = {};
      function REGLBuffer(type2) {
        this.id = bufferCount++;
        this.buffer = gl.createBuffer();
        this.type = type2;
        this.usage = GL_STATIC_DRAW;
        this.byteLength = 0;
        this.dimension = 1;
        this.dtype = GL_UNSIGNED_BYTE$3;
        this.persistentData = null;
        if (config.profile) {
          this.stats = { size: 0 };
        }
      }
      REGLBuffer.prototype.bind = function() {
        gl.bindBuffer(this.type, this.buffer);
      };
      REGLBuffer.prototype.destroy = function() {
        destroy(this);
      };
      var streamPool = [];
      function createStream(type2, data2) {
        var buffer2 = streamPool.pop();
        if (!buffer2) {
          buffer2 = new REGLBuffer(type2);
        }
        buffer2.bind();
        initBufferFromData(buffer2, data2, GL_STREAM_DRAW, 0, 1, false);
        return buffer2;
      }
      function destroyStream(stream$$1) {
        streamPool.push(stream$$1);
      }
      function initBufferFromTypedArray(buffer2, data2, usage) {
        buffer2.byteLength = data2.byteLength;
        gl.bufferData(buffer2.type, data2, usage);
      }
      function initBufferFromData(buffer2, data2, usage, dtype, dimension, persist) {
        var shape;
        buffer2.usage = usage;
        if (Array.isArray(data2)) {
          buffer2.dtype = dtype || GL_FLOAT$3;
          if (data2.length > 0) {
            var flatData;
            if (Array.isArray(data2[0])) {
              shape = arrayShape(data2);
              var dim = 1;
              for (var i = 1; i < shape.length; ++i) {
                dim *= shape[i];
              }
              buffer2.dimension = dim;
              flatData = arrayFlatten(data2, shape, buffer2.dtype);
              initBufferFromTypedArray(buffer2, flatData, usage);
              if (persist) {
                buffer2.persistentData = flatData;
              } else {
                pool.freeType(flatData);
              }
            } else if (typeof data2[0] === "number") {
              buffer2.dimension = dimension;
              var typedData = pool.allocType(buffer2.dtype, data2.length);
              copyArray(typedData, data2);
              initBufferFromTypedArray(buffer2, typedData, usage);
              if (persist) {
                buffer2.persistentData = typedData;
              } else {
                pool.freeType(typedData);
              }
            } else if (isTypedArray2(data2[0])) {
              buffer2.dimension = data2[0].length;
              buffer2.dtype = dtype || typedArrayCode(data2[0]) || GL_FLOAT$3;
              flatData = arrayFlatten(data2, [data2.length, data2[0].length], buffer2.dtype);
              initBufferFromTypedArray(buffer2, flatData, usage);
              if (persist) {
                buffer2.persistentData = flatData;
              } else {
                pool.freeType(flatData);
              }
            } else {
              check$1.raise("invalid buffer data");
            }
          }
        } else if (isTypedArray2(data2)) {
          buffer2.dtype = dtype || typedArrayCode(data2);
          buffer2.dimension = dimension;
          initBufferFromTypedArray(buffer2, data2, usage);
          if (persist) {
            buffer2.persistentData = new Uint8Array(new Uint8Array(data2.buffer));
          }
        } else if (isNDArrayLike(data2)) {
          shape = data2.shape;
          var stride = data2.stride;
          var offset = data2.offset;
          var shapeX = 0;
          var shapeY = 0;
          var strideX = 0;
          var strideY = 0;
          if (shape.length === 1) {
            shapeX = shape[0];
            shapeY = 1;
            strideX = stride[0];
            strideY = 0;
          } else if (shape.length === 2) {
            shapeX = shape[0];
            shapeY = shape[1];
            strideX = stride[0];
            strideY = stride[1];
          } else {
            check$1.raise("invalid shape");
          }
          buffer2.dtype = dtype || typedArrayCode(data2.data) || GL_FLOAT$3;
          buffer2.dimension = shapeY;
          var transposeData2 = pool.allocType(buffer2.dtype, shapeX * shapeY);
          transpose(transposeData2, data2.data, shapeX, shapeY, strideX, strideY, offset);
          initBufferFromTypedArray(buffer2, transposeData2, usage);
          if (persist) {
            buffer2.persistentData = transposeData2;
          } else {
            pool.freeType(transposeData2);
          }
        } else if (data2 instanceof ArrayBuffer) {
          buffer2.dtype = GL_UNSIGNED_BYTE$3;
          buffer2.dimension = dimension;
          initBufferFromTypedArray(buffer2, data2, usage);
          if (persist) {
            buffer2.persistentData = new Uint8Array(new Uint8Array(data2));
          }
        } else {
          check$1.raise("invalid buffer data");
        }
      }
      function destroy(buffer2) {
        stats2.bufferCount--;
        destroyBuffer(buffer2);
        var handle = buffer2.buffer;
        check$1(handle, "buffer must not be deleted already");
        gl.deleteBuffer(handle);
        buffer2.buffer = null;
        delete bufferSet[buffer2.id];
      }
      function createBuffer(options, type2, deferInit, persistent) {
        stats2.bufferCount++;
        var buffer2 = new REGLBuffer(type2);
        bufferSet[buffer2.id] = buffer2;
        function reglBuffer(options2) {
          var usage = GL_STATIC_DRAW;
          var data2 = null;
          var byteLength = 0;
          var dtype = 0;
          var dimension = 1;
          if (Array.isArray(options2) || isTypedArray2(options2) || isNDArrayLike(options2) || options2 instanceof ArrayBuffer) {
            data2 = options2;
          } else if (typeof options2 === "number") {
            byteLength = options2 | 0;
          } else if (options2) {
            check$1.type(options2, "object", "buffer arguments must be an object, a number or an array");
            if ("data" in options2) {
              check$1(data2 === null || Array.isArray(data2) || isTypedArray2(data2) || isNDArrayLike(data2), "invalid data for buffer");
              data2 = options2.data;
            }
            if ("usage" in options2) {
              check$1.parameter(options2.usage, usageTypes, "invalid buffer usage");
              usage = usageTypes[options2.usage];
            }
            if ("type" in options2) {
              check$1.parameter(options2.type, glTypes, "invalid buffer type");
              dtype = glTypes[options2.type];
            }
            if ("dimension" in options2) {
              check$1.type(options2.dimension, "number", "invalid dimension");
              dimension = options2.dimension | 0;
            }
            if ("length" in options2) {
              check$1.nni(byteLength, "buffer length must be a nonnegative integer");
              byteLength = options2.length | 0;
            }
          }
          buffer2.bind();
          if (!data2) {
            if (byteLength)
              gl.bufferData(buffer2.type, byteLength, usage);
            buffer2.dtype = dtype || GL_UNSIGNED_BYTE$3;
            buffer2.usage = usage;
            buffer2.dimension = dimension;
            buffer2.byteLength = byteLength;
          } else {
            initBufferFromData(buffer2, data2, usage, dtype, dimension, persistent);
          }
          if (config.profile) {
            buffer2.stats.size = buffer2.byteLength * DTYPES_SIZES[buffer2.dtype];
          }
          return reglBuffer;
        }
        function setSubData(data2, offset) {
          check$1(offset + data2.byteLength <= buffer2.byteLength, "invalid buffer subdata call, buffer is too small.  Can't write data of size " + data2.byteLength + " starting from offset " + offset + " to a buffer of size " + buffer2.byteLength);
          gl.bufferSubData(buffer2.type, offset, data2);
        }
        function subdata(data2, offset_) {
          var offset = (offset_ || 0) | 0;
          var shape;
          buffer2.bind();
          if (isTypedArray2(data2) || data2 instanceof ArrayBuffer) {
            setSubData(data2, offset);
          } else if (Array.isArray(data2)) {
            if (data2.length > 0) {
              if (typeof data2[0] === "number") {
                var converted = pool.allocType(buffer2.dtype, data2.length);
                copyArray(converted, data2);
                setSubData(converted, offset);
                pool.freeType(converted);
              } else if (Array.isArray(data2[0]) || isTypedArray2(data2[0])) {
                shape = arrayShape(data2);
                var flatData = arrayFlatten(data2, shape, buffer2.dtype);
                setSubData(flatData, offset);
                pool.freeType(flatData);
              } else {
                check$1.raise("invalid buffer data");
              }
            }
          } else if (isNDArrayLike(data2)) {
            shape = data2.shape;
            var stride = data2.stride;
            var shapeX = 0;
            var shapeY = 0;
            var strideX = 0;
            var strideY = 0;
            if (shape.length === 1) {
              shapeX = shape[0];
              shapeY = 1;
              strideX = stride[0];
              strideY = 0;
            } else if (shape.length === 2) {
              shapeX = shape[0];
              shapeY = shape[1];
              strideX = stride[0];
              strideY = stride[1];
            } else {
              check$1.raise("invalid shape");
            }
            var dtype = Array.isArray(data2.data) ? buffer2.dtype : typedArrayCode(data2.data);
            var transposeData2 = pool.allocType(dtype, shapeX * shapeY);
            transpose(transposeData2, data2.data, shapeX, shapeY, strideX, strideY, data2.offset);
            setSubData(transposeData2, offset);
            pool.freeType(transposeData2);
          } else {
            check$1.raise("invalid data for buffer subdata");
          }
          return reglBuffer;
        }
        if (!deferInit) {
          reglBuffer(options);
        }
        reglBuffer._reglType = "buffer";
        reglBuffer._buffer = buffer2;
        reglBuffer.subdata = subdata;
        if (config.profile) {
          reglBuffer.stats = buffer2.stats;
        }
        reglBuffer.destroy = function() {
          destroy(buffer2);
        };
        return reglBuffer;
      }
      function restoreBuffers() {
        values(bufferSet).forEach(function(buffer2) {
          buffer2.buffer = gl.createBuffer();
          gl.bindBuffer(buffer2.type, buffer2.buffer);
          gl.bufferData(buffer2.type, buffer2.persistentData || buffer2.byteLength, buffer2.usage);
        });
      }
      if (config.profile) {
        stats2.getTotalBufferSize = function() {
          var total = 0;
          Object.keys(bufferSet).forEach(function(key) {
            total += bufferSet[key].stats.size;
          });
          return total;
        };
      }
      return {
        create: createBuffer,
        createStream,
        destroyStream,
        clear: function() {
          values(bufferSet).forEach(destroy);
          streamPool.forEach(destroy);
        },
        getBuffer: function(wrapper) {
          if (wrapper && wrapper._buffer instanceof REGLBuffer) {
            return wrapper._buffer;
          }
          return null;
        },
        restore: restoreBuffers,
        _initBuffer: initBufferFromData
      };
    }
    var points = 0;
    var point = 0;
    var lines = 1;
    var line = 1;
    var triangles = 4;
    var triangle = 4;
    var primTypes = {
      points,
      point,
      lines,
      line,
      triangles,
      triangle,
      "line loop": 2,
      "line strip": 3,
      "triangle strip": 5,
      "triangle fan": 6
    };
    var GL_POINTS = 0;
    var GL_LINES = 1;
    var GL_TRIANGLES = 4;
    var GL_BYTE$2 = 5120;
    var GL_UNSIGNED_BYTE$4 = 5121;
    var GL_SHORT$2 = 5122;
    var GL_UNSIGNED_SHORT$2 = 5123;
    var GL_INT$2 = 5124;
    var GL_UNSIGNED_INT$2 = 5125;
    var GL_ELEMENT_ARRAY_BUFFER = 34963;
    var GL_STREAM_DRAW$1 = 35040;
    var GL_STATIC_DRAW$1 = 35044;
    function wrapElementsState(gl, extensions, bufferState, stats2) {
      var elementSet = {};
      var elementCount = 0;
      var elementTypes = {
        "uint8": GL_UNSIGNED_BYTE$4,
        "uint16": GL_UNSIGNED_SHORT$2
      };
      if (extensions.oes_element_index_uint) {
        elementTypes.uint32 = GL_UNSIGNED_INT$2;
      }
      function REGLElementBuffer(buffer2) {
        this.id = elementCount++;
        elementSet[this.id] = this;
        this.buffer = buffer2;
        this.primType = GL_TRIANGLES;
        this.vertCount = 0;
        this.type = 0;
      }
      REGLElementBuffer.prototype.bind = function() {
        this.buffer.bind();
      };
      var bufferPool = [];
      function createElementStream(data2) {
        var result = bufferPool.pop();
        if (!result) {
          result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);
        }
        initElements(result, data2, GL_STREAM_DRAW$1, -1, -1, 0, 0);
        return result;
      }
      function destroyElementStream(elements) {
        bufferPool.push(elements);
      }
      function initElements(elements, data2, usage, prim, count, byteLength, type2) {
        elements.buffer.bind();
        var dtype;
        if (data2) {
          var predictedType = type2;
          if (!type2 && (!isTypedArray2(data2) || isNDArrayLike(data2) && !isTypedArray2(data2.data))) {
            predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;
          }
          bufferState._initBuffer(elements.buffer, data2, usage, predictedType, 3);
        } else {
          gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
          elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
          elements.buffer.usage = usage;
          elements.buffer.dimension = 3;
          elements.buffer.byteLength = byteLength;
        }
        dtype = type2;
        if (!type2) {
          switch (elements.buffer.dtype) {
            case GL_UNSIGNED_BYTE$4:
            case GL_BYTE$2:
              dtype = GL_UNSIGNED_BYTE$4;
              break;
            case GL_UNSIGNED_SHORT$2:
            case GL_SHORT$2:
              dtype = GL_UNSIGNED_SHORT$2;
              break;
            case GL_UNSIGNED_INT$2:
            case GL_INT$2:
              dtype = GL_UNSIGNED_INT$2;
              break;
            default:
              check$1.raise("unsupported type for element array");
          }
          elements.buffer.dtype = dtype;
        }
        elements.type = dtype;
        check$1(dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint, "32 bit element buffers not supported, enable oes_element_index_uint first");
        var vertCount = count;
        if (vertCount < 0) {
          vertCount = elements.buffer.byteLength;
          if (dtype === GL_UNSIGNED_SHORT$2) {
            vertCount >>= 1;
          } else if (dtype === GL_UNSIGNED_INT$2) {
            vertCount >>= 2;
          }
        }
        elements.vertCount = vertCount;
        var primType = prim;
        if (prim < 0) {
          primType = GL_TRIANGLES;
          var dimension = elements.buffer.dimension;
          if (dimension === 1)
            primType = GL_POINTS;
          if (dimension === 2)
            primType = GL_LINES;
          if (dimension === 3)
            primType = GL_TRIANGLES;
        }
        elements.primType = primType;
      }
      function destroyElements(elements) {
        stats2.elementsCount--;
        check$1(elements.buffer !== null, "must not double destroy elements");
        delete elementSet[elements.id];
        elements.buffer.destroy();
        elements.buffer = null;
      }
      function createElements(options, persistent) {
        var buffer2 = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
        var elements = new REGLElementBuffer(buffer2._buffer);
        stats2.elementsCount++;
        function reglElements(options2) {
          if (!options2) {
            buffer2();
            elements.primType = GL_TRIANGLES;
            elements.vertCount = 0;
            elements.type = GL_UNSIGNED_BYTE$4;
          } else if (typeof options2 === "number") {
            buffer2(options2);
            elements.primType = GL_TRIANGLES;
            elements.vertCount = options2 | 0;
            elements.type = GL_UNSIGNED_BYTE$4;
          } else {
            var data2 = null;
            var usage = GL_STATIC_DRAW$1;
            var primType = -1;
            var vertCount = -1;
            var byteLength = 0;
            var dtype = 0;
            if (Array.isArray(options2) || isTypedArray2(options2) || isNDArrayLike(options2)) {
              data2 = options2;
            } else {
              check$1.type(options2, "object", "invalid arguments for elements");
              if ("data" in options2) {
                data2 = options2.data;
                check$1(Array.isArray(data2) || isTypedArray2(data2) || isNDArrayLike(data2), "invalid data for element buffer");
              }
              if ("usage" in options2) {
                check$1.parameter(options2.usage, usageTypes, "invalid element buffer usage");
                usage = usageTypes[options2.usage];
              }
              if ("primitive" in options2) {
                check$1.parameter(options2.primitive, primTypes, "invalid element buffer primitive");
                primType = primTypes[options2.primitive];
              }
              if ("count" in options2) {
                check$1(typeof options2.count === "number" && options2.count >= 0, "invalid vertex count for elements");
                vertCount = options2.count | 0;
              }
              if ("type" in options2) {
                check$1.parameter(options2.type, elementTypes, "invalid buffer type");
                dtype = elementTypes[options2.type];
              }
              if ("length" in options2) {
                byteLength = options2.length | 0;
              } else {
                byteLength = vertCount;
                if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
                  byteLength *= 2;
                } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
                  byteLength *= 4;
                }
              }
            }
            initElements(elements, data2, usage, primType, vertCount, byteLength, dtype);
          }
          return reglElements;
        }
        reglElements(options);
        reglElements._reglType = "elements";
        reglElements._elements = elements;
        reglElements.subdata = function(data2, offset) {
          buffer2.subdata(data2, offset);
          return reglElements;
        };
        reglElements.destroy = function() {
          destroyElements(elements);
        };
        return reglElements;
      }
      return {
        create: createElements,
        createStream: createElementStream,
        destroyStream: destroyElementStream,
        getElements: function(elements) {
          if (typeof elements === "function" && elements._elements instanceof REGLElementBuffer) {
            return elements._elements;
          }
          return null;
        },
        clear: function() {
          values(elementSet).forEach(destroyElements);
        }
      };
    }
    var FLOAT = new Float32Array(1);
    var INT = new Uint32Array(FLOAT.buffer);
    var GL_UNSIGNED_SHORT$4 = 5123;
    function convertToHalfFloat(array2) {
      var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array2.length);
      for (var i = 0; i < array2.length; ++i) {
        if (isNaN(array2[i])) {
          ushorts[i] = 65535;
        } else if (array2[i] === Infinity) {
          ushorts[i] = 31744;
        } else if (array2[i] === -Infinity) {
          ushorts[i] = 64512;
        } else {
          FLOAT[0] = array2[i];
          var x = INT[0];
          var sgn = x >>> 31 << 15;
          var exp = (x << 1 >>> 24) - 127;
          var frac = x >> 13 & (1 << 10) - 1;
          if (exp < -24) {
            ushorts[i] = sgn;
          } else if (exp < -14) {
            var s = -14 - exp;
            ushorts[i] = sgn + (frac + (1 << 10) >> s);
          } else if (exp > 15) {
            ushorts[i] = sgn + 31744;
          } else {
            ushorts[i] = sgn + (exp + 15 << 10) + frac;
          }
        }
      }
      return ushorts;
    }
    function isArrayLike(s) {
      return Array.isArray(s) || isTypedArray2(s);
    }
    var isPow2$1 = function(v) {
      return !(v & v - 1) && !!v;
    };
    var GL_COMPRESSED_TEXTURE_FORMATS = 34467;
    var GL_TEXTURE_2D$1 = 3553;
    var GL_TEXTURE_CUBE_MAP$1 = 34067;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 34069;
    var GL_RGBA$1 = 6408;
    var GL_ALPHA = 6406;
    var GL_RGB = 6407;
    var GL_LUMINANCE = 6409;
    var GL_LUMINANCE_ALPHA = 6410;
    var GL_RGBA4 = 32854;
    var GL_RGB5_A1 = 32855;
    var GL_RGB565 = 36194;
    var GL_UNSIGNED_SHORT_4_4_4_4$1 = 32819;
    var GL_UNSIGNED_SHORT_5_5_5_1$1 = 32820;
    var GL_UNSIGNED_SHORT_5_6_5$1 = 33635;
    var GL_UNSIGNED_INT_24_8_WEBGL$1 = 34042;
    var GL_DEPTH_COMPONENT = 6402;
    var GL_DEPTH_STENCIL = 34041;
    var GL_SRGB_EXT = 35904;
    var GL_SRGB_ALPHA_EXT = 35906;
    var GL_HALF_FLOAT_OES$1 = 36193;
    var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 33776;
    var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777;
    var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778;
    var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779;
    var GL_COMPRESSED_RGB_ATC_WEBGL = 35986;
    var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 35987;
    var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 34798;
    var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840;
    var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841;
    var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842;
    var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843;
    var GL_COMPRESSED_RGB_ETC1_WEBGL = 36196;
    var GL_UNSIGNED_BYTE$5 = 5121;
    var GL_UNSIGNED_SHORT$3 = 5123;
    var GL_UNSIGNED_INT$3 = 5125;
    var GL_FLOAT$4 = 5126;
    var GL_TEXTURE_WRAP_S = 10242;
    var GL_TEXTURE_WRAP_T = 10243;
    var GL_REPEAT = 10497;
    var GL_CLAMP_TO_EDGE$1 = 33071;
    var GL_MIRRORED_REPEAT = 33648;
    var GL_TEXTURE_MAG_FILTER = 10240;
    var GL_TEXTURE_MIN_FILTER = 10241;
    var GL_NEAREST$1 = 9728;
    var GL_LINEAR = 9729;
    var GL_NEAREST_MIPMAP_NEAREST$1 = 9984;
    var GL_LINEAR_MIPMAP_NEAREST$1 = 9985;
    var GL_NEAREST_MIPMAP_LINEAR$1 = 9986;
    var GL_LINEAR_MIPMAP_LINEAR$1 = 9987;
    var GL_GENERATE_MIPMAP_HINT = 33170;
    var GL_DONT_CARE = 4352;
    var GL_FASTEST = 4353;
    var GL_NICEST = 4354;
    var GL_TEXTURE_MAX_ANISOTROPY_EXT = 34046;
    var GL_UNPACK_ALIGNMENT = 3317;
    var GL_UNPACK_FLIP_Y_WEBGL = 37440;
    var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
    var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
    var GL_BROWSER_DEFAULT_WEBGL = 37444;
    var GL_TEXTURE0$1 = 33984;
    var MIPMAP_FILTERS = [
      GL_NEAREST_MIPMAP_NEAREST$1,
      GL_NEAREST_MIPMAP_LINEAR$1,
      GL_LINEAR_MIPMAP_NEAREST$1,
      GL_LINEAR_MIPMAP_LINEAR$1
    ];
    var CHANNELS_FORMAT = [
      0,
      GL_LUMINANCE,
      GL_LUMINANCE_ALPHA,
      GL_RGB,
      GL_RGBA$1
    ];
    var FORMAT_CHANNELS = {};
    FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
    FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
    FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
    FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;
    function objectName(str) {
      return "[object " + str + "]";
    }
    var CANVAS_CLASS = objectName("HTMLCanvasElement");
    var OFFSCREENCANVAS_CLASS = objectName("OffscreenCanvas");
    var CONTEXT2D_CLASS = objectName("CanvasRenderingContext2D");
    var BITMAP_CLASS = objectName("ImageBitmap");
    var IMAGE_CLASS = objectName("HTMLImageElement");
    var VIDEO_CLASS = objectName("HTMLVideoElement");
    var PIXEL_CLASSES = Object.keys(arrayTypes).concat([
      CANVAS_CLASS,
      OFFSCREENCANVAS_CLASS,
      CONTEXT2D_CLASS,
      BITMAP_CLASS,
      IMAGE_CLASS,
      VIDEO_CLASS
    ]);
    var TYPE_SIZES = [];
    TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
    TYPE_SIZES[GL_FLOAT$4] = 4;
    TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;
    TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
    TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;
    var FORMAT_SIZES_SPECIAL = [];
    FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
    FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
    FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
    FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;
    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;
    function isNumericArray(arr) {
      return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === "number");
    }
    function isRectArray(arr) {
      if (!Array.isArray(arr)) {
        return false;
      }
      var width = arr.length;
      if (width === 0 || !isArrayLike(arr[0])) {
        return false;
      }
      return true;
    }
    function classString(x) {
      return Object.prototype.toString.call(x);
    }
    function isCanvasElement(object2) {
      return classString(object2) === CANVAS_CLASS;
    }
    function isOffscreenCanvas(object2) {
      return classString(object2) === OFFSCREENCANVAS_CLASS;
    }
    function isContext2D(object2) {
      return classString(object2) === CONTEXT2D_CLASS;
    }
    function isBitmap(object2) {
      return classString(object2) === BITMAP_CLASS;
    }
    function isImageElement(object2) {
      return classString(object2) === IMAGE_CLASS;
    }
    function isVideoElement(object2) {
      return classString(object2) === VIDEO_CLASS;
    }
    function isPixelData(object2) {
      if (!object2) {
        return false;
      }
      var className = classString(object2);
      if (PIXEL_CLASSES.indexOf(className) >= 0) {
        return true;
      }
      return isNumericArray(object2) || isRectArray(object2) || isNDArrayLike(object2);
    }
    function typedArrayCode$1(data2) {
      return arrayTypes[Object.prototype.toString.call(data2)] | 0;
    }
    function convertData(result, data2) {
      var n = data2.length;
      switch (result.type) {
        case GL_UNSIGNED_BYTE$5:
        case GL_UNSIGNED_SHORT$3:
        case GL_UNSIGNED_INT$3:
        case GL_FLOAT$4:
          var converted = pool.allocType(result.type, n);
          converted.set(data2);
          result.data = converted;
          break;
        case GL_HALF_FLOAT_OES$1:
          result.data = convertToHalfFloat(data2);
          break;
        default:
          check$1.raise("unsupported texture type, must specify a typed array");
      }
    }
    function preConvert(image, n) {
      return pool.allocType(image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type, n);
    }
    function postConvert(image, data2) {
      if (image.type === GL_HALF_FLOAT_OES$1) {
        image.data = convertToHalfFloat(data2);
        pool.freeType(data2);
      } else {
        image.data = data2;
      }
    }
    function transposeData(image, array2, strideX, strideY, strideC, offset) {
      var w = image.width;
      var h = image.height;
      var c2 = image.channels;
      var n = w * h * c2;
      var data2 = preConvert(image, n);
      var p = 0;
      for (var i = 0; i < h; ++i) {
        for (var j = 0; j < w; ++j) {
          for (var k = 0; k < c2; ++k) {
            data2[p++] = array2[strideX * j + strideY * i + strideC * k + offset];
          }
        }
      }
      postConvert(image, data2);
    }
    function getTextureSize(format2, type2, width, height, isMipmap, isCube) {
      var s;
      if (typeof FORMAT_SIZES_SPECIAL[format2] !== "undefined") {
        s = FORMAT_SIZES_SPECIAL[format2];
      } else {
        s = FORMAT_CHANNELS[format2] * TYPE_SIZES[type2];
      }
      if (isCube) {
        s *= 6;
      }
      if (isMipmap) {
        var total = 0;
        var w = width;
        while (w >= 1) {
          total += s * w * w;
          w /= 2;
        }
        return total;
      } else {
        return s * width * height;
      }
    }
    function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats2, config) {
      var mipmapHint = {
        "don't care": GL_DONT_CARE,
        "dont care": GL_DONT_CARE,
        "nice": GL_NICEST,
        "fast": GL_FASTEST
      };
      var wrapModes = {
        "repeat": GL_REPEAT,
        "clamp": GL_CLAMP_TO_EDGE$1,
        "mirror": GL_MIRRORED_REPEAT
      };
      var magFilters = {
        "nearest": GL_NEAREST$1,
        "linear": GL_LINEAR
      };
      var minFilters = extend2({
        "mipmap": GL_LINEAR_MIPMAP_LINEAR$1,
        "nearest mipmap nearest": GL_NEAREST_MIPMAP_NEAREST$1,
        "linear mipmap nearest": GL_LINEAR_MIPMAP_NEAREST$1,
        "nearest mipmap linear": GL_NEAREST_MIPMAP_LINEAR$1,
        "linear mipmap linear": GL_LINEAR_MIPMAP_LINEAR$1
      }, magFilters);
      var colorSpace = {
        "none": 0,
        "browser": GL_BROWSER_DEFAULT_WEBGL
      };
      var textureTypes = {
        "uint8": GL_UNSIGNED_BYTE$5,
        "rgba4": GL_UNSIGNED_SHORT_4_4_4_4$1,
        "rgb565": GL_UNSIGNED_SHORT_5_6_5$1,
        "rgb5 a1": GL_UNSIGNED_SHORT_5_5_5_1$1
      };
      var textureFormats = {
        "alpha": GL_ALPHA,
        "luminance": GL_LUMINANCE,
        "luminance alpha": GL_LUMINANCE_ALPHA,
        "rgb": GL_RGB,
        "rgba": GL_RGBA$1,
        "rgba4": GL_RGBA4,
        "rgb5 a1": GL_RGB5_A1,
        "rgb565": GL_RGB565
      };
      var compressedTextureFormats = {};
      if (extensions.ext_srgb) {
        textureFormats.srgb = GL_SRGB_EXT;
        textureFormats.srgba = GL_SRGB_ALPHA_EXT;
      }
      if (extensions.oes_texture_float) {
        textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
      }
      if (extensions.oes_texture_half_float) {
        textureTypes["float16"] = textureTypes["half float"] = GL_HALF_FLOAT_OES$1;
      }
      if (extensions.webgl_depth_texture) {
        extend2(textureFormats, {
          "depth": GL_DEPTH_COMPONENT,
          "depth stencil": GL_DEPTH_STENCIL
        });
        extend2(textureTypes, {
          "uint16": GL_UNSIGNED_SHORT$3,
          "uint32": GL_UNSIGNED_INT$3,
          "depth stencil": GL_UNSIGNED_INT_24_8_WEBGL$1
        });
      }
      if (extensions.webgl_compressed_texture_s3tc) {
        extend2(compressedTextureFormats, {
          "rgb s3tc dxt1": GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
          "rgba s3tc dxt1": GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
          "rgba s3tc dxt3": GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
          "rgba s3tc dxt5": GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
        });
      }
      if (extensions.webgl_compressed_texture_atc) {
        extend2(compressedTextureFormats, {
          "rgb atc": GL_COMPRESSED_RGB_ATC_WEBGL,
          "rgba atc explicit alpha": GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
          "rgba atc interpolated alpha": GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
        });
      }
      if (extensions.webgl_compressed_texture_pvrtc) {
        extend2(compressedTextureFormats, {
          "rgb pvrtc 4bppv1": GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
          "rgb pvrtc 2bppv1": GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
          "rgba pvrtc 4bppv1": GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
          "rgba pvrtc 2bppv1": GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
        });
      }
      if (extensions.webgl_compressed_texture_etc1) {
        compressedTextureFormats["rgb etc1"] = GL_COMPRESSED_RGB_ETC1_WEBGL;
      }
      var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
      Object.keys(compressedTextureFormats).forEach(function(name) {
        var format2 = compressedTextureFormats[name];
        if (supportedCompressedFormats.indexOf(format2) >= 0) {
          textureFormats[name] = format2;
        }
      });
      var supportedFormats = Object.keys(textureFormats);
      limits.textureFormats = supportedFormats;
      var textureFormatsInvert = [];
      Object.keys(textureFormats).forEach(function(key) {
        var val = textureFormats[key];
        textureFormatsInvert[val] = key;
      });
      var textureTypesInvert = [];
      Object.keys(textureTypes).forEach(function(key) {
        var val = textureTypes[key];
        textureTypesInvert[val] = key;
      });
      var magFiltersInvert = [];
      Object.keys(magFilters).forEach(function(key) {
        var val = magFilters[key];
        magFiltersInvert[val] = key;
      });
      var minFiltersInvert = [];
      Object.keys(minFilters).forEach(function(key) {
        var val = minFilters[key];
        minFiltersInvert[val] = key;
      });
      var wrapModesInvert = [];
      Object.keys(wrapModes).forEach(function(key) {
        var val = wrapModes[key];
        wrapModesInvert[val] = key;
      });
      var colorFormats = supportedFormats.reduce(function(color2, key) {
        var glenum = textureFormats[key];
        if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL || extensions.ext_srgb && (glenum === GL_SRGB_EXT || glenum === GL_SRGB_ALPHA_EXT)) {
          color2[glenum] = glenum;
        } else if (glenum === GL_RGB5_A1 || key.indexOf("rgba") >= 0) {
          color2[glenum] = GL_RGBA$1;
        } else {
          color2[glenum] = GL_RGB;
        }
        return color2;
      }, {});
      function TexFlags() {
        this.internalformat = GL_RGBA$1;
        this.format = GL_RGBA$1;
        this.type = GL_UNSIGNED_BYTE$5;
        this.compressed = false;
        this.premultiplyAlpha = false;
        this.flipY = false;
        this.unpackAlignment = 1;
        this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;
        this.width = 0;
        this.height = 0;
        this.channels = 0;
      }
      function copyFlags(result, other) {
        result.internalformat = other.internalformat;
        result.format = other.format;
        result.type = other.type;
        result.compressed = other.compressed;
        result.premultiplyAlpha = other.premultiplyAlpha;
        result.flipY = other.flipY;
        result.unpackAlignment = other.unpackAlignment;
        result.colorSpace = other.colorSpace;
        result.width = other.width;
        result.height = other.height;
        result.channels = other.channels;
      }
      function parseFlags(flags, options) {
        if (typeof options !== "object" || !options) {
          return;
        }
        if ("premultiplyAlpha" in options) {
          check$1.type(options.premultiplyAlpha, "boolean", "invalid premultiplyAlpha");
          flags.premultiplyAlpha = options.premultiplyAlpha;
        }
        if ("flipY" in options) {
          check$1.type(options.flipY, "boolean", "invalid texture flip");
          flags.flipY = options.flipY;
        }
        if ("alignment" in options) {
          check$1.oneOf(options.alignment, [1, 2, 4, 8], "invalid texture unpack alignment");
          flags.unpackAlignment = options.alignment;
        }
        if ("colorSpace" in options) {
          check$1.parameter(options.colorSpace, colorSpace, "invalid colorSpace");
          flags.colorSpace = colorSpace[options.colorSpace];
        }
        if ("type" in options) {
          var type2 = options.type;
          check$1(extensions.oes_texture_float || !(type2 === "float" || type2 === "float32"), "you must enable the OES_texture_float extension in order to use floating point textures.");
          check$1(extensions.oes_texture_half_float || !(type2 === "half float" || type2 === "float16"), "you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.");
          check$1(extensions.webgl_depth_texture || !(type2 === "uint16" || type2 === "uint32" || type2 === "depth stencil"), "you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.");
          check$1.parameter(type2, textureTypes, "invalid texture type");
          flags.type = textureTypes[type2];
        }
        var w = flags.width;
        var h = flags.height;
        var c2 = flags.channels;
        var hasChannels = false;
        if ("shape" in options) {
          check$1(Array.isArray(options.shape) && options.shape.length >= 2, "shape must be an array");
          w = options.shape[0];
          h = options.shape[1];
          if (options.shape.length === 3) {
            c2 = options.shape[2];
            check$1(c2 > 0 && c2 <= 4, "invalid number of channels");
            hasChannels = true;
          }
          check$1(w >= 0 && w <= limits.maxTextureSize, "invalid width");
          check$1(h >= 0 && h <= limits.maxTextureSize, "invalid height");
        } else {
          if ("radius" in options) {
            w = h = options.radius;
            check$1(w >= 0 && w <= limits.maxTextureSize, "invalid radius");
          }
          if ("width" in options) {
            w = options.width;
            check$1(w >= 0 && w <= limits.maxTextureSize, "invalid width");
          }
          if ("height" in options) {
            h = options.height;
            check$1(h >= 0 && h <= limits.maxTextureSize, "invalid height");
          }
          if ("channels" in options) {
            c2 = options.channels;
            check$1(c2 > 0 && c2 <= 4, "invalid number of channels");
            hasChannels = true;
          }
        }
        flags.width = w | 0;
        flags.height = h | 0;
        flags.channels = c2 | 0;
        var hasFormat = false;
        if ("format" in options) {
          var formatStr = options.format;
          check$1(extensions.webgl_depth_texture || !(formatStr === "depth" || formatStr === "depth stencil"), "you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.");
          check$1.parameter(formatStr, textureFormats, "invalid texture format");
          var internalformat = flags.internalformat = textureFormats[formatStr];
          flags.format = colorFormats[internalformat];
          if (formatStr in textureTypes) {
            if (!("type" in options)) {
              flags.type = textureTypes[formatStr];
            }
          }
          if (formatStr in compressedTextureFormats) {
            flags.compressed = true;
          }
          hasFormat = true;
        }
        if (!hasChannels && hasFormat) {
          flags.channels = FORMAT_CHANNELS[flags.format];
        } else if (hasChannels && !hasFormat) {
          if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
            flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
          }
        } else if (hasFormat && hasChannels) {
          check$1(flags.channels === FORMAT_CHANNELS[flags.format], "number of channels inconsistent with specified format");
        }
      }
      function setFlags(flags) {
        gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
        gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
        gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
        gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
      }
      function TexImage() {
        TexFlags.call(this);
        this.xOffset = 0;
        this.yOffset = 0;
        this.data = null;
        this.needsFree = false;
        this.element = null;
        this.needsCopy = false;
      }
      function parseImage(image, options) {
        var data2 = null;
        if (isPixelData(options)) {
          data2 = options;
        } else if (options) {
          check$1.type(options, "object", "invalid pixel data type");
          parseFlags(image, options);
          if ("x" in options) {
            image.xOffset = options.x | 0;
          }
          if ("y" in options) {
            image.yOffset = options.y | 0;
          }
          if (isPixelData(options.data)) {
            data2 = options.data;
          }
        }
        check$1(!image.compressed || data2 instanceof Uint8Array, "compressed texture data must be stored in a uint8array");
        if (options.copy) {
          check$1(!data2, "can not specify copy and data field for the same texture");
          var viewW = contextState.viewportWidth;
          var viewH = contextState.viewportHeight;
          image.width = image.width || viewW - image.xOffset;
          image.height = image.height || viewH - image.yOffset;
          image.needsCopy = true;
          check$1(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, "copy texture read out of bounds");
        } else if (!data2) {
          image.width = image.width || 1;
          image.height = image.height || 1;
          image.channels = image.channels || 4;
        } else if (isTypedArray2(data2)) {
          image.channels = image.channels || 4;
          image.data = data2;
          if (!("type" in options) && image.type === GL_UNSIGNED_BYTE$5) {
            image.type = typedArrayCode$1(data2);
          }
        } else if (isNumericArray(data2)) {
          image.channels = image.channels || 4;
          convertData(image, data2);
          image.alignment = 1;
          image.needsFree = true;
        } else if (isNDArrayLike(data2)) {
          var array2 = data2.data;
          if (!Array.isArray(array2) && image.type === GL_UNSIGNED_BYTE$5) {
            image.type = typedArrayCode$1(array2);
          }
          var shape = data2.shape;
          var stride = data2.stride;
          var shapeX, shapeY, shapeC, strideX, strideY, strideC;
          if (shape.length === 3) {
            shapeC = shape[2];
            strideC = stride[2];
          } else {
            check$1(shape.length === 2, "invalid ndarray pixel data, must be 2 or 3D");
            shapeC = 1;
            strideC = 1;
          }
          shapeX = shape[0];
          shapeY = shape[1];
          strideX = stride[0];
          strideY = stride[1];
          image.alignment = 1;
          image.width = shapeX;
          image.height = shapeY;
          image.channels = shapeC;
          image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
          image.needsFree = true;
          transposeData(image, array2, strideX, strideY, strideC, data2.offset);
        } else if (isCanvasElement(data2) || isOffscreenCanvas(data2) || isContext2D(data2)) {
          if (isCanvasElement(data2) || isOffscreenCanvas(data2)) {
            image.element = data2;
          } else {
            image.element = data2.canvas;
          }
          image.width = image.element.width;
          image.height = image.element.height;
          image.channels = 4;
        } else if (isBitmap(data2)) {
          image.element = data2;
          image.width = data2.width;
          image.height = data2.height;
          image.channels = 4;
        } else if (isImageElement(data2)) {
          image.element = data2;
          image.width = data2.naturalWidth;
          image.height = data2.naturalHeight;
          image.channels = 4;
        } else if (isVideoElement(data2)) {
          image.element = data2;
          image.width = data2.videoWidth;
          image.height = data2.videoHeight;
          image.channels = 4;
        } else if (isRectArray(data2)) {
          var w = image.width || data2[0].length;
          var h = image.height || data2.length;
          var c2 = image.channels;
          if (isArrayLike(data2[0][0])) {
            c2 = c2 || data2[0][0].length;
          } else {
            c2 = c2 || 1;
          }
          var arrayShape2 = flattenUtils.shape(data2);
          var n = 1;
          for (var dd = 0; dd < arrayShape2.length; ++dd) {
            n *= arrayShape2[dd];
          }
          var allocData = preConvert(image, n);
          flattenUtils.flatten(data2, arrayShape2, "", allocData);
          postConvert(image, allocData);
          image.alignment = 1;
          image.width = w;
          image.height = h;
          image.channels = c2;
          image.format = image.internalformat = CHANNELS_FORMAT[c2];
          image.needsFree = true;
        }
        if (image.type === GL_FLOAT$4) {
          check$1(limits.extensions.indexOf("oes_texture_float") >= 0, "oes_texture_float extension not enabled");
        } else if (image.type === GL_HALF_FLOAT_OES$1) {
          check$1(limits.extensions.indexOf("oes_texture_half_float") >= 0, "oes_texture_half_float extension not enabled");
        }
      }
      function setImage(info, target, miplevel) {
        var element = info.element;
        var data2 = info.data;
        var internalformat = info.internalformat;
        var format2 = info.format;
        var type2 = info.type;
        var width = info.width;
        var height = info.height;
        setFlags(info);
        if (element) {
          gl.texImage2D(target, miplevel, format2, format2, type2, element);
        } else if (info.compressed) {
          gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data2);
        } else if (info.needsCopy) {
          reglPoll();
          gl.copyTexImage2D(target, miplevel, format2, info.xOffset, info.yOffset, width, height, 0);
        } else {
          gl.texImage2D(target, miplevel, format2, width, height, 0, format2, type2, data2 || null);
        }
      }
      function setSubImage(info, target, x, y, miplevel) {
        var element = info.element;
        var data2 = info.data;
        var internalformat = info.internalformat;
        var format2 = info.format;
        var type2 = info.type;
        var width = info.width;
        var height = info.height;
        setFlags(info);
        if (element) {
          gl.texSubImage2D(target, miplevel, x, y, format2, type2, element);
        } else if (info.compressed) {
          gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data2);
        } else if (info.needsCopy) {
          reglPoll();
          gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
        } else {
          gl.texSubImage2D(target, miplevel, x, y, width, height, format2, type2, data2);
        }
      }
      var imagePool = [];
      function allocImage() {
        return imagePool.pop() || new TexImage();
      }
      function freeImage(image) {
        if (image.needsFree) {
          pool.freeType(image.data);
        }
        TexImage.call(image);
        imagePool.push(image);
      }
      function MipMap() {
        TexFlags.call(this);
        this.genMipmaps = false;
        this.mipmapHint = GL_DONT_CARE;
        this.mipmask = 0;
        this.images = Array(16);
      }
      function parseMipMapFromShape(mipmap, width, height) {
        var img = mipmap.images[0] = allocImage();
        mipmap.mipmask = 1;
        img.width = mipmap.width = width;
        img.height = mipmap.height = height;
        img.channels = mipmap.channels = 4;
      }
      function parseMipMapFromObject(mipmap, options) {
        var imgData = null;
        if (isPixelData(options)) {
          imgData = mipmap.images[0] = allocImage();
          copyFlags(imgData, mipmap);
          parseImage(imgData, options);
          mipmap.mipmask = 1;
        } else {
          parseFlags(mipmap, options);
          if (Array.isArray(options.mipmap)) {
            var mipData = options.mipmap;
            for (var i = 0; i < mipData.length; ++i) {
              imgData = mipmap.images[i] = allocImage();
              copyFlags(imgData, mipmap);
              imgData.width >>= i;
              imgData.height >>= i;
              parseImage(imgData, mipData[i]);
              mipmap.mipmask |= 1 << i;
            }
          } else {
            imgData = mipmap.images[0] = allocImage();
            copyFlags(imgData, mipmap);
            parseImage(imgData, options);
            mipmap.mipmask = 1;
          }
        }
        copyFlags(mipmap, mipmap.images[0]);
        if (mipmap.compressed && (mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT)) {
          check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, "for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4");
        }
      }
      function setMipMap(mipmap, target) {
        var images = mipmap.images;
        for (var i = 0; i < images.length; ++i) {
          if (!images[i]) {
            return;
          }
          setImage(images[i], target, i);
        }
      }
      var mipPool = [];
      function allocMipMap() {
        var result = mipPool.pop() || new MipMap();
        TexFlags.call(result);
        result.mipmask = 0;
        for (var i = 0; i < 16; ++i) {
          result.images[i] = null;
        }
        return result;
      }
      function freeMipMap(mipmap) {
        var images = mipmap.images;
        for (var i = 0; i < images.length; ++i) {
          if (images[i]) {
            freeImage(images[i]);
          }
          images[i] = null;
        }
        mipPool.push(mipmap);
      }
      function TexInfo() {
        this.minFilter = GL_NEAREST$1;
        this.magFilter = GL_NEAREST$1;
        this.wrapS = GL_CLAMP_TO_EDGE$1;
        this.wrapT = GL_CLAMP_TO_EDGE$1;
        this.anisotropic = 1;
        this.genMipmaps = false;
        this.mipmapHint = GL_DONT_CARE;
      }
      function parseTexInfo(info, options) {
        if ("min" in options) {
          var minFilter = options.min;
          check$1.parameter(minFilter, minFilters);
          info.minFilter = minFilters[minFilter];
          if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !("faces" in options)) {
            info.genMipmaps = true;
          }
        }
        if ("mag" in options) {
          var magFilter = options.mag;
          check$1.parameter(magFilter, magFilters);
          info.magFilter = magFilters[magFilter];
        }
        var wrapS = info.wrapS;
        var wrapT = info.wrapT;
        if ("wrap" in options) {
          var wrap2 = options.wrap;
          if (typeof wrap2 === "string") {
            check$1.parameter(wrap2, wrapModes);
            wrapS = wrapT = wrapModes[wrap2];
          } else if (Array.isArray(wrap2)) {
            check$1.parameter(wrap2[0], wrapModes);
            check$1.parameter(wrap2[1], wrapModes);
            wrapS = wrapModes[wrap2[0]];
            wrapT = wrapModes[wrap2[1]];
          }
        } else {
          if ("wrapS" in options) {
            var optWrapS = options.wrapS;
            check$1.parameter(optWrapS, wrapModes);
            wrapS = wrapModes[optWrapS];
          }
          if ("wrapT" in options) {
            var optWrapT = options.wrapT;
            check$1.parameter(optWrapT, wrapModes);
            wrapT = wrapModes[optWrapT];
          }
        }
        info.wrapS = wrapS;
        info.wrapT = wrapT;
        if ("anisotropic" in options) {
          var anisotropic = options.anisotropic;
          check$1(typeof anisotropic === "number" && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, "aniso samples must be between 1 and ");
          info.anisotropic = options.anisotropic;
        }
        if ("mipmap" in options) {
          var hasMipMap = false;
          switch (typeof options.mipmap) {
            case "string":
              check$1.parameter(options.mipmap, mipmapHint, "invalid mipmap hint");
              info.mipmapHint = mipmapHint[options.mipmap];
              info.genMipmaps = true;
              hasMipMap = true;
              break;
            case "boolean":
              hasMipMap = info.genMipmaps = options.mipmap;
              break;
            case "object":
              check$1(Array.isArray(options.mipmap), "invalid mipmap type");
              info.genMipmaps = false;
              hasMipMap = true;
              break;
            default:
              check$1.raise("invalid mipmap type");
          }
          if (hasMipMap && !("min" in options)) {
            info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
          }
        }
      }
      function setTexInfo(info, target) {
        gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
        gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
        gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
        gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);
        if (extensions.ext_texture_filter_anisotropic) {
          gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
        }
        if (info.genMipmaps) {
          gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
          gl.generateMipmap(target);
        }
      }
      var textureCount = 0;
      var textureSet = {};
      var numTexUnits = limits.maxTextureUnits;
      var textureUnits = Array(numTexUnits).map(function() {
        return null;
      });
      function REGLTexture(target) {
        TexFlags.call(this);
        this.mipmask = 0;
        this.internalformat = GL_RGBA$1;
        this.id = textureCount++;
        this.refCount = 1;
        this.target = target;
        this.texture = gl.createTexture();
        this.unit = -1;
        this.bindCount = 0;
        this.texInfo = new TexInfo();
        if (config.profile) {
          this.stats = { size: 0 };
        }
      }
      function tempBind(texture) {
        gl.activeTexture(GL_TEXTURE0$1);
        gl.bindTexture(texture.target, texture.texture);
      }
      function tempRestore() {
        var prev = textureUnits[0];
        if (prev) {
          gl.bindTexture(prev.target, prev.texture);
        } else {
          gl.bindTexture(GL_TEXTURE_2D$1, null);
        }
      }
      function destroy(texture) {
        var handle = texture.texture;
        check$1(handle, "must not double destroy texture");
        var unit2 = texture.unit;
        var target = texture.target;
        if (unit2 >= 0) {
          gl.activeTexture(GL_TEXTURE0$1 + unit2);
          gl.bindTexture(target, null);
          textureUnits[unit2] = null;
        }
        gl.deleteTexture(handle);
        texture.texture = null;
        texture.params = null;
        texture.pixels = null;
        texture.refCount = 0;
        delete textureSet[texture.id];
        stats2.textureCount--;
      }
      extend2(REGLTexture.prototype, {
        bind: function() {
          var texture = this;
          texture.bindCount += 1;
          var unit2 = texture.unit;
          if (unit2 < 0) {
            for (var i = 0; i < numTexUnits; ++i) {
              var other = textureUnits[i];
              if (other) {
                if (other.bindCount > 0) {
                  continue;
                }
                other.unit = -1;
              }
              textureUnits[i] = texture;
              unit2 = i;
              break;
            }
            if (unit2 >= numTexUnits) {
              check$1.raise("insufficient number of texture units");
            }
            if (config.profile && stats2.maxTextureUnits < unit2 + 1) {
              stats2.maxTextureUnits = unit2 + 1;
            }
            texture.unit = unit2;
            gl.activeTexture(GL_TEXTURE0$1 + unit2);
            gl.bindTexture(texture.target, texture.texture);
          }
          return unit2;
        },
        unbind: function() {
          this.bindCount -= 1;
        },
        decRef: function() {
          if (--this.refCount <= 0) {
            destroy(this);
          }
        }
      });
      function createTexture2D(a, b) {
        var texture = new REGLTexture(GL_TEXTURE_2D$1);
        textureSet[texture.id] = texture;
        stats2.textureCount++;
        function reglTexture2D(a2, b2) {
          var texInfo = texture.texInfo;
          TexInfo.call(texInfo);
          var mipData = allocMipMap();
          if (typeof a2 === "number") {
            if (typeof b2 === "number") {
              parseMipMapFromShape(mipData, a2 | 0, b2 | 0);
            } else {
              parseMipMapFromShape(mipData, a2 | 0, a2 | 0);
            }
          } else if (a2) {
            check$1.type(a2, "object", "invalid arguments to regl.texture");
            parseTexInfo(texInfo, a2);
            parseMipMapFromObject(mipData, a2);
          } else {
            parseMipMapFromShape(mipData, 1, 1);
          }
          if (texInfo.genMipmaps) {
            mipData.mipmask = (mipData.width << 1) - 1;
          }
          texture.mipmask = mipData.mipmask;
          copyFlags(texture, mipData);
          check$1.texture2D(texInfo, mipData, limits);
          texture.internalformat = mipData.internalformat;
          reglTexture2D.width = mipData.width;
          reglTexture2D.height = mipData.height;
          tempBind(texture);
          setMipMap(mipData, GL_TEXTURE_2D$1);
          setTexInfo(texInfo, GL_TEXTURE_2D$1);
          tempRestore();
          freeMipMap(mipData);
          if (config.profile) {
            texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);
          }
          reglTexture2D.format = textureFormatsInvert[texture.internalformat];
          reglTexture2D.type = textureTypesInvert[texture.type];
          reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
          reglTexture2D.min = minFiltersInvert[texInfo.minFilter];
          reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
          reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];
          return reglTexture2D;
        }
        function subimage(image, x_, y_, level_) {
          check$1(!!image, "must specify image data");
          var x = x_ | 0;
          var y = y_ | 0;
          var level = level_ | 0;
          var imageData = allocImage();
          copyFlags(imageData, texture);
          imageData.width = 0;
          imageData.height = 0;
          parseImage(imageData, image);
          imageData.width = imageData.width || (texture.width >> level) - x;
          imageData.height = imageData.height || (texture.height >> level) - y;
          check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, "incompatible format for texture.subimage");
          check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, "texture.subimage write out of bounds");
          check$1(texture.mipmask & 1 << level, "missing mipmap data");
          check$1(imageData.data || imageData.element || imageData.needsCopy, "missing image data");
          tempBind(texture);
          setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
          tempRestore();
          freeImage(imageData);
          return reglTexture2D;
        }
        function resize(w_, h_) {
          var w = w_ | 0;
          var h = h_ | 0 || w;
          if (w === texture.width && h === texture.height) {
            return reglTexture2D;
          }
          reglTexture2D.width = texture.width = w;
          reglTexture2D.height = texture.height = h;
          tempBind(texture);
          for (var i = 0; texture.mipmask >> i; ++i) {
            var _w = w >> i;
            var _h = h >> i;
            if (!_w || !_h)
              break;
            gl.texImage2D(GL_TEXTURE_2D$1, i, texture.format, _w, _h, 0, texture.format, texture.type, null);
          }
          tempRestore();
          if (config.profile) {
            texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);
          }
          return reglTexture2D;
        }
        reglTexture2D(a, b);
        reglTexture2D.subimage = subimage;
        reglTexture2D.resize = resize;
        reglTexture2D._reglType = "texture2d";
        reglTexture2D._texture = texture;
        if (config.profile) {
          reglTexture2D.stats = texture.stats;
        }
        reglTexture2D.destroy = function() {
          texture.decRef();
        };
        return reglTexture2D;
      }
      function createTextureCube(a0, a1, a2, a3, a4, a5) {
        var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
        textureSet[texture.id] = texture;
        stats2.cubeCount++;
        var faces = new Array(6);
        function reglTextureCube(a02, a12, a22, a32, a42, a52) {
          var i;
          var texInfo = texture.texInfo;
          TexInfo.call(texInfo);
          for (i = 0; i < 6; ++i) {
            faces[i] = allocMipMap();
          }
          if (typeof a02 === "number" || !a02) {
            var s = a02 | 0 || 1;
            for (i = 0; i < 6; ++i) {
              parseMipMapFromShape(faces[i], s, s);
            }
          } else if (typeof a02 === "object") {
            if (a12) {
              parseMipMapFromObject(faces[0], a02);
              parseMipMapFromObject(faces[1], a12);
              parseMipMapFromObject(faces[2], a22);
              parseMipMapFromObject(faces[3], a32);
              parseMipMapFromObject(faces[4], a42);
              parseMipMapFromObject(faces[5], a52);
            } else {
              parseTexInfo(texInfo, a02);
              parseFlags(texture, a02);
              if ("faces" in a02) {
                var faceInput = a02.faces;
                check$1(Array.isArray(faceInput) && faceInput.length === 6, "cube faces must be a length 6 array");
                for (i = 0; i < 6; ++i) {
                  check$1(typeof faceInput[i] === "object" && !!faceInput[i], "invalid input for cube map face");
                  copyFlags(faces[i], texture);
                  parseMipMapFromObject(faces[i], faceInput[i]);
                }
              } else {
                for (i = 0; i < 6; ++i) {
                  parseMipMapFromObject(faces[i], a02);
                }
              }
            }
          } else {
            check$1.raise("invalid arguments to cube map");
          }
          copyFlags(texture, faces[0]);
          check$1.optional(function() {
            if (!limits.npotTextureCube) {
              check$1(isPow2$1(texture.width) && isPow2$1(texture.height), "your browser does not support non power or two texture dimensions");
            }
          });
          if (texInfo.genMipmaps) {
            texture.mipmask = (faces[0].width << 1) - 1;
          } else {
            texture.mipmask = faces[0].mipmask;
          }
          check$1.textureCube(texture, texInfo, faces, limits);
          texture.internalformat = faces[0].internalformat;
          reglTextureCube.width = faces[0].width;
          reglTextureCube.height = faces[0].height;
          tempBind(texture);
          for (i = 0; i < 6; ++i) {
            setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
          }
          setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
          tempRestore();
          if (config.profile) {
            texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);
          }
          reglTextureCube.format = textureFormatsInvert[texture.internalformat];
          reglTextureCube.type = textureTypesInvert[texture.type];
          reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
          reglTextureCube.min = minFiltersInvert[texInfo.minFilter];
          reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
          reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];
          for (i = 0; i < 6; ++i) {
            freeMipMap(faces[i]);
          }
          return reglTextureCube;
        }
        function subimage(face, image, x_, y_, level_) {
          check$1(!!image, "must specify image data");
          check$1(typeof face === "number" && face === (face | 0) && face >= 0 && face < 6, "invalid face");
          var x = x_ | 0;
          var y = y_ | 0;
          var level = level_ | 0;
          var imageData = allocImage();
          copyFlags(imageData, texture);
          imageData.width = 0;
          imageData.height = 0;
          parseImage(imageData, image);
          imageData.width = imageData.width || (texture.width >> level) - x;
          imageData.height = imageData.height || (texture.height >> level) - y;
          check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, "incompatible format for texture.subimage");
          check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, "texture.subimage write out of bounds");
          check$1(texture.mipmask & 1 << level, "missing mipmap data");
          check$1(imageData.data || imageData.element || imageData.needsCopy, "missing image data");
          tempBind(texture);
          setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
          tempRestore();
          freeImage(imageData);
          return reglTextureCube;
        }
        function resize(radius_) {
          var radius = radius_ | 0;
          if (radius === texture.width) {
            return;
          }
          reglTextureCube.width = texture.width = radius;
          reglTextureCube.height = texture.height = radius;
          tempBind(texture);
          for (var i = 0; i < 6; ++i) {
            for (var j = 0; texture.mipmask >> j; ++j) {
              gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);
            }
          }
          tempRestore();
          if (config.profile) {
            texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);
          }
          return reglTextureCube;
        }
        reglTextureCube(a0, a1, a2, a3, a4, a5);
        reglTextureCube.subimage = subimage;
        reglTextureCube.resize = resize;
        reglTextureCube._reglType = "textureCube";
        reglTextureCube._texture = texture;
        if (config.profile) {
          reglTextureCube.stats = texture.stats;
        }
        reglTextureCube.destroy = function() {
          texture.decRef();
        };
        return reglTextureCube;
      }
      function destroyTextures() {
        for (var i = 0; i < numTexUnits; ++i) {
          gl.activeTexture(GL_TEXTURE0$1 + i);
          gl.bindTexture(GL_TEXTURE_2D$1, null);
          textureUnits[i] = null;
        }
        values(textureSet).forEach(destroy);
        stats2.cubeCount = 0;
        stats2.textureCount = 0;
      }
      if (config.profile) {
        stats2.getTotalTextureSize = function() {
          var total = 0;
          Object.keys(textureSet).forEach(function(key) {
            total += textureSet[key].stats.size;
          });
          return total;
        };
      }
      function restoreTextures() {
        for (var i = 0; i < numTexUnits; ++i) {
          var tex = textureUnits[i];
          if (tex) {
            tex.bindCount = 0;
            tex.unit = -1;
            textureUnits[i] = null;
          }
        }
        values(textureSet).forEach(function(texture) {
          texture.texture = gl.createTexture();
          gl.bindTexture(texture.target, texture.texture);
          for (var i2 = 0; i2 < 32; ++i2) {
            if ((texture.mipmask & 1 << i2) === 0) {
              continue;
            }
            if (texture.target === GL_TEXTURE_2D$1) {
              gl.texImage2D(GL_TEXTURE_2D$1, i2, texture.internalformat, texture.width >> i2, texture.height >> i2, 0, texture.internalformat, texture.type, null);
            } else {
              for (var j = 0; j < 6; ++j) {
                gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j, i2, texture.internalformat, texture.width >> i2, texture.height >> i2, 0, texture.internalformat, texture.type, null);
              }
            }
          }
          setTexInfo(texture.texInfo, texture.target);
        });
      }
      function refreshTextures() {
        for (var i = 0; i < numTexUnits; ++i) {
          var tex = textureUnits[i];
          if (tex) {
            tex.bindCount = 0;
            tex.unit = -1;
            textureUnits[i] = null;
          }
          gl.activeTexture(GL_TEXTURE0$1 + i);
          gl.bindTexture(GL_TEXTURE_2D$1, null);
          gl.bindTexture(GL_TEXTURE_CUBE_MAP$1, null);
        }
      }
      return {
        create2D: createTexture2D,
        createCube: createTextureCube,
        clear: destroyTextures,
        getTexture: function(wrapper) {
          return null;
        },
        restore: restoreTextures,
        refresh: refreshTextures
      };
    }
    var GL_RENDERBUFFER = 36161;
    var GL_RGBA4$1 = 32854;
    var GL_RGB5_A1$1 = 32855;
    var GL_RGB565$1 = 36194;
    var GL_DEPTH_COMPONENT16 = 33189;
    var GL_STENCIL_INDEX8 = 36168;
    var GL_DEPTH_STENCIL$1 = 34041;
    var GL_SRGB8_ALPHA8_EXT = 35907;
    var GL_RGBA32F_EXT = 34836;
    var GL_RGBA16F_EXT = 34842;
    var GL_RGB16F_EXT = 34843;
    var FORMAT_SIZES = [];
    FORMAT_SIZES[GL_RGBA4$1] = 2;
    FORMAT_SIZES[GL_RGB5_A1$1] = 2;
    FORMAT_SIZES[GL_RGB565$1] = 2;
    FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
    FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
    FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;
    FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
    FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
    FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
    FORMAT_SIZES[GL_RGB16F_EXT] = 6;
    function getRenderbufferSize(format2, width, height) {
      return FORMAT_SIZES[format2] * width * height;
    }
    var wrapRenderbuffers = function(gl, extensions, limits, stats2, config) {
      var formatTypes2 = {
        "rgba4": GL_RGBA4$1,
        "rgb565": GL_RGB565$1,
        "rgb5 a1": GL_RGB5_A1$1,
        "depth": GL_DEPTH_COMPONENT16,
        "stencil": GL_STENCIL_INDEX8,
        "depth stencil": GL_DEPTH_STENCIL$1
      };
      if (extensions.ext_srgb) {
        formatTypes2["srgba"] = GL_SRGB8_ALPHA8_EXT;
      }
      if (extensions.ext_color_buffer_half_float) {
        formatTypes2["rgba16f"] = GL_RGBA16F_EXT;
        formatTypes2["rgb16f"] = GL_RGB16F_EXT;
      }
      if (extensions.webgl_color_buffer_float) {
        formatTypes2["rgba32f"] = GL_RGBA32F_EXT;
      }
      var formatTypesInvert = [];
      Object.keys(formatTypes2).forEach(function(key) {
        var val = formatTypes2[key];
        formatTypesInvert[val] = key;
      });
      var renderbufferCount = 0;
      var renderbufferSet = {};
      function REGLRenderbuffer(renderbuffer) {
        this.id = renderbufferCount++;
        this.refCount = 1;
        this.renderbuffer = renderbuffer;
        this.format = GL_RGBA4$1;
        this.width = 0;
        this.height = 0;
        if (config.profile) {
          this.stats = { size: 0 };
        }
      }
      REGLRenderbuffer.prototype.decRef = function() {
        if (--this.refCount <= 0) {
          destroy(this);
        }
      };
      function destroy(rb) {
        var handle = rb.renderbuffer;
        check$1(handle, "must not double destroy renderbuffer");
        gl.bindRenderbuffer(GL_RENDERBUFFER, null);
        gl.deleteRenderbuffer(handle);
        rb.renderbuffer = null;
        rb.refCount = 0;
        delete renderbufferSet[rb.id];
        stats2.renderbufferCount--;
      }
      function createRenderbuffer(a, b) {
        var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
        renderbufferSet[renderbuffer.id] = renderbuffer;
        stats2.renderbufferCount++;
        function reglRenderbuffer(a2, b2) {
          var w = 0;
          var h = 0;
          var format2 = GL_RGBA4$1;
          if (typeof a2 === "object" && a2) {
            var options = a2;
            if ("shape" in options) {
              var shape = options.shape;
              check$1(Array.isArray(shape) && shape.length >= 2, "invalid renderbuffer shape");
              w = shape[0] | 0;
              h = shape[1] | 0;
            } else {
              if ("radius" in options) {
                w = h = options.radius | 0;
              }
              if ("width" in options) {
                w = options.width | 0;
              }
              if ("height" in options) {
                h = options.height | 0;
              }
            }
            if ("format" in options) {
              check$1.parameter(options.format, formatTypes2, "invalid renderbuffer format");
              format2 = formatTypes2[options.format];
            }
          } else if (typeof a2 === "number") {
            w = a2 | 0;
            if (typeof b2 === "number") {
              h = b2 | 0;
            } else {
              h = w;
            }
          } else if (!a2) {
            w = h = 1;
          } else {
            check$1.raise("invalid arguments to renderbuffer constructor");
          }
          check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, "invalid renderbuffer size");
          if (w === renderbuffer.width && h === renderbuffer.height && format2 === renderbuffer.format) {
            return;
          }
          reglRenderbuffer.width = renderbuffer.width = w;
          reglRenderbuffer.height = renderbuffer.height = h;
          renderbuffer.format = format2;
          gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
          gl.renderbufferStorage(GL_RENDERBUFFER, format2, w, h);
          check$1(gl.getError() === 0, "invalid render buffer format");
          if (config.profile) {
            renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
          }
          reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];
          return reglRenderbuffer;
        }
        function resize(w_, h_) {
          var w = w_ | 0;
          var h = h_ | 0 || w;
          if (w === renderbuffer.width && h === renderbuffer.height) {
            return reglRenderbuffer;
          }
          check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, "invalid renderbuffer size");
          reglRenderbuffer.width = renderbuffer.width = w;
          reglRenderbuffer.height = renderbuffer.height = h;
          gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
          gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);
          check$1(gl.getError() === 0, "invalid render buffer format");
          if (config.profile) {
            renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
          }
          return reglRenderbuffer;
        }
        reglRenderbuffer(a, b);
        reglRenderbuffer.resize = resize;
        reglRenderbuffer._reglType = "renderbuffer";
        reglRenderbuffer._renderbuffer = renderbuffer;
        if (config.profile) {
          reglRenderbuffer.stats = renderbuffer.stats;
        }
        reglRenderbuffer.destroy = function() {
          renderbuffer.decRef();
        };
        return reglRenderbuffer;
      }
      if (config.profile) {
        stats2.getTotalRenderbufferSize = function() {
          var total = 0;
          Object.keys(renderbufferSet).forEach(function(key) {
            total += renderbufferSet[key].stats.size;
          });
          return total;
        };
      }
      function restoreRenderbuffers() {
        values(renderbufferSet).forEach(function(rb) {
          rb.renderbuffer = gl.createRenderbuffer();
          gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
          gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
        });
        gl.bindRenderbuffer(GL_RENDERBUFFER, null);
      }
      return {
        create: createRenderbuffer,
        clear: function() {
          values(renderbufferSet).forEach(destroy);
        },
        restore: restoreRenderbuffers
      };
    };
    var GL_FRAMEBUFFER$1 = 36160;
    var GL_RENDERBUFFER$1 = 36161;
    var GL_TEXTURE_2D$2 = 3553;
    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 34069;
    var GL_COLOR_ATTACHMENT0$1 = 36064;
    var GL_DEPTH_ATTACHMENT = 36096;
    var GL_STENCIL_ATTACHMENT = 36128;
    var GL_DEPTH_STENCIL_ATTACHMENT = 33306;
    var GL_FRAMEBUFFER_COMPLETE$1 = 36053;
    var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
    var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
    var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
    var GL_FRAMEBUFFER_UNSUPPORTED = 36061;
    var GL_HALF_FLOAT_OES$2 = 36193;
    var GL_UNSIGNED_BYTE$6 = 5121;
    var GL_FLOAT$5 = 5126;
    var GL_RGB$1 = 6407;
    var GL_RGBA$2 = 6408;
    var GL_DEPTH_COMPONENT$1 = 6402;
    var colorTextureFormatEnums = [
      GL_RGB$1,
      GL_RGBA$2
    ];
    var textureFormatChannels = [];
    textureFormatChannels[GL_RGBA$2] = 4;
    textureFormatChannels[GL_RGB$1] = 3;
    var textureTypeSizes = [];
    textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
    textureTypeSizes[GL_FLOAT$5] = 4;
    textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;
    var GL_RGBA4$2 = 32854;
    var GL_RGB5_A1$2 = 32855;
    var GL_RGB565$2 = 36194;
    var GL_DEPTH_COMPONENT16$1 = 33189;
    var GL_STENCIL_INDEX8$1 = 36168;
    var GL_DEPTH_STENCIL$2 = 34041;
    var GL_SRGB8_ALPHA8_EXT$1 = 35907;
    var GL_RGBA32F_EXT$1 = 34836;
    var GL_RGBA16F_EXT$1 = 34842;
    var GL_RGB16F_EXT$1 = 34843;
    var colorRenderbufferFormatEnums = [
      GL_RGBA4$2,
      GL_RGB5_A1$2,
      GL_RGB565$2,
      GL_SRGB8_ALPHA8_EXT$1,
      GL_RGBA16F_EXT$1,
      GL_RGB16F_EXT$1,
      GL_RGBA32F_EXT$1
    ];
    var statusCode = {};
    statusCode[GL_FRAMEBUFFER_COMPLETE$1] = "complete";
    statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = "incomplete attachment";
    statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = "incomplete dimensions";
    statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = "incomplete, missing attachment";
    statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = "unsupported";
    function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats2) {
      var framebufferState = {
        cur: null,
        next: null,
        dirty: false,
        setFBO: null
      };
      var colorTextureFormats = ["rgba"];
      var colorRenderbufferFormats = ["rgba4", "rgb565", "rgb5 a1"];
      if (extensions.ext_srgb) {
        colorRenderbufferFormats.push("srgba");
      }
      if (extensions.ext_color_buffer_half_float) {
        colorRenderbufferFormats.push("rgba16f", "rgb16f");
      }
      if (extensions.webgl_color_buffer_float) {
        colorRenderbufferFormats.push("rgba32f");
      }
      var colorTypes = ["uint8"];
      if (extensions.oes_texture_half_float) {
        colorTypes.push("half float", "float16");
      }
      if (extensions.oes_texture_float) {
        colorTypes.push("float", "float32");
      }
      function FramebufferAttachment(target, texture, renderbuffer) {
        this.target = target;
        this.texture = texture;
        this.renderbuffer = renderbuffer;
        var w = 0;
        var h = 0;
        if (texture) {
          w = texture.width;
          h = texture.height;
        } else if (renderbuffer) {
          w = renderbuffer.width;
          h = renderbuffer.height;
        }
        this.width = w;
        this.height = h;
      }
      function decRef(attachment) {
        if (attachment) {
          if (attachment.texture) {
            attachment.texture._texture.decRef();
          }
          if (attachment.renderbuffer) {
            attachment.renderbuffer._renderbuffer.decRef();
          }
        }
      }
      function incRefAndCheckShape(attachment, width, height) {
        if (!attachment) {
          return;
        }
        if (attachment.texture) {
          var texture = attachment.texture._texture;
          var tw = Math.max(1, texture.width);
          var th = Math.max(1, texture.height);
          check$1(tw === width && th === height, "inconsistent width/height for supplied texture");
          texture.refCount += 1;
        } else {
          var renderbuffer = attachment.renderbuffer._renderbuffer;
          check$1(renderbuffer.width === width && renderbuffer.height === height, "inconsistent width/height for renderbuffer");
          renderbuffer.refCount += 1;
        }
      }
      function attach(location, attachment) {
        if (attachment) {
          if (attachment.texture) {
            gl.framebufferTexture2D(GL_FRAMEBUFFER$1, location, attachment.target, attachment.texture._texture.texture, 0);
          } else {
            gl.framebufferRenderbuffer(GL_FRAMEBUFFER$1, location, GL_RENDERBUFFER$1, attachment.renderbuffer._renderbuffer.renderbuffer);
          }
        }
      }
      function parseAttachment(attachment) {
        var target = GL_TEXTURE_2D$2;
        var texture = null;
        var renderbuffer = null;
        var data2 = attachment;
        if (typeof attachment === "object") {
          data2 = attachment.data;
          if ("target" in attachment) {
            target = attachment.target | 0;
          }
        }
        check$1.type(data2, "function", "invalid attachment data");
        var type2 = data2._reglType;
        if (type2 === "texture2d") {
          texture = data2;
          check$1(target === GL_TEXTURE_2D$2);
        } else if (type2 === "textureCube") {
          texture = data2;
          check$1(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6, "invalid cube map target");
        } else if (type2 === "renderbuffer") {
          renderbuffer = data2;
          target = GL_RENDERBUFFER$1;
        } else {
          check$1.raise("invalid regl object for attachment");
        }
        return new FramebufferAttachment(target, texture, renderbuffer);
      }
      function allocAttachment(width, height, isTexture, format2, type2) {
        if (isTexture) {
          var texture = textureState.create2D({
            width,
            height,
            format: format2,
            type: type2
          });
          texture._texture.refCount = 0;
          return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);
        } else {
          var rb = renderbufferState.create({
            width,
            height,
            format: format2
          });
          rb._renderbuffer.refCount = 0;
          return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);
        }
      }
      function unwrapAttachment(attachment) {
        return attachment && (attachment.texture || attachment.renderbuffer);
      }
      function resizeAttachment(attachment, w, h) {
        if (attachment) {
          if (attachment.texture) {
            attachment.texture.resize(w, h);
          } else if (attachment.renderbuffer) {
            attachment.renderbuffer.resize(w, h);
          }
          attachment.width = w;
          attachment.height = h;
        }
      }
      var framebufferCount = 0;
      var framebufferSet = {};
      function REGLFramebuffer() {
        this.id = framebufferCount++;
        framebufferSet[this.id] = this;
        this.framebuffer = gl.createFramebuffer();
        this.width = 0;
        this.height = 0;
        this.colorAttachments = [];
        this.depthAttachment = null;
        this.stencilAttachment = null;
        this.depthStencilAttachment = null;
      }
      function decFBORefs(framebuffer) {
        framebuffer.colorAttachments.forEach(decRef);
        decRef(framebuffer.depthAttachment);
        decRef(framebuffer.stencilAttachment);
        decRef(framebuffer.depthStencilAttachment);
      }
      function destroy(framebuffer) {
        var handle = framebuffer.framebuffer;
        check$1(handle, "must not double destroy framebuffer");
        gl.deleteFramebuffer(handle);
        framebuffer.framebuffer = null;
        stats2.framebufferCount--;
        delete framebufferSet[framebuffer.id];
      }
      function updateFramebuffer(framebuffer) {
        var i;
        gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
        var colorAttachments = framebuffer.colorAttachments;
        for (i = 0; i < colorAttachments.length; ++i) {
          attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
        }
        for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
          gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_COLOR_ATTACHMENT0$1 + i, GL_TEXTURE_2D$2, null, 0);
        }
        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
        attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
        attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
        attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);
        var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);
        if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
          check$1.raise("framebuffer configuration not supported, status = " + statusCode[status]);
        }
        gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
        framebufferState.cur = framebufferState.next;
        gl.getError();
      }
      function createFBO(a0, a1) {
        var framebuffer = new REGLFramebuffer();
        stats2.framebufferCount++;
        function reglFramebuffer(a, b) {
          var i;
          check$1(framebufferState.next !== framebuffer, "can not update framebuffer which is currently in use");
          var width = 0;
          var height = 0;
          var needsDepth = true;
          var needsStencil = true;
          var colorBuffer = null;
          var colorTexture = true;
          var colorFormat = "rgba";
          var colorType = "uint8";
          var colorCount = 1;
          var depthBuffer = null;
          var stencilBuffer = null;
          var depthStencilBuffer = null;
          var depthStencilTexture = false;
          if (typeof a === "number") {
            width = a | 0;
            height = b | 0 || width;
          } else if (!a) {
            width = height = 1;
          } else {
            check$1.type(a, "object", "invalid arguments for framebuffer");
            var options = a;
            if ("shape" in options) {
              var shape = options.shape;
              check$1(Array.isArray(shape) && shape.length >= 2, "invalid shape for framebuffer");
              width = shape[0];
              height = shape[1];
            } else {
              if ("radius" in options) {
                width = height = options.radius;
              }
              if ("width" in options) {
                width = options.width;
              }
              if ("height" in options) {
                height = options.height;
              }
            }
            if ("color" in options || "colors" in options) {
              colorBuffer = options.color || options.colors;
              if (Array.isArray(colorBuffer)) {
                check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, "multiple render targets not supported");
              }
            }
            if (!colorBuffer) {
              if ("colorCount" in options) {
                colorCount = options.colorCount | 0;
                check$1(colorCount > 0, "invalid color buffer count");
              }
              if ("colorTexture" in options) {
                colorTexture = !!options.colorTexture;
                colorFormat = "rgba4";
              }
              if ("colorType" in options) {
                colorType = options.colorType;
                if (!colorTexture) {
                  if (colorType === "half float" || colorType === "float16") {
                    check$1(extensions.ext_color_buffer_half_float, "you must enable EXT_color_buffer_half_float to use 16-bit render buffers");
                    colorFormat = "rgba16f";
                  } else if (colorType === "float" || colorType === "float32") {
                    check$1(extensions.webgl_color_buffer_float, "you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers");
                    colorFormat = "rgba32f";
                  }
                } else {
                  check$1(extensions.oes_texture_float || !(colorType === "float" || colorType === "float32"), "you must enable OES_texture_float in order to use floating point framebuffer objects");
                  check$1(extensions.oes_texture_half_float || !(colorType === "half float" || colorType === "float16"), "you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects");
                }
                check$1.oneOf(colorType, colorTypes, "invalid color type");
              }
              if ("colorFormat" in options) {
                colorFormat = options.colorFormat;
                if (colorTextureFormats.indexOf(colorFormat) >= 0) {
                  colorTexture = true;
                } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
                  colorTexture = false;
                } else {
                  check$1.optional(function() {
                    if (colorTexture) {
                      check$1.oneOf(options.colorFormat, colorTextureFormats, "invalid color format for texture");
                    } else {
                      check$1.oneOf(options.colorFormat, colorRenderbufferFormats, "invalid color format for renderbuffer");
                    }
                  });
                }
              }
            }
            if ("depthTexture" in options || "depthStencilTexture" in options) {
              depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);
              check$1(!depthStencilTexture || extensions.webgl_depth_texture, "webgl_depth_texture extension not supported");
            }
            if ("depth" in options) {
              if (typeof options.depth === "boolean") {
                needsDepth = options.depth;
              } else {
                depthBuffer = options.depth;
                needsStencil = false;
              }
            }
            if ("stencil" in options) {
              if (typeof options.stencil === "boolean") {
                needsStencil = options.stencil;
              } else {
                stencilBuffer = options.stencil;
                needsDepth = false;
              }
            }
            if ("depthStencil" in options) {
              if (typeof options.depthStencil === "boolean") {
                needsDepth = needsStencil = options.depthStencil;
              } else {
                depthStencilBuffer = options.depthStencil;
                needsDepth = false;
                needsStencil = false;
              }
            }
          }
          var colorAttachments = null;
          var depthAttachment = null;
          var stencilAttachment = null;
          var depthStencilAttachment = null;
          if (Array.isArray(colorBuffer)) {
            colorAttachments = colorBuffer.map(parseAttachment);
          } else if (colorBuffer) {
            colorAttachments = [parseAttachment(colorBuffer)];
          } else {
            colorAttachments = new Array(colorCount);
            for (i = 0; i < colorCount; ++i) {
              colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);
            }
          }
          check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1, "you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.");
          check$1(colorAttachments.length <= limits.maxColorAttachments, "too many color attachments, not supported");
          width = width || colorAttachments[0].width;
          height = height || colorAttachments[0].height;
          if (depthBuffer) {
            depthAttachment = parseAttachment(depthBuffer);
          } else if (needsDepth && !needsStencil) {
            depthAttachment = allocAttachment(width, height, depthStencilTexture, "depth", "uint32");
          }
          if (stencilBuffer) {
            stencilAttachment = parseAttachment(stencilBuffer);
          } else if (needsStencil && !needsDepth) {
            stencilAttachment = allocAttachment(width, height, false, "stencil", "uint8");
          }
          if (depthStencilBuffer) {
            depthStencilAttachment = parseAttachment(depthStencilBuffer);
          } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
            depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, "depth stencil", "depth stencil");
          }
          check$1(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, "invalid framebuffer configuration, can specify exactly one depth/stencil attachment");
          var commonColorAttachmentSize = null;
          for (i = 0; i < colorAttachments.length; ++i) {
            incRefAndCheckShape(colorAttachments[i], width, height);
            check$1(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, "framebuffer color attachment " + i + " is invalid");
            if (colorAttachments[i] && colorAttachments[i].texture) {
              var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];
              if (commonColorAttachmentSize === null) {
                commonColorAttachmentSize = colorAttachmentSize;
              } else {
                check$1(commonColorAttachmentSize === colorAttachmentSize, "all color attachments much have the same number of bits per pixel.");
              }
            }
          }
          incRefAndCheckShape(depthAttachment, width, height);
          check$1(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1, "invalid depth attachment for framebuffer object");
          incRefAndCheckShape(stencilAttachment, width, height);
          check$1(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1, "invalid stencil attachment for framebuffer object");
          incRefAndCheckShape(depthStencilAttachment, width, height);
          check$1(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2, "invalid depth-stencil attachment for framebuffer object");
          decFBORefs(framebuffer);
          framebuffer.width = width;
          framebuffer.height = height;
          framebuffer.colorAttachments = colorAttachments;
          framebuffer.depthAttachment = depthAttachment;
          framebuffer.stencilAttachment = stencilAttachment;
          framebuffer.depthStencilAttachment = depthStencilAttachment;
          reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
          reglFramebuffer.depth = unwrapAttachment(depthAttachment);
          reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
          reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);
          reglFramebuffer.width = framebuffer.width;
          reglFramebuffer.height = framebuffer.height;
          updateFramebuffer(framebuffer);
          return reglFramebuffer;
        }
        function resize(w_, h_) {
          check$1(framebufferState.next !== framebuffer, "can not resize a framebuffer which is currently in use");
          var w = Math.max(w_ | 0, 1);
          var h = Math.max(h_ | 0 || w, 1);
          if (w === framebuffer.width && h === framebuffer.height) {
            return reglFramebuffer;
          }
          var colorAttachments = framebuffer.colorAttachments;
          for (var i = 0; i < colorAttachments.length; ++i) {
            resizeAttachment(colorAttachments[i], w, h);
          }
          resizeAttachment(framebuffer.depthAttachment, w, h);
          resizeAttachment(framebuffer.stencilAttachment, w, h);
          resizeAttachment(framebuffer.depthStencilAttachment, w, h);
          framebuffer.width = reglFramebuffer.width = w;
          framebuffer.height = reglFramebuffer.height = h;
          updateFramebuffer(framebuffer);
          return reglFramebuffer;
        }
        reglFramebuffer(a0, a1);
        return extend2(reglFramebuffer, {
          resize,
          _reglType: "framebuffer",
          _framebuffer: framebuffer,
          destroy: function() {
            destroy(framebuffer);
            decFBORefs(framebuffer);
          },
          use: function(block) {
            framebufferState.setFBO({
              framebuffer: reglFramebuffer
            }, block);
          }
        });
      }
      function createCubeFBO(options) {
        var faces = Array(6);
        function reglFramebufferCube(a) {
          var i;
          check$1(faces.indexOf(framebufferState.next) < 0, "can not update framebuffer which is currently in use");
          var params = {
            color: null
          };
          var radius = 0;
          var colorBuffer = null;
          var colorFormat = "rgba";
          var colorType = "uint8";
          var colorCount = 1;
          if (typeof a === "number") {
            radius = a | 0;
          } else if (!a) {
            radius = 1;
          } else {
            check$1.type(a, "object", "invalid arguments for framebuffer");
            var options2 = a;
            if ("shape" in options2) {
              var shape = options2.shape;
              check$1(Array.isArray(shape) && shape.length >= 2, "invalid shape for framebuffer");
              check$1(shape[0] === shape[1], "cube framebuffer must be square");
              radius = shape[0];
            } else {
              if ("radius" in options2) {
                radius = options2.radius | 0;
              }
              if ("width" in options2) {
                radius = options2.width | 0;
                if ("height" in options2) {
                  check$1(options2.height === radius, "must be square");
                }
              } else if ("height" in options2) {
                radius = options2.height | 0;
              }
            }
            if ("color" in options2 || "colors" in options2) {
              colorBuffer = options2.color || options2.colors;
              if (Array.isArray(colorBuffer)) {
                check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, "multiple render targets not supported");
              }
            }
            if (!colorBuffer) {
              if ("colorCount" in options2) {
                colorCount = options2.colorCount | 0;
                check$1(colorCount > 0, "invalid color buffer count");
              }
              if ("colorType" in options2) {
                check$1.oneOf(options2.colorType, colorTypes, "invalid color type");
                colorType = options2.colorType;
              }
              if ("colorFormat" in options2) {
                colorFormat = options2.colorFormat;
                check$1.oneOf(options2.colorFormat, colorTextureFormats, "invalid color format for texture");
              }
            }
            if ("depth" in options2) {
              params.depth = options2.depth;
            }
            if ("stencil" in options2) {
              params.stencil = options2.stencil;
            }
            if ("depthStencil" in options2) {
              params.depthStencil = options2.depthStencil;
            }
          }
          var colorCubes;
          if (colorBuffer) {
            if (Array.isArray(colorBuffer)) {
              colorCubes = [];
              for (i = 0; i < colorBuffer.length; ++i) {
                colorCubes[i] = colorBuffer[i];
              }
            } else {
              colorCubes = [colorBuffer];
            }
          } else {
            colorCubes = Array(colorCount);
            var cubeMapParams = {
              radius,
              format: colorFormat,
              type: colorType
            };
            for (i = 0; i < colorCount; ++i) {
              colorCubes[i] = textureState.createCube(cubeMapParams);
            }
          }
          params.color = Array(colorCubes.length);
          for (i = 0; i < colorCubes.length; ++i) {
            var cube = colorCubes[i];
            check$1(typeof cube === "function" && cube._reglType === "textureCube", "invalid cube map");
            radius = radius || cube.width;
            check$1(cube.width === radius && cube.height === radius, "invalid cube map shape");
            params.color[i] = {
              target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
              data: colorCubes[i]
            };
          }
          for (i = 0; i < 6; ++i) {
            for (var j = 0; j < colorCubes.length; ++j) {
              params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
            }
            if (i > 0) {
              params.depth = faces[0].depth;
              params.stencil = faces[0].stencil;
              params.depthStencil = faces[0].depthStencil;
            }
            if (faces[i]) {
              faces[i](params);
            } else {
              faces[i] = createFBO(params);
            }
          }
          return extend2(reglFramebufferCube, {
            width: radius,
            height: radius,
            color: colorCubes
          });
        }
        function resize(radius_) {
          var i;
          var radius = radius_ | 0;
          check$1(radius > 0 && radius <= limits.maxCubeMapSize, "invalid radius for cube fbo");
          if (radius === reglFramebufferCube.width) {
            return reglFramebufferCube;
          }
          var colors2 = reglFramebufferCube.color;
          for (i = 0; i < colors2.length; ++i) {
            colors2[i].resize(radius);
          }
          for (i = 0; i < 6; ++i) {
            faces[i].resize(radius);
          }
          reglFramebufferCube.width = reglFramebufferCube.height = radius;
          return reglFramebufferCube;
        }
        reglFramebufferCube(options);
        return extend2(reglFramebufferCube, {
          faces,
          resize,
          _reglType: "framebufferCube",
          destroy: function() {
            faces.forEach(function(f) {
              f.destroy();
            });
          }
        });
      }
      function restoreFramebuffers() {
        framebufferState.cur = null;
        framebufferState.next = null;
        framebufferState.dirty = true;
        values(framebufferSet).forEach(function(fb) {
          fb.framebuffer = gl.createFramebuffer();
          updateFramebuffer(fb);
        });
      }
      return extend2(framebufferState, {
        getFramebuffer: function(object2) {
          if (typeof object2 === "function" && object2._reglType === "framebuffer") {
            var fbo = object2._framebuffer;
            if (fbo instanceof REGLFramebuffer) {
              return fbo;
            }
          }
          return null;
        },
        create: createFBO,
        createCube: createCubeFBO,
        clear: function() {
          values(framebufferSet).forEach(destroy);
        },
        restore: restoreFramebuffers
      });
    }
    var GL_FLOAT$6 = 5126;
    var GL_ARRAY_BUFFER$1 = 34962;
    var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;
    var VAO_OPTIONS = [
      "attributes",
      "elements",
      "offset",
      "count",
      "primitive",
      "instances"
    ];
    function AttributeRecord() {
      this.state = 0;
      this.x = 0;
      this.y = 0;
      this.z = 0;
      this.w = 0;
      this.buffer = null;
      this.size = 0;
      this.normalized = false;
      this.type = GL_FLOAT$6;
      this.offset = 0;
      this.stride = 0;
      this.divisor = 0;
    }
    function wrapAttributeState(gl, extensions, limits, stats2, bufferState, elementState, drawState) {
      var NUM_ATTRIBUTES = limits.maxAttributes;
      var attributeBindings = new Array(NUM_ATTRIBUTES);
      for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
        attributeBindings[i] = new AttributeRecord();
      }
      var vaoCount = 0;
      var vaoSet = {};
      var state = {
        Record: AttributeRecord,
        scope: {},
        state: attributeBindings,
        currentVAO: null,
        targetVAO: null,
        restore: extVAO() ? restoreVAO : function() {
        },
        createVAO,
        getVAO,
        destroyBuffer,
        setVAO: extVAO() ? setVAOEXT : setVAOEmulated,
        clear: extVAO() ? destroyVAOEXT : function() {
        }
      };
      function destroyBuffer(buffer2) {
        for (var i2 = 0; i2 < attributeBindings.length; ++i2) {
          var record = attributeBindings[i2];
          if (record.buffer === buffer2) {
            gl.disableVertexAttribArray(i2);
            record.buffer = null;
          }
        }
      }
      function extVAO() {
        return extensions.oes_vertex_array_object;
      }
      function extInstanced() {
        return extensions.angle_instanced_arrays;
      }
      function getVAO(vao) {
        if (typeof vao === "function" && vao._vao) {
          return vao._vao;
        }
        return null;
      }
      function setVAOEXT(vao) {
        if (vao === state.currentVAO) {
          return;
        }
        var ext = extVAO();
        if (vao) {
          ext.bindVertexArrayOES(vao.vao);
        } else {
          ext.bindVertexArrayOES(null);
        }
        state.currentVAO = vao;
      }
      function setVAOEmulated(vao) {
        if (vao === state.currentVAO) {
          return;
        }
        if (vao) {
          vao.bindAttrs();
        } else {
          var exti = extInstanced();
          for (var i2 = 0; i2 < attributeBindings.length; ++i2) {
            var binding = attributeBindings[i2];
            if (binding.buffer) {
              gl.enableVertexAttribArray(i2);
              binding.buffer.bind();
              gl.vertexAttribPointer(i2, binding.size, binding.type, binding.normalized, binding.stride, binding.offfset);
              if (exti && binding.divisor) {
                exti.vertexAttribDivisorANGLE(i2, binding.divisor);
              }
            } else {
              gl.disableVertexAttribArray(i2);
              gl.vertexAttrib4f(i2, binding.x, binding.y, binding.z, binding.w);
            }
          }
          if (drawState.elements) {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, drawState.elements.buffer.buffer);
          } else {
            gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
          }
        }
        state.currentVAO = vao;
      }
      function destroyVAOEXT() {
        values(vaoSet).forEach(function(vao) {
          vao.destroy();
        });
      }
      function REGLVAO() {
        this.id = ++vaoCount;
        this.attributes = [];
        this.elements = null;
        this.ownsElements = false;
        this.count = 0;
        this.offset = 0;
        this.instances = -1;
        this.primitive = 4;
        var extension = extVAO();
        if (extension) {
          this.vao = extension.createVertexArrayOES();
        } else {
          this.vao = null;
        }
        vaoSet[this.id] = this;
        this.buffers = [];
      }
      REGLVAO.prototype.bindAttrs = function() {
        var exti = extInstanced();
        var attributes = this.attributes;
        for (var i2 = 0; i2 < attributes.length; ++i2) {
          var attr = attributes[i2];
          if (attr.buffer) {
            gl.enableVertexAttribArray(i2);
            gl.bindBuffer(GL_ARRAY_BUFFER$1, attr.buffer.buffer);
            gl.vertexAttribPointer(i2, attr.size, attr.type, attr.normalized, attr.stride, attr.offset);
            if (exti && attr.divisor) {
              exti.vertexAttribDivisorANGLE(i2, attr.divisor);
            }
          } else {
            gl.disableVertexAttribArray(i2);
            gl.vertexAttrib4f(i2, attr.x, attr.y, attr.z, attr.w);
          }
        }
        for (var j = attributes.length; j < NUM_ATTRIBUTES; ++j) {
          gl.disableVertexAttribArray(j);
        }
        var elements = elementState.getElements(this.elements);
        if (elements) {
          gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, elements.buffer.buffer);
        } else {
          gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER$1, null);
        }
      };
      REGLVAO.prototype.refresh = function() {
        var ext = extVAO();
        if (ext) {
          ext.bindVertexArrayOES(this.vao);
          this.bindAttrs();
          state.currentVAO = null;
          ext.bindVertexArrayOES(null);
        }
      };
      REGLVAO.prototype.destroy = function() {
        if (this.vao) {
          var extension = extVAO();
          if (this === state.currentVAO) {
            state.currentVAO = null;
            extension.bindVertexArrayOES(null);
          }
          extension.deleteVertexArrayOES(this.vao);
          this.vao = null;
        }
        if (this.ownsElements) {
          this.elements.destroy();
          this.elements = null;
          this.ownsElements = false;
        }
        if (vaoSet[this.id]) {
          delete vaoSet[this.id];
          stats2.vaoCount -= 1;
        }
      };
      function restoreVAO() {
        var ext = extVAO();
        if (ext) {
          values(vaoSet).forEach(function(vao) {
            vao.refresh();
          });
        }
      }
      function createVAO(_attr) {
        var vao = new REGLVAO();
        stats2.vaoCount += 1;
        function updateVAO(options) {
          var attributes;
          if (Array.isArray(options)) {
            attributes = options;
            if (vao.elements && vao.ownsElements) {
              vao.elements.destroy();
            }
            vao.elements = null;
            vao.ownsElements = false;
            vao.offset = 0;
            vao.count = 0;
            vao.instances = -1;
            vao.primitive = 4;
          } else {
            check$1(typeof options === "object", "invalid arguments for create vao");
            check$1("attributes" in options, "must specify attributes for vao");
            if (options.elements) {
              var elements = options.elements;
              if (vao.ownsElements) {
                if (typeof elements === "function" && elements._reglType === "elements") {
                  vao.elements.destroy();
                  vao.ownsElements = false;
                } else {
                  vao.elements(elements);
                  vao.ownsElements = false;
                }
              } else if (elementState.getElements(options.elements)) {
                vao.elements = options.elements;
                vao.ownsElements = false;
              } else {
                vao.elements = elementState.create(options.elements);
                vao.ownsElements = true;
              }
            } else {
              vao.elements = null;
              vao.ownsElements = false;
            }
            attributes = options.attributes;
            vao.offset = 0;
            vao.count = -1;
            vao.instances = -1;
            vao.primitive = 4;
            if (vao.elements) {
              vao.count = vao.elements._elements.vertCount;
              vao.primitive = vao.elements._elements.primType;
            }
            if ("offset" in options) {
              vao.offset = options.offset | 0;
            }
            if ("count" in options) {
              vao.count = options.count | 0;
            }
            if ("instances" in options) {
              vao.instances = options.instances | 0;
            }
            if ("primitive" in options) {
              check$1(options.primitive in primTypes, "bad primitive type: " + options.primitive);
              vao.primitive = primTypes[options.primitive];
            }
            check$1.optional(() => {
              var keys = Object.keys(options);
              for (var i3 = 0; i3 < keys.length; ++i3) {
                check$1(VAO_OPTIONS.indexOf(keys[i3]) >= 0, 'invalid option for vao: "' + keys[i3] + '" valid options are ' + VAO_OPTIONS);
              }
            });
            check$1(Array.isArray(attributes), "attributes must be an array");
          }
          check$1(attributes.length < NUM_ATTRIBUTES, "too many attributes");
          check$1(attributes.length > 0, "must specify at least one attribute");
          var bufUpdated = {};
          var nattributes = vao.attributes;
          nattributes.length = attributes.length;
          for (var i2 = 0; i2 < attributes.length; ++i2) {
            var spec = attributes[i2];
            var rec = nattributes[i2] = new AttributeRecord();
            var data2 = spec.data || spec;
            if (Array.isArray(data2) || isTypedArray2(data2) || isNDArrayLike(data2)) {
              var buf;
              if (vao.buffers[i2]) {
                buf = vao.buffers[i2];
                if (isTypedArray2(data2) && buf._buffer.byteLength >= data2.byteLength) {
                  buf.subdata(data2);
                } else {
                  buf.destroy();
                  vao.buffers[i2] = null;
                }
              }
              if (!vao.buffers[i2]) {
                buf = vao.buffers[i2] = bufferState.create(spec, GL_ARRAY_BUFFER$1, false, true);
              }
              rec.buffer = bufferState.getBuffer(buf);
              rec.size = rec.buffer.dimension | 0;
              rec.normalized = false;
              rec.type = rec.buffer.dtype;
              rec.offset = 0;
              rec.stride = 0;
              rec.divisor = 0;
              rec.state = 1;
              bufUpdated[i2] = 1;
            } else if (bufferState.getBuffer(spec)) {
              rec.buffer = bufferState.getBuffer(spec);
              rec.size = rec.buffer.dimension | 0;
              rec.normalized = false;
              rec.type = rec.buffer.dtype;
              rec.offset = 0;
              rec.stride = 0;
              rec.divisor = 0;
              rec.state = 1;
            } else if (bufferState.getBuffer(spec.buffer)) {
              rec.buffer = bufferState.getBuffer(spec.buffer);
              rec.size = (+spec.size || rec.buffer.dimension) | 0;
              rec.normalized = !!spec.normalized || false;
              if ("type" in spec) {
                check$1.parameter(spec.type, glTypes, "invalid buffer type");
                rec.type = glTypes[spec.type];
              } else {
                rec.type = rec.buffer.dtype;
              }
              rec.offset = (spec.offset || 0) | 0;
              rec.stride = (spec.stride || 0) | 0;
              rec.divisor = (spec.divisor || 0) | 0;
              rec.state = 1;
              check$1(rec.size >= 1 && rec.size <= 4, "size must be between 1 and 4");
              check$1(rec.offset >= 0, "invalid offset");
              check$1(rec.stride >= 0 && rec.stride <= 255, "stride must be between 0 and 255");
              check$1(rec.divisor >= 0, "divisor must be positive");
              check$1(!rec.divisor || !!extensions.angle_instanced_arrays, "ANGLE_instanced_arrays must be enabled to use divisor");
            } else if ("x" in spec) {
              check$1(i2 > 0, "first attribute must not be a constant");
              rec.x = +spec.x || 0;
              rec.y = +spec.y || 0;
              rec.z = +spec.z || 0;
              rec.w = +spec.w || 0;
              rec.state = 2;
            } else {
              check$1(false, "invalid attribute spec for location " + i2);
            }
          }
          for (var j = 0; j < vao.buffers.length; ++j) {
            if (!bufUpdated[j] && vao.buffers[j]) {
              vao.buffers[j].destroy();
              vao.buffers[j] = null;
            }
          }
          vao.refresh();
          return updateVAO;
        }
        updateVAO.destroy = function() {
          for (var j = 0; j < vao.buffers.length; ++j) {
            if (vao.buffers[j]) {
              vao.buffers[j].destroy();
            }
          }
          vao.buffers.length = 0;
          if (vao.ownsElements) {
            vao.elements.destroy();
            vao.elements = null;
            vao.ownsElements = false;
          }
          vao.destroy();
        };
        updateVAO._vao = vao;
        updateVAO._reglType = "vao";
        return updateVAO(_attr);
      }
      return state;
    }
    var GL_FRAGMENT_SHADER = 35632;
    var GL_VERTEX_SHADER = 35633;
    var GL_ACTIVE_UNIFORMS = 35718;
    var GL_ACTIVE_ATTRIBUTES = 35721;
    function wrapShaderState(gl, stringStore, stats2, config) {
      var fragShaders = {};
      var vertShaders = {};
      function ActiveInfo(name, id2, location, info) {
        this.name = name;
        this.id = id2;
        this.location = location;
        this.info = info;
      }
      function insertActiveInfo(list2, info) {
        for (var i = 0; i < list2.length; ++i) {
          if (list2[i].id === info.id) {
            list2[i].location = info.location;
            return;
          }
        }
        list2.push(info);
      }
      function getShader(type2, id2, command) {
        var cache = type2 === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
        var shader = cache[id2];
        if (!shader) {
          var source = stringStore.str(id2);
          shader = gl.createShader(type2);
          gl.shaderSource(shader, source);
          gl.compileShader(shader);
          check$1.shaderError(gl, shader, source, type2, command);
          cache[id2] = shader;
        }
        return shader;
      }
      var programCache = {};
      var programList = [];
      var PROGRAM_COUNTER = 0;
      function REGLProgram(fragId, vertId) {
        this.id = PROGRAM_COUNTER++;
        this.fragId = fragId;
        this.vertId = vertId;
        this.program = null;
        this.uniforms = [];
        this.attributes = [];
        this.refCount = 1;
        if (config.profile) {
          this.stats = {
            uniformsCount: 0,
            attributesCount: 0
          };
        }
      }
      function linkProgram(desc, command, attributeLocations) {
        var i, info;
        var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
        var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);
        var program = desc.program = gl.createProgram();
        gl.attachShader(program, fragShader);
        gl.attachShader(program, vertShader);
        if (attributeLocations) {
          for (i = 0; i < attributeLocations.length; ++i) {
            var binding = attributeLocations[i];
            gl.bindAttribLocation(program, binding[0], binding[1]);
          }
        }
        gl.linkProgram(program);
        check$1.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command);
        var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);
        if (config.profile) {
          desc.stats.uniformsCount = numUniforms;
        }
        var uniforms = desc.uniforms;
        for (i = 0; i < numUniforms; ++i) {
          info = gl.getActiveUniform(program, i);
          if (info) {
            if (info.size > 1) {
              for (var j = 0; j < info.size; ++j) {
                var name = info.name.replace("[0]", "[" + j + "]");
                insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));
              }
            }
            var uniName = info.name;
            if (info.size > 1) {
              uniName = uniName.replace("[0]", "");
            }
            insertActiveInfo(uniforms, new ActiveInfo(uniName, stringStore.id(uniName), gl.getUniformLocation(program, uniName), info));
          }
        }
        var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);
        if (config.profile) {
          desc.stats.attributesCount = numAttributes;
        }
        var attributes = desc.attributes;
        for (i = 0; i < numAttributes; ++i) {
          info = gl.getActiveAttrib(program, i);
          if (info) {
            insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));
          }
        }
      }
      if (config.profile) {
        stats2.getMaxUniformsCount = function() {
          var m = 0;
          programList.forEach(function(desc) {
            if (desc.stats.uniformsCount > m) {
              m = desc.stats.uniformsCount;
            }
          });
          return m;
        };
        stats2.getMaxAttributesCount = function() {
          var m = 0;
          programList.forEach(function(desc) {
            if (desc.stats.attributesCount > m) {
              m = desc.stats.attributesCount;
            }
          });
          return m;
        };
      }
      function restoreShaders() {
        fragShaders = {};
        vertShaders = {};
        for (var i = 0; i < programList.length; ++i) {
          linkProgram(programList[i], null, programList[i].attributes.map(function(info) {
            return [info.location, info.name];
          }));
        }
      }
      return {
        clear: function() {
          var deleteShader = gl.deleteShader.bind(gl);
          values(fragShaders).forEach(deleteShader);
          fragShaders = {};
          values(vertShaders).forEach(deleteShader);
          vertShaders = {};
          programList.forEach(function(desc) {
            gl.deleteProgram(desc.program);
          });
          programList.length = 0;
          programCache = {};
          stats2.shaderCount = 0;
        },
        program: function(vertId, fragId, command, attribLocations) {
          check$1.command(vertId >= 0, "missing vertex shader", command);
          check$1.command(fragId >= 0, "missing fragment shader", command);
          var cache = programCache[fragId];
          if (!cache) {
            cache = programCache[fragId] = {};
          }
          var prevProgram = cache[vertId];
          if (prevProgram) {
            prevProgram.refCount++;
            if (!attribLocations) {
              return prevProgram;
            }
          }
          var program = new REGLProgram(fragId, vertId);
          stats2.shaderCount++;
          linkProgram(program, command, attribLocations);
          if (!prevProgram) {
            cache[vertId] = program;
          }
          programList.push(program);
          return extend2(program, {
            destroy: function() {
              program.refCount--;
              if (program.refCount <= 0) {
                gl.deleteProgram(program.program);
                var idx = programList.indexOf(program);
                programList.splice(idx, 1);
                stats2.shaderCount--;
              }
              if (cache[program.vertId].refCount <= 0) {
                gl.deleteShader(vertShaders[program.vertId]);
                delete vertShaders[program.vertId];
                delete programCache[program.fragId][program.vertId];
              }
              if (!Object.keys(programCache[program.fragId]).length) {
                gl.deleteShader(fragShaders[program.fragId]);
                delete fragShaders[program.fragId];
                delete programCache[program.fragId];
              }
            }
          });
        },
        restore: restoreShaders,
        shader: getShader,
        frag: -1,
        vert: -1
      };
    }
    var GL_RGBA$3 = 6408;
    var GL_UNSIGNED_BYTE$7 = 5121;
    var GL_PACK_ALIGNMENT = 3333;
    var GL_FLOAT$7 = 5126;
    function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {
      function readPixelsImpl(input) {
        var type2;
        if (framebufferState.next === null) {
          check$1(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
          type2 = GL_UNSIGNED_BYTE$7;
        } else {
          check$1(framebufferState.next.colorAttachments[0].texture !== null, "You cannot read from a renderbuffer");
          type2 = framebufferState.next.colorAttachments[0].texture._texture.type;
          check$1.optional(function() {
            if (extensions.oes_texture_float) {
              check$1(type2 === GL_UNSIGNED_BYTE$7 || type2 === GL_FLOAT$7, "Reading from a framebuffer is only allowed for the types 'uint8' and 'float'");
              if (type2 === GL_FLOAT$7) {
                check$1(limits.readFloat, "Reading 'float' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float");
              }
            } else {
              check$1(type2 === GL_UNSIGNED_BYTE$7, "Reading from a framebuffer is only allowed for the type 'uint8'");
            }
          });
        }
        var x = 0;
        var y = 0;
        var width = context.framebufferWidth;
        var height = context.framebufferHeight;
        var data2 = null;
        if (isTypedArray2(input)) {
          data2 = input;
        } else if (input) {
          check$1.type(input, "object", "invalid arguments to regl.read()");
          x = input.x | 0;
          y = input.y | 0;
          check$1(x >= 0 && x < context.framebufferWidth, "invalid x offset for regl.read");
          check$1(y >= 0 && y < context.framebufferHeight, "invalid y offset for regl.read");
          width = (input.width || context.framebufferWidth - x) | 0;
          height = (input.height || context.framebufferHeight - y) | 0;
          data2 = input.data || null;
        }
        if (data2) {
          if (type2 === GL_UNSIGNED_BYTE$7) {
            check$1(data2 instanceof Uint8Array, "buffer must be 'Uint8Array' when reading from a framebuffer of type 'uint8'");
          } else if (type2 === GL_FLOAT$7) {
            check$1(data2 instanceof Float32Array, "buffer must be 'Float32Array' when reading from a framebuffer of type 'float'");
          }
        }
        check$1(width > 0 && width + x <= context.framebufferWidth, "invalid width for read pixels");
        check$1(height > 0 && height + y <= context.framebufferHeight, "invalid height for read pixels");
        reglPoll();
        var size = width * height * 4;
        if (!data2) {
          if (type2 === GL_UNSIGNED_BYTE$7) {
            data2 = new Uint8Array(size);
          } else if (type2 === GL_FLOAT$7) {
            data2 = data2 || new Float32Array(size);
          }
        }
        check$1.isTypedArray(data2, "data buffer for regl.read() must be a typedarray");
        check$1(data2.byteLength >= size, "data buffer for regl.read() too small");
        gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
        gl.readPixels(x, y, width, height, GL_RGBA$3, type2, data2);
        return data2;
      }
      function readPixelsFBO(options) {
        var result;
        framebufferState.setFBO({
          framebuffer: options.framebuffer
        }, function() {
          result = readPixelsImpl(options);
        });
        return result;
      }
      function readPixels(options) {
        if (!options || !("framebuffer" in options)) {
          return readPixelsImpl(options);
        } else {
          return readPixelsFBO(options);
        }
      }
      return readPixels;
    }
    function slice(x) {
      return Array.prototype.slice.call(x);
    }
    function join(x) {
      return slice(x).join("");
    }
    function createEnvironment() {
      var varCounter = 0;
      var linkedNames = [];
      var linkedValues = [];
      function link2(value) {
        for (var i = 0; i < linkedValues.length; ++i) {
          if (linkedValues[i] === value) {
            return linkedNames[i];
          }
        }
        var name = "g" + varCounter++;
        linkedNames.push(name);
        linkedValues.push(value);
        return name;
      }
      function block() {
        var code = [];
        function push() {
          code.push.apply(code, slice(arguments));
        }
        var vars = [];
        function def() {
          var name = "v" + varCounter++;
          vars.push(name);
          if (arguments.length > 0) {
            code.push(name, "=");
            code.push.apply(code, slice(arguments));
            code.push(";");
          }
          return name;
        }
        return extend2(push, {
          def,
          toString: function() {
            return join([
              vars.length > 0 ? "var " + vars.join(",") + ";" : "",
              join(code)
            ]);
          }
        });
      }
      function scope() {
        var entry = block();
        var exit = block();
        var entryToString = entry.toString;
        var exitToString = exit.toString;
        function save(object2, prop) {
          exit(object2, prop, "=", entry.def(object2, prop), ";");
        }
        return extend2(function() {
          entry.apply(entry, slice(arguments));
        }, {
          def: entry.def,
          entry,
          exit,
          save,
          set: function(object2, prop, value) {
            save(object2, prop);
            entry(object2, prop, "=", value, ";");
          },
          toString: function() {
            return entryToString() + exitToString();
          }
        });
      }
      function conditional() {
        var pred = join(arguments);
        var thenBlock = scope();
        var elseBlock = scope();
        var thenToString = thenBlock.toString;
        var elseToString = elseBlock.toString;
        return extend2(thenBlock, {
          then: function() {
            thenBlock.apply(thenBlock, slice(arguments));
            return this;
          },
          else: function() {
            elseBlock.apply(elseBlock, slice(arguments));
            return this;
          },
          toString: function() {
            var elseClause = elseToString();
            if (elseClause) {
              elseClause = "else{" + elseClause + "}";
            }
            return join([
              "if(",
              pred,
              "){",
              thenToString(),
              "}",
              elseClause
            ]);
          }
        });
      }
      var globalBlock = block();
      var procedures = {};
      function proc(name, count) {
        var args2 = [];
        function arg() {
          var name2 = "a" + args2.length;
          args2.push(name2);
          return name2;
        }
        count = count || 0;
        for (var i = 0; i < count; ++i) {
          arg();
        }
        var body = scope();
        var bodyToString = body.toString;
        var result = procedures[name] = extend2(body, {
          arg,
          toString: function() {
            return join([
              "function(",
              args2.join(),
              "){",
              bodyToString(),
              "}"
            ]);
          }
        });
        return result;
      }
      function compile() {
        var code = [
          '"use strict";',
          globalBlock,
          "return {"
        ];
        Object.keys(procedures).forEach(function(name) {
          code.push('"', name, '":', procedures[name].toString(), ",");
        });
        code.push("}");
        var src = join(code).replace(/;/g, ";\n").replace(/}/g, "}\n").replace(/{/g, "{\n");
        var proc2 = Function.apply(null, linkedNames.concat(src));
        return proc2.apply(null, linkedValues);
      }
      return {
        global: globalBlock,
        link: link2,
        block,
        proc,
        scope,
        cond: conditional,
        compile
      };
    }
    var CUTE_COMPONENTS = "xyzw".split("");
    var GL_UNSIGNED_BYTE$8 = 5121;
    var ATTRIB_STATE_POINTER = 1;
    var ATTRIB_STATE_CONSTANT = 2;
    var DYN_FUNC$1 = 0;
    var DYN_PROP$1 = 1;
    var DYN_CONTEXT$1 = 2;
    var DYN_STATE$1 = 3;
    var DYN_THUNK = 4;
    var DYN_CONSTANT$1 = 5;
    var DYN_ARRAY$1 = 6;
    var S_DITHER = "dither";
    var S_BLEND_ENABLE = "blend.enable";
    var S_BLEND_COLOR = "blend.color";
    var S_BLEND_EQUATION = "blend.equation";
    var S_BLEND_FUNC = "blend.func";
    var S_DEPTH_ENABLE = "depth.enable";
    var S_DEPTH_FUNC = "depth.func";
    var S_DEPTH_RANGE = "depth.range";
    var S_DEPTH_MASK = "depth.mask";
    var S_COLOR_MASK = "colorMask";
    var S_CULL_ENABLE = "cull.enable";
    var S_CULL_FACE = "cull.face";
    var S_FRONT_FACE = "frontFace";
    var S_LINE_WIDTH = "lineWidth";
    var S_POLYGON_OFFSET_ENABLE = "polygonOffset.enable";
    var S_POLYGON_OFFSET_OFFSET = "polygonOffset.offset";
    var S_SAMPLE_ALPHA = "sample.alpha";
    var S_SAMPLE_ENABLE = "sample.enable";
    var S_SAMPLE_COVERAGE = "sample.coverage";
    var S_STENCIL_ENABLE = "stencil.enable";
    var S_STENCIL_MASK = "stencil.mask";
    var S_STENCIL_FUNC = "stencil.func";
    var S_STENCIL_OPFRONT = "stencil.opFront";
    var S_STENCIL_OPBACK = "stencil.opBack";
    var S_SCISSOR_ENABLE = "scissor.enable";
    var S_SCISSOR_BOX = "scissor.box";
    var S_VIEWPORT = "viewport";
    var S_PROFILE = "profile";
    var S_FRAMEBUFFER = "framebuffer";
    var S_VERT = "vert";
    var S_FRAG = "frag";
    var S_ELEMENTS = "elements";
    var S_PRIMITIVE = "primitive";
    var S_COUNT = "count";
    var S_OFFSET = "offset";
    var S_INSTANCES = "instances";
    var S_VAO = "vao";
    var SUFFIX_WIDTH = "Width";
    var SUFFIX_HEIGHT = "Height";
    var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
    var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
    var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
    var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
    var S_DRAWINGBUFFER = "drawingBuffer";
    var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
    var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;
    var NESTED_OPTIONS = [
      S_BLEND_FUNC,
      S_BLEND_EQUATION,
      S_STENCIL_FUNC,
      S_STENCIL_OPFRONT,
      S_STENCIL_OPBACK,
      S_SAMPLE_COVERAGE,
      S_VIEWPORT,
      S_SCISSOR_BOX,
      S_POLYGON_OFFSET_OFFSET
    ];
    var GL_ARRAY_BUFFER$2 = 34962;
    var GL_ELEMENT_ARRAY_BUFFER$2 = 34963;
    var GL_FRAGMENT_SHADER$1 = 35632;
    var GL_VERTEX_SHADER$1 = 35633;
    var GL_TEXTURE_2D$3 = 3553;
    var GL_TEXTURE_CUBE_MAP$2 = 34067;
    var GL_CULL_FACE = 2884;
    var GL_BLEND = 3042;
    var GL_DITHER = 3024;
    var GL_STENCIL_TEST = 2960;
    var GL_DEPTH_TEST = 2929;
    var GL_SCISSOR_TEST = 3089;
    var GL_POLYGON_OFFSET_FILL = 32823;
    var GL_SAMPLE_ALPHA_TO_COVERAGE = 32926;
    var GL_SAMPLE_COVERAGE = 32928;
    var GL_FLOAT$8 = 5126;
    var GL_FLOAT_VEC2 = 35664;
    var GL_FLOAT_VEC3 = 35665;
    var GL_FLOAT_VEC4 = 35666;
    var GL_INT$3 = 5124;
    var GL_INT_VEC2 = 35667;
    var GL_INT_VEC3 = 35668;
    var GL_INT_VEC4 = 35669;
    var GL_BOOL = 35670;
    var GL_BOOL_VEC2 = 35671;
    var GL_BOOL_VEC3 = 35672;
    var GL_BOOL_VEC4 = 35673;
    var GL_FLOAT_MAT2 = 35674;
    var GL_FLOAT_MAT3 = 35675;
    var GL_FLOAT_MAT4 = 35676;
    var GL_SAMPLER_2D = 35678;
    var GL_SAMPLER_CUBE = 35680;
    var GL_TRIANGLES$1 = 4;
    var GL_FRONT = 1028;
    var GL_BACK = 1029;
    var GL_CW = 2304;
    var GL_CCW = 2305;
    var GL_MIN_EXT = 32775;
    var GL_MAX_EXT = 32776;
    var GL_ALWAYS = 519;
    var GL_KEEP = 7680;
    var GL_ZERO = 0;
    var GL_ONE = 1;
    var GL_FUNC_ADD = 32774;
    var GL_LESS = 513;
    var GL_FRAMEBUFFER$2 = 36160;
    var GL_COLOR_ATTACHMENT0$2 = 36064;
    var blendFuncs = {
      "0": 0,
      "1": 1,
      "zero": 0,
      "one": 1,
      "src color": 768,
      "one minus src color": 769,
      "src alpha": 770,
      "one minus src alpha": 771,
      "dst color": 774,
      "one minus dst color": 775,
      "dst alpha": 772,
      "one minus dst alpha": 773,
      "constant color": 32769,
      "one minus constant color": 32770,
      "constant alpha": 32771,
      "one minus constant alpha": 32772,
      "src alpha saturate": 776
    };
    var invalidBlendCombinations = [
      "constant color, constant alpha",
      "one minus constant color, constant alpha",
      "constant color, one minus constant alpha",
      "one minus constant color, one minus constant alpha",
      "constant alpha, constant color",
      "constant alpha, one minus constant color",
      "one minus constant alpha, constant color",
      "one minus constant alpha, one minus constant color"
    ];
    var compareFuncs = {
      "never": 512,
      "less": 513,
      "<": 513,
      "equal": 514,
      "=": 514,
      "==": 514,
      "===": 514,
      "lequal": 515,
      "<=": 515,
      "greater": 516,
      ">": 516,
      "notequal": 517,
      "!=": 517,
      "!==": 517,
      "gequal": 518,
      ">=": 518,
      "always": 519
    };
    var stencilOps = {
      "0": 0,
      "zero": 0,
      "keep": 7680,
      "replace": 7681,
      "increment": 7682,
      "decrement": 7683,
      "increment wrap": 34055,
      "decrement wrap": 34056,
      "invert": 5386
    };
    var shaderType = {
      "frag": GL_FRAGMENT_SHADER$1,
      "vert": GL_VERTEX_SHADER$1
    };
    var orientationType = {
      "cw": GL_CW,
      "ccw": GL_CCW
    };
    function isBufferArgs(x) {
      return Array.isArray(x) || isTypedArray2(x) || isNDArrayLike(x);
    }
    function sortState(state) {
      return state.sort(function(a, b) {
        if (a === S_VIEWPORT) {
          return -1;
        } else if (b === S_VIEWPORT) {
          return 1;
        }
        return a < b ? -1 : 1;
      });
    }
    function Declaration(thisDep, contextDep, propDep, append) {
      this.thisDep = thisDep;
      this.contextDep = contextDep;
      this.propDep = propDep;
      this.append = append;
    }
    function isStatic(decl) {
      return decl && !(decl.thisDep || decl.contextDep || decl.propDep);
    }
    function createStaticDecl(append) {
      return new Declaration(false, false, false, append);
    }
    function createDynamicDecl(dyn, append) {
      var type2 = dyn.type;
      if (type2 === DYN_FUNC$1) {
        var numArgs = dyn.data.length;
        return new Declaration(true, numArgs >= 1, numArgs >= 2, append);
      } else if (type2 === DYN_THUNK) {
        var data2 = dyn.data;
        return new Declaration(data2.thisDep, data2.contextDep, data2.propDep, append);
      } else if (type2 === DYN_CONSTANT$1) {
        return new Declaration(false, false, false, append);
      } else if (type2 === DYN_ARRAY$1) {
        var thisDep = false;
        var contextDep = false;
        var propDep = false;
        for (var i = 0; i < dyn.data.length; ++i) {
          var subDyn = dyn.data[i];
          if (subDyn.type === DYN_PROP$1) {
            propDep = true;
          } else if (subDyn.type === DYN_CONTEXT$1) {
            contextDep = true;
          } else if (subDyn.type === DYN_STATE$1) {
            thisDep = true;
          } else if (subDyn.type === DYN_FUNC$1) {
            thisDep = true;
            var subArgs = subDyn.data;
            if (subArgs >= 1) {
              contextDep = true;
            }
            if (subArgs >= 2) {
              propDep = true;
            }
          } else if (subDyn.type === DYN_THUNK) {
            thisDep = thisDep || subDyn.data.thisDep;
            contextDep = contextDep || subDyn.data.contextDep;
            propDep = propDep || subDyn.data.propDep;
          }
        }
        return new Declaration(thisDep, contextDep, propDep, append);
      } else {
        return new Declaration(type2 === DYN_STATE$1, type2 === DYN_CONTEXT$1, type2 === DYN_PROP$1, append);
      }
    }
    var SCOPE_DECL = new Declaration(false, false, false, function() {
    });
    function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer2, config) {
      var AttributeRecord2 = attributeState.Record;
      var blendEquations = {
        "add": 32774,
        "subtract": 32778,
        "reverse subtract": 32779
      };
      if (extensions.ext_blend_minmax) {
        blendEquations.min = GL_MIN_EXT;
        blendEquations.max = GL_MAX_EXT;
      }
      var extInstancing = extensions.angle_instanced_arrays;
      var extDrawBuffers = extensions.webgl_draw_buffers;
      var extVertexArrays = extensions.oes_vertex_array_object;
      var currentState = {
        dirty: true,
        profile: config.profile
      };
      var nextState = {};
      var GL_STATE_NAMES = [];
      var GL_FLAGS = {};
      var GL_VARIABLES = {};
      function propName(name) {
        return name.replace(".", "_");
      }
      function stateFlag(sname, cap, init2) {
        var name = propName(sname);
        GL_STATE_NAMES.push(sname);
        nextState[name] = currentState[name] = !!init2;
        GL_FLAGS[name] = cap;
      }
      function stateVariable(sname, func, init2) {
        var name = propName(sname);
        GL_STATE_NAMES.push(sname);
        if (Array.isArray(init2)) {
          currentState[name] = init2.slice();
          nextState[name] = init2.slice();
        } else {
          currentState[name] = nextState[name] = init2;
        }
        GL_VARIABLES[name] = func;
      }
      stateFlag(S_DITHER, GL_DITHER);
      stateFlag(S_BLEND_ENABLE, GL_BLEND);
      stateVariable(S_BLEND_COLOR, "blendColor", [0, 0, 0, 0]);
      stateVariable(S_BLEND_EQUATION, "blendEquationSeparate", [GL_FUNC_ADD, GL_FUNC_ADD]);
      stateVariable(S_BLEND_FUNC, "blendFuncSeparate", [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);
      stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
      stateVariable(S_DEPTH_FUNC, "depthFunc", GL_LESS);
      stateVariable(S_DEPTH_RANGE, "depthRange", [0, 1]);
      stateVariable(S_DEPTH_MASK, "depthMask", true);
      stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);
      stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
      stateVariable(S_CULL_FACE, "cullFace", GL_BACK);
      stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);
      stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);
      stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
      stateVariable(S_POLYGON_OFFSET_OFFSET, "polygonOffset", [0, 0]);
      stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
      stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
      stateVariable(S_SAMPLE_COVERAGE, "sampleCoverage", [1, false]);
      stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
      stateVariable(S_STENCIL_MASK, "stencilMask", -1);
      stateVariable(S_STENCIL_FUNC, "stencilFunc", [GL_ALWAYS, 0, -1]);
      stateVariable(S_STENCIL_OPFRONT, "stencilOpSeparate", [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
      stateVariable(S_STENCIL_OPBACK, "stencilOpSeparate", [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);
      stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
      stateVariable(S_SCISSOR_BOX, "scissor", [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);
      stateVariable(S_VIEWPORT, S_VIEWPORT, [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);
      var sharedState = {
        gl,
        context: contextState,
        strings: stringStore,
        next: nextState,
        current: currentState,
        draw: drawState,
        elements: elementState,
        buffer: bufferState,
        shader: shaderState,
        attributes: attributeState.state,
        vao: attributeState,
        uniforms: uniformState,
        framebuffer: framebufferState,
        extensions,
        timer: timer2,
        isBufferArgs
      };
      var sharedConstants = {
        primTypes,
        compareFuncs,
        blendFuncs,
        blendEquations,
        stencilOps,
        glTypes,
        orientationType
      };
      check$1.optional(function() {
        sharedState.isArrayLike = isArrayLike;
      });
      if (extDrawBuffers) {
        sharedConstants.backBuffer = [GL_BACK];
        sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function(i) {
          if (i === 0) {
            return [0];
          }
          return loop(i, function(j) {
            return GL_COLOR_ATTACHMENT0$2 + j;
          });
        });
      }
      var drawCallCounter = 0;
      function createREGLEnvironment() {
        var env = createEnvironment();
        var link2 = env.link;
        var global2 = env.global;
        env.id = drawCallCounter++;
        env.batchId = "0";
        var SHARED = link2(sharedState);
        var shared = env.shared = {
          props: "a0"
        };
        Object.keys(sharedState).forEach(function(prop) {
          shared[prop] = global2.def(SHARED, ".", prop);
        });
        check$1.optional(function() {
          env.CHECK = link2(check$1);
          env.commandStr = check$1.guessCommand();
          env.command = link2(env.commandStr);
          env.assert = function(block, pred, message2) {
            block("if(!(", pred, "))", this.CHECK, ".commandRaise(", link2(message2), ",", this.command, ");");
          };
          sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
        });
        var nextVars = env.next = {};
        var currentVars = env.current = {};
        Object.keys(GL_VARIABLES).forEach(function(variable) {
          if (Array.isArray(currentState[variable])) {
            nextVars[variable] = global2.def(shared.next, ".", variable);
            currentVars[variable] = global2.def(shared.current, ".", variable);
          }
        });
        var constants2 = env.constants = {};
        Object.keys(sharedConstants).forEach(function(name) {
          constants2[name] = global2.def(JSON.stringify(sharedConstants[name]));
        });
        env.invoke = function(block, x) {
          switch (x.type) {
            case DYN_FUNC$1:
              var argList = [
                "this",
                shared.context,
                shared.props,
                env.batchId
              ];
              return block.def(link2(x.data), ".call(", argList.slice(0, Math.max(x.data.length + 1, 4)), ")");
            case DYN_PROP$1:
              return block.def(shared.props, x.data);
            case DYN_CONTEXT$1:
              return block.def(shared.context, x.data);
            case DYN_STATE$1:
              return block.def("this", x.data);
            case DYN_THUNK:
              x.data.append(env, block);
              return x.data.ref;
            case DYN_CONSTANT$1:
              return x.data.toString();
            case DYN_ARRAY$1:
              return x.data.map(function(y) {
                return env.invoke(block, y);
              });
          }
        };
        env.attribCache = {};
        var scopeAttribs = {};
        env.scopeAttrib = function(name) {
          var id2 = stringStore.id(name);
          if (id2 in scopeAttribs) {
            return scopeAttribs[id2];
          }
          var binding = attributeState.scope[id2];
          if (!binding) {
            binding = attributeState.scope[id2] = new AttributeRecord2();
          }
          var result = scopeAttribs[id2] = link2(binding);
          return result;
        };
        return env;
      }
      function parseProfile(options) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        var profileEnable;
        if (S_PROFILE in staticOptions) {
          var value = !!staticOptions[S_PROFILE];
          profileEnable = createStaticDecl(function(env, scope) {
            return value;
          });
          profileEnable.enable = value;
        } else if (S_PROFILE in dynamicOptions) {
          var dyn = dynamicOptions[S_PROFILE];
          profileEnable = createDynamicDecl(dyn, function(env, scope) {
            return env.invoke(scope, dyn);
          });
        }
        return profileEnable;
      }
      function parseFramebuffer(options, env) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        if (S_FRAMEBUFFER in staticOptions) {
          var framebuffer = staticOptions[S_FRAMEBUFFER];
          if (framebuffer) {
            framebuffer = framebufferState.getFramebuffer(framebuffer);
            check$1.command(framebuffer, "invalid framebuffer object");
            return createStaticDecl(function(env2, block) {
              var FRAMEBUFFER = env2.link(framebuffer);
              var shared = env2.shared;
              block.set(shared.framebuffer, ".next", FRAMEBUFFER);
              var CONTEXT = shared.context;
              block.set(CONTEXT, "." + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + ".width");
              block.set(CONTEXT, "." + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + ".height");
              return FRAMEBUFFER;
            });
          } else {
            return createStaticDecl(function(env2, scope) {
              var shared = env2.shared;
              scope.set(shared.framebuffer, ".next", "null");
              var CONTEXT = shared.context;
              scope.set(CONTEXT, "." + S_FRAMEBUFFER_WIDTH, CONTEXT + "." + S_DRAWINGBUFFER_WIDTH);
              scope.set(CONTEXT, "." + S_FRAMEBUFFER_HEIGHT, CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT);
              return "null";
            });
          }
        } else if (S_FRAMEBUFFER in dynamicOptions) {
          var dyn = dynamicOptions[S_FRAMEBUFFER];
          return createDynamicDecl(dyn, function(env2, scope) {
            var FRAMEBUFFER_FUNC = env2.invoke(scope, dyn);
            var shared = env2.shared;
            var FRAMEBUFFER_STATE = shared.framebuffer;
            var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, ".getFramebuffer(", FRAMEBUFFER_FUNC, ")");
            check$1.optional(function() {
              env2.assert(scope, "!" + FRAMEBUFFER_FUNC + "||" + FRAMEBUFFER, "invalid framebuffer object");
            });
            scope.set(FRAMEBUFFER_STATE, ".next", FRAMEBUFFER);
            var CONTEXT = shared.context;
            scope.set(CONTEXT, "." + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + "?" + FRAMEBUFFER + ".width:" + CONTEXT + "." + S_DRAWINGBUFFER_WIDTH);
            scope.set(CONTEXT, "." + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + "?" + FRAMEBUFFER + ".height:" + CONTEXT + "." + S_DRAWINGBUFFER_HEIGHT);
            return FRAMEBUFFER;
          });
        } else {
          return null;
        }
      }
      function parseViewportScissor(options, framebuffer, env) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        function parseBox(param) {
          if (param in staticOptions) {
            var box = staticOptions[param];
            check$1.commandType(box, "object", "invalid " + param, env.commandStr);
            var isStatic2 = true;
            var x = box.x | 0;
            var y = box.y | 0;
            var w, h;
            if ("width" in box) {
              w = box.width | 0;
              check$1.command(w >= 0, "invalid " + param, env.commandStr);
            } else {
              isStatic2 = false;
            }
            if ("height" in box) {
              h = box.height | 0;
              check$1.command(h >= 0, "invalid " + param, env.commandStr);
            } else {
              isStatic2 = false;
            }
            return new Declaration(!isStatic2 && framebuffer && framebuffer.thisDep, !isStatic2 && framebuffer && framebuffer.contextDep, !isStatic2 && framebuffer && framebuffer.propDep, function(env2, scope) {
              var CONTEXT = env2.shared.context;
              var BOX_W = w;
              if (!("width" in box)) {
                BOX_W = scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH, "-", x);
              }
              var BOX_H = h;
              if (!("height" in box)) {
                BOX_H = scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT, "-", y);
              }
              return [x, y, BOX_W, BOX_H];
            });
          } else if (param in dynamicOptions) {
            var dynBox = dynamicOptions[param];
            var result = createDynamicDecl(dynBox, function(env2, scope) {
              var BOX = env2.invoke(scope, dynBox);
              check$1.optional(function() {
                env2.assert(scope, BOX + "&&typeof " + BOX + '==="object"', "invalid " + param);
              });
              var CONTEXT = env2.shared.context;
              var BOX_X = scope.def(BOX, ".x|0");
              var BOX_Y = scope.def(BOX, ".y|0");
              var BOX_W = scope.def('"width" in ', BOX, "?", BOX, ".width|0:", "(", CONTEXT, ".", S_FRAMEBUFFER_WIDTH, "-", BOX_X, ")");
              var BOX_H = scope.def('"height" in ', BOX, "?", BOX, ".height|0:", "(", CONTEXT, ".", S_FRAMEBUFFER_HEIGHT, "-", BOX_Y, ")");
              check$1.optional(function() {
                env2.assert(scope, BOX_W + ">=0&&" + BOX_H + ">=0", "invalid " + param);
              });
              return [BOX_X, BOX_Y, BOX_W, BOX_H];
            });
            if (framebuffer) {
              result.thisDep = result.thisDep || framebuffer.thisDep;
              result.contextDep = result.contextDep || framebuffer.contextDep;
              result.propDep = result.propDep || framebuffer.propDep;
            }
            return result;
          } else if (framebuffer) {
            return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function(env2, scope) {
              var CONTEXT = env2.shared.context;
              return [
                0,
                0,
                scope.def(CONTEXT, ".", S_FRAMEBUFFER_WIDTH),
                scope.def(CONTEXT, ".", S_FRAMEBUFFER_HEIGHT)
              ];
            });
          } else {
            return null;
          }
        }
        var viewport = parseBox(S_VIEWPORT);
        if (viewport) {
          var prevViewport = viewport;
          viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function(env2, scope) {
            var VIEWPORT = prevViewport.append(env2, scope);
            var CONTEXT = env2.shared.context;
            scope.set(CONTEXT, "." + S_VIEWPORT_WIDTH, VIEWPORT[2]);
            scope.set(CONTEXT, "." + S_VIEWPORT_HEIGHT, VIEWPORT[3]);
            return VIEWPORT;
          });
        }
        return {
          viewport,
          scissor_box: parseBox(S_SCISSOR_BOX)
        };
      }
      function parseAttribLocations(options, attributes) {
        var staticOptions = options.static;
        var staticProgram = typeof staticOptions[S_FRAG] === "string" && typeof staticOptions[S_VERT] === "string";
        if (staticProgram) {
          if (Object.keys(attributes.dynamic).length > 0) {
            return null;
          }
          var staticAttributes = attributes.static;
          var sAttributes = Object.keys(staticAttributes);
          if (sAttributes.length > 0 && typeof staticAttributes[sAttributes[0]] === "number") {
            var bindings = [];
            for (var i = 0; i < sAttributes.length; ++i) {
              check$1(typeof staticAttributes[sAttributes[i]] === "number", "must specify all vertex attribute locations when using vaos");
              bindings.push([staticAttributes[sAttributes[i]] | 0, sAttributes[i]]);
            }
            return bindings;
          }
        }
        return null;
      }
      function parseProgram(options, env, attribLocations) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        function parseShader(name) {
          if (name in staticOptions) {
            var id2 = stringStore.id(staticOptions[name]);
            check$1.optional(function() {
              shaderState.shader(shaderType[name], id2, check$1.guessCommand());
            });
            var result = createStaticDecl(function() {
              return id2;
            });
            result.id = id2;
            return result;
          } else if (name in dynamicOptions) {
            var dyn = dynamicOptions[name];
            return createDynamicDecl(dyn, function(env2, scope) {
              var str = env2.invoke(scope, dyn);
              var id3 = scope.def(env2.shared.strings, ".id(", str, ")");
              check$1.optional(function() {
                scope(env2.shared.shader, ".shader(", shaderType[name], ",", id3, ",", env2.command, ");");
              });
              return id3;
            });
          }
          return null;
        }
        var frag = parseShader(S_FRAG);
        var vert = parseShader(S_VERT);
        var program = null;
        var progVar;
        if (isStatic(frag) && isStatic(vert)) {
          program = shaderState.program(vert.id, frag.id, null, attribLocations);
          progVar = createStaticDecl(function(env2, scope) {
            return env2.link(program);
          });
        } else {
          progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function(env2, scope) {
            var SHADER_STATE = env2.shared.shader;
            var fragId;
            if (frag) {
              fragId = frag.append(env2, scope);
            } else {
              fragId = scope.def(SHADER_STATE, ".", S_FRAG);
            }
            var vertId;
            if (vert) {
              vertId = vert.append(env2, scope);
            } else {
              vertId = scope.def(SHADER_STATE, ".", S_VERT);
            }
            var progDef = SHADER_STATE + ".program(" + vertId + "," + fragId;
            check$1.optional(function() {
              progDef += "," + env2.command;
            });
            return scope.def(progDef + ")");
          });
        }
        return {
          frag,
          vert,
          progVar,
          program
        };
      }
      function parseDraw(options, env) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        var staticDraw = {};
        var vaoActive = false;
        function parseVAO() {
          if (S_VAO in staticOptions) {
            var vao2 = staticOptions[S_VAO];
            if (vao2 !== null && attributeState.getVAO(vao2) === null) {
              vao2 = attributeState.createVAO(vao2);
            }
            vaoActive = true;
            staticDraw.vao = vao2;
            return createStaticDecl(function(env2) {
              var vaoRef = attributeState.getVAO(vao2);
              if (vaoRef) {
                return env2.link(vaoRef);
              } else {
                return "null";
              }
            });
          } else if (S_VAO in dynamicOptions) {
            vaoActive = true;
            var dyn = dynamicOptions[S_VAO];
            return createDynamicDecl(dyn, function(env2, scope) {
              var vaoRef = env2.invoke(scope, dyn);
              return scope.def(env2.shared.vao + ".getVAO(" + vaoRef + ")");
            });
          }
          return null;
        }
        var vao = parseVAO();
        var elementsActive = false;
        function parseElements() {
          if (S_ELEMENTS in staticOptions) {
            var elements2 = staticOptions[S_ELEMENTS];
            staticDraw.elements = elements2;
            if (isBufferArgs(elements2)) {
              var e = staticDraw.elements = elementState.create(elements2, true);
              elements2 = elementState.getElements(e);
              elementsActive = true;
            } else if (elements2) {
              elements2 = elementState.getElements(elements2);
              elementsActive = true;
              check$1.command(elements2, "invalid elements", env.commandStr);
            }
            var result = createStaticDecl(function(env2, scope) {
              if (elements2) {
                var result2 = env2.link(elements2);
                env2.ELEMENTS = result2;
                return result2;
              }
              env2.ELEMENTS = null;
              return null;
            });
            result.value = elements2;
            return result;
          } else if (S_ELEMENTS in dynamicOptions) {
            elementsActive = true;
            var dyn = dynamicOptions[S_ELEMENTS];
            return createDynamicDecl(dyn, function(env2, scope) {
              var shared = env2.shared;
              var IS_BUFFER_ARGS = shared.isBufferArgs;
              var ELEMENT_STATE = shared.elements;
              var elementDefn = env2.invoke(scope, dyn);
              var elements3 = scope.def("null");
              var elementStream = scope.def(IS_BUFFER_ARGS, "(", elementDefn, ")");
              var ifte = env2.cond(elementStream).then(elements3, "=", ELEMENT_STATE, ".createStream(", elementDefn, ");").else(elements3, "=", ELEMENT_STATE, ".getElements(", elementDefn, ");");
              check$1.optional(function() {
                env2.assert(ifte.else, "!" + elementDefn + "||" + elements3, "invalid elements");
              });
              scope.entry(ifte);
              scope.exit(env2.cond(elementStream).then(ELEMENT_STATE, ".destroyStream(", elements3, ");"));
              env2.ELEMENTS = elements3;
              return elements3;
            });
          } else if (vaoActive) {
            return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env2, scope) {
              return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.elements + ".getElements(" + env2.shared.vao + ".currentVAO.elements):null");
            });
          }
          return null;
        }
        var elements = parseElements();
        function parsePrimitive() {
          if (S_PRIMITIVE in staticOptions) {
            var primitive2 = staticOptions[S_PRIMITIVE];
            staticDraw.primitive = primitive2;
            check$1.commandParameter(primitive2, primTypes, "invalid primitve", env.commandStr);
            return createStaticDecl(function(env2, scope) {
              return primTypes[primitive2];
            });
          } else if (S_PRIMITIVE in dynamicOptions) {
            var dynPrimitive = dynamicOptions[S_PRIMITIVE];
            return createDynamicDecl(dynPrimitive, function(env2, scope) {
              var PRIM_TYPES = env2.constants.primTypes;
              var prim = env2.invoke(scope, dynPrimitive);
              check$1.optional(function() {
                env2.assert(scope, prim + " in " + PRIM_TYPES, "invalid primitive, must be one of " + Object.keys(primTypes));
              });
              return scope.def(PRIM_TYPES, "[", prim, "]");
            });
          } else if (elementsActive) {
            if (isStatic(elements)) {
              if (elements.value) {
                return createStaticDecl(function(env2, scope) {
                  return scope.def(env2.ELEMENTS, ".primType");
                });
              } else {
                return createStaticDecl(function() {
                  return GL_TRIANGLES$1;
                });
              }
            } else {
              return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function(env2, scope) {
                var elements2 = env2.ELEMENTS;
                return scope.def(elements2, "?", elements2, ".primType:", GL_TRIANGLES$1);
              });
            }
          } else if (vaoActive) {
            return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env2, scope) {
              return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.primitive:" + GL_TRIANGLES$1);
            });
          }
          return null;
        }
        function parseParam(param, isOffset) {
          if (param in staticOptions) {
            var value = staticOptions[param] | 0;
            if (isOffset) {
              staticDraw.offset = value;
            } else {
              staticDraw.instances = value;
            }
            check$1.command(!isOffset || value >= 0, "invalid " + param, env.commandStr);
            return createStaticDecl(function(env2, scope) {
              if (isOffset) {
                env2.OFFSET = value;
              }
              return value;
            });
          } else if (param in dynamicOptions) {
            var dynValue = dynamicOptions[param];
            return createDynamicDecl(dynValue, function(env2, scope) {
              var result = env2.invoke(scope, dynValue);
              if (isOffset) {
                env2.OFFSET = result;
                check$1.optional(function() {
                  env2.assert(scope, result + ">=0", "invalid " + param);
                });
              }
              return result;
            });
          } else if (isOffset) {
            if (elementsActive) {
              return createStaticDecl(function(env2, scope) {
                env2.OFFSET = 0;
                return 0;
              });
            } else if (vaoActive) {
              return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env2, scope) {
                return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.offset:0");
              });
            }
          } else if (vaoActive) {
            return new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env2, scope) {
              return scope.def(env2.shared.vao + ".currentVAO?" + env2.shared.vao + ".currentVAO.instances:-1");
            });
          }
          return null;
        }
        var OFFSET = parseParam(S_OFFSET, true);
        function parseVertCount() {
          if (S_COUNT in staticOptions) {
            var count2 = staticOptions[S_COUNT] | 0;
            staticDraw.count = count2;
            check$1.command(typeof count2 === "number" && count2 >= 0, "invalid vertex count", env.commandStr);
            return createStaticDecl(function() {
              return count2;
            });
          } else if (S_COUNT in dynamicOptions) {
            var dynCount = dynamicOptions[S_COUNT];
            return createDynamicDecl(dynCount, function(env2, scope) {
              var result2 = env2.invoke(scope, dynCount);
              check$1.optional(function() {
                env2.assert(scope, "typeof " + result2 + '==="number"&&' + result2 + ">=0&&" + result2 + "===(" + result2 + "|0)", "invalid vertex count");
              });
              return result2;
            });
          } else if (elementsActive) {
            if (isStatic(elements)) {
              if (elements) {
                if (OFFSET) {
                  return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function(env2, scope) {
                    var result2 = scope.def(env2.ELEMENTS, ".vertCount-", env2.OFFSET);
                    check$1.optional(function() {
                      env2.assert(scope, result2 + ">=0", "invalid vertex offset/element buffer too small");
                    });
                    return result2;
                  });
                } else {
                  return createStaticDecl(function(env2, scope) {
                    return scope.def(env2.ELEMENTS, ".vertCount");
                  });
                }
              } else {
                var result = createStaticDecl(function() {
                  return -1;
                });
                check$1.optional(function() {
                  result.MISSING = true;
                });
                return result;
              }
            } else {
              var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function(env2, scope) {
                var elements2 = env2.ELEMENTS;
                if (env2.OFFSET) {
                  return scope.def(elements2, "?", elements2, ".vertCount-", env2.OFFSET, ":-1");
                }
                return scope.def(elements2, "?", elements2, ".vertCount:-1");
              });
              check$1.optional(function() {
                variable.DYNAMIC = true;
              });
              return variable;
            }
          } else if (vaoActive) {
            var countVariable = new Declaration(vao.thisDep, vao.contextDep, vao.propDep, function(env2, scope) {
              return scope.def(env2.shared.vao, ".currentVAO?", env2.shared.vao, ".currentVAO.count:-1");
            });
            return countVariable;
          }
          return null;
        }
        var primitive = parsePrimitive();
        var count = parseVertCount();
        var instances = parseParam(S_INSTANCES, false);
        return {
          elements,
          primitive,
          count,
          instances,
          offset: OFFSET,
          vao,
          vaoActive,
          elementsActive,
          static: staticDraw
        };
      }
      function parseGLState(options, env) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        var STATE = {};
        GL_STATE_NAMES.forEach(function(prop) {
          var param = propName(prop);
          function parseParam(parseStatic, parseDynamic) {
            if (prop in staticOptions) {
              var value = parseStatic(staticOptions[prop]);
              STATE[param] = createStaticDecl(function() {
                return value;
              });
            } else if (prop in dynamicOptions) {
              var dyn = dynamicOptions[prop];
              STATE[param] = createDynamicDecl(dyn, function(env2, scope) {
                return parseDynamic(env2, scope, env2.invoke(scope, dyn));
              });
            }
          }
          switch (prop) {
            case S_CULL_ENABLE:
            case S_BLEND_ENABLE:
            case S_DITHER:
            case S_STENCIL_ENABLE:
            case S_DEPTH_ENABLE:
            case S_SCISSOR_ENABLE:
            case S_POLYGON_OFFSET_ENABLE:
            case S_SAMPLE_ALPHA:
            case S_SAMPLE_ENABLE:
            case S_DEPTH_MASK:
              return parseParam(function(value) {
                check$1.commandType(value, "boolean", prop, env.commandStr);
                return value;
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, "typeof " + value + '==="boolean"', "invalid flag " + prop, env2.commandStr);
                });
                return value;
              });
            case S_DEPTH_FUNC:
              return parseParam(function(value) {
                check$1.commandParameter(value, compareFuncs, "invalid " + prop, env.commandStr);
                return compareFuncs[value];
              }, function(env2, scope, value) {
                var COMPARE_FUNCS = env2.constants.compareFuncs;
                check$1.optional(function() {
                  env2.assert(scope, value + " in " + COMPARE_FUNCS, "invalid " + prop + ", must be one of " + Object.keys(compareFuncs));
                });
                return scope.def(COMPARE_FUNCS, "[", value, "]");
              });
            case S_DEPTH_RANGE:
              return parseParam(function(value) {
                check$1.command(isArrayLike(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number" && value[0] <= value[1], "depth range is 2d array", env.commandStr);
                return value;
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===2&&typeof " + value + '[0]==="number"&&typeof ' + value + '[1]==="number"&&' + value + "[0]<=" + value + "[1]", "depth range must be a 2d array");
                });
                var Z_NEAR = scope.def("+", value, "[0]");
                var Z_FAR = scope.def("+", value, "[1]");
                return [Z_NEAR, Z_FAR];
              });
            case S_BLEND_FUNC:
              return parseParam(function(value) {
                check$1.commandType(value, "object", "blend.func", env.commandStr);
                var srcRGB = "srcRGB" in value ? value.srcRGB : value.src;
                var srcAlpha = "srcAlpha" in value ? value.srcAlpha : value.src;
                var dstRGB = "dstRGB" in value ? value.dstRGB : value.dst;
                var dstAlpha = "dstAlpha" in value ? value.dstAlpha : value.dst;
                check$1.commandParameter(srcRGB, blendFuncs, param + ".srcRGB", env.commandStr);
                check$1.commandParameter(srcAlpha, blendFuncs, param + ".srcAlpha", env.commandStr);
                check$1.commandParameter(dstRGB, blendFuncs, param + ".dstRGB", env.commandStr);
                check$1.commandParameter(dstAlpha, blendFuncs, param + ".dstAlpha", env.commandStr);
                check$1.command(invalidBlendCombinations.indexOf(srcRGB + ", " + dstRGB) === -1, "unallowed blending combination (srcRGB, dstRGB) = (" + srcRGB + ", " + dstRGB + ")", env.commandStr);
                return [
                  blendFuncs[srcRGB],
                  blendFuncs[dstRGB],
                  blendFuncs[srcAlpha],
                  blendFuncs[dstAlpha]
                ];
              }, function(env2, scope, value) {
                var BLEND_FUNCS = env2.constants.blendFuncs;
                check$1.optional(function() {
                  env2.assert(scope, value + "&&typeof " + value + '==="object"', "invalid blend func, must be an object");
                });
                function read(prefix, suffix) {
                  var func = scope.def('"', prefix, suffix, '" in ', value, "?", value, ".", prefix, suffix, ":", value, ".", prefix);
                  check$1.optional(function() {
                    env2.assert(scope, func + " in " + BLEND_FUNCS, "invalid " + prop + "." + prefix + suffix + ", must be one of " + Object.keys(blendFuncs));
                  });
                  return func;
                }
                var srcRGB = read("src", "RGB");
                var dstRGB = read("dst", "RGB");
                check$1.optional(function() {
                  var INVALID_BLEND_COMBINATIONS = env2.constants.invalidBlendCombinations;
                  env2.assert(scope, INVALID_BLEND_COMBINATIONS + ".indexOf(" + srcRGB + '+", "+' + dstRGB + ") === -1 ", "unallowed blending combination for (srcRGB, dstRGB)");
                });
                var SRC_RGB = scope.def(BLEND_FUNCS, "[", srcRGB, "]");
                var SRC_ALPHA = scope.def(BLEND_FUNCS, "[", read("src", "Alpha"), "]");
                var DST_RGB = scope.def(BLEND_FUNCS, "[", dstRGB, "]");
                var DST_ALPHA = scope.def(BLEND_FUNCS, "[", read("dst", "Alpha"), "]");
                return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];
              });
            case S_BLEND_EQUATION:
              return parseParam(function(value) {
                if (typeof value === "string") {
                  check$1.commandParameter(value, blendEquations, "invalid " + prop, env.commandStr);
                  return [
                    blendEquations[value],
                    blendEquations[value]
                  ];
                } else if (typeof value === "object") {
                  check$1.commandParameter(value.rgb, blendEquations, prop + ".rgb", env.commandStr);
                  check$1.commandParameter(value.alpha, blendEquations, prop + ".alpha", env.commandStr);
                  return [
                    blendEquations[value.rgb],
                    blendEquations[value.alpha]
                  ];
                } else {
                  check$1.commandRaise("invalid blend.equation", env.commandStr);
                }
              }, function(env2, scope, value) {
                var BLEND_EQUATIONS = env2.constants.blendEquations;
                var RGB = scope.def();
                var ALPHA = scope.def();
                var ifte = env2.cond("typeof ", value, '==="string"');
                check$1.optional(function() {
                  function checkProp(block, name, value2) {
                    env2.assert(block, value2 + " in " + BLEND_EQUATIONS, "invalid " + name + ", must be one of " + Object.keys(blendEquations));
                  }
                  checkProp(ifte.then, prop, value);
                  env2.assert(ifte.else, value + "&&typeof " + value + '==="object"', "invalid " + prop);
                  checkProp(ifte.else, prop + ".rgb", value + ".rgb");
                  checkProp(ifte.else, prop + ".alpha", value + ".alpha");
                });
                ifte.then(RGB, "=", ALPHA, "=", BLEND_EQUATIONS, "[", value, "];");
                ifte.else(RGB, "=", BLEND_EQUATIONS, "[", value, ".rgb];", ALPHA, "=", BLEND_EQUATIONS, "[", value, ".alpha];");
                scope(ifte);
                return [RGB, ALPHA];
              });
            case S_BLEND_COLOR:
              return parseParam(function(value) {
                check$1.command(isArrayLike(value) && value.length === 4, "blend.color must be a 4d array", env.commandStr);
                return loop(4, function(i) {
                  return +value[i];
                });
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===4", "blend.color must be a 4d array");
                });
                return loop(4, function(i) {
                  return scope.def("+", value, "[", i, "]");
                });
              });
            case S_STENCIL_MASK:
              return parseParam(function(value) {
                check$1.commandType(value, "number", param, env.commandStr);
                return value | 0;
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, "typeof " + value + '==="number"', "invalid stencil.mask");
                });
                return scope.def(value, "|0");
              });
            case S_STENCIL_FUNC:
              return parseParam(function(value) {
                check$1.commandType(value, "object", param, env.commandStr);
                var cmp = value.cmp || "keep";
                var ref = value.ref || 0;
                var mask = "mask" in value ? value.mask : -1;
                check$1.commandParameter(cmp, compareFuncs, prop + ".cmp", env.commandStr);
                check$1.commandType(ref, "number", prop + ".ref", env.commandStr);
                check$1.commandType(mask, "number", prop + ".mask", env.commandStr);
                return [
                  compareFuncs[cmp],
                  ref,
                  mask
                ];
              }, function(env2, scope, value) {
                var COMPARE_FUNCS = env2.constants.compareFuncs;
                check$1.optional(function() {
                  function assert() {
                    env2.assert(scope, Array.prototype.join.call(arguments, ""), "invalid stencil.func");
                  }
                  assert(value + "&&typeof ", value, '==="object"');
                  assert('!("cmp" in ', value, ")||(", value, ".cmp in ", COMPARE_FUNCS, ")");
                });
                var cmp = scope.def('"cmp" in ', value, "?", COMPARE_FUNCS, "[", value, ".cmp]", ":", GL_KEEP);
                var ref = scope.def(value, ".ref|0");
                var mask = scope.def('"mask" in ', value, "?", value, ".mask|0:-1");
                return [cmp, ref, mask];
              });
            case S_STENCIL_OPFRONT:
            case S_STENCIL_OPBACK:
              return parseParam(function(value) {
                check$1.commandType(value, "object", param, env.commandStr);
                var fail = value.fail || "keep";
                var zfail = value.zfail || "keep";
                var zpass = value.zpass || "keep";
                check$1.commandParameter(fail, stencilOps, prop + ".fail", env.commandStr);
                check$1.commandParameter(zfail, stencilOps, prop + ".zfail", env.commandStr);
                check$1.commandParameter(zpass, stencilOps, prop + ".zpass", env.commandStr);
                return [
                  prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                  stencilOps[fail],
                  stencilOps[zfail],
                  stencilOps[zpass]
                ];
              }, function(env2, scope, value) {
                var STENCIL_OPS = env2.constants.stencilOps;
                check$1.optional(function() {
                  env2.assert(scope, value + "&&typeof " + value + '==="object"', "invalid " + prop);
                });
                function read(name) {
                  check$1.optional(function() {
                    env2.assert(scope, '!("' + name + '" in ' + value + ")||(" + value + "." + name + " in " + STENCIL_OPS + ")", "invalid " + prop + "." + name + ", must be one of " + Object.keys(stencilOps));
                  });
                  return scope.def('"', name, '" in ', value, "?", STENCIL_OPS, "[", value, ".", name, "]:", GL_KEEP);
                }
                return [
                  prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT,
                  read("fail"),
                  read("zfail"),
                  read("zpass")
                ];
              });
            case S_POLYGON_OFFSET_OFFSET:
              return parseParam(function(value) {
                check$1.commandType(value, "object", param, env.commandStr);
                var factor = value.factor | 0;
                var units = value.units | 0;
                check$1.commandType(factor, "number", param + ".factor", env.commandStr);
                check$1.commandType(units, "number", param + ".units", env.commandStr);
                return [factor, units];
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, value + "&&typeof " + value + '==="object"', "invalid " + prop);
                });
                var FACTOR = scope.def(value, ".factor|0");
                var UNITS = scope.def(value, ".units|0");
                return [FACTOR, UNITS];
              });
            case S_CULL_FACE:
              return parseParam(function(value) {
                var face = 0;
                if (value === "front") {
                  face = GL_FRONT;
                } else if (value === "back") {
                  face = GL_BACK;
                }
                check$1.command(!!face, param, env.commandStr);
                return face;
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, value + '==="front"||' + value + '==="back"', "invalid cull.face");
                });
                return scope.def(value, '==="front"?', GL_FRONT, ":", GL_BACK);
              });
            case S_LINE_WIDTH:
              return parseParam(function(value) {
                check$1.command(typeof value === "number" && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], "invalid line width, must be a positive number between " + limits.lineWidthDims[0] + " and " + limits.lineWidthDims[1], env.commandStr);
                return value;
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, "typeof " + value + '==="number"&&' + value + ">=" + limits.lineWidthDims[0] + "&&" + value + "<=" + limits.lineWidthDims[1], "invalid line width");
                });
                return value;
              });
            case S_FRONT_FACE:
              return parseParam(function(value) {
                check$1.commandParameter(value, orientationType, param, env.commandStr);
                return orientationType[value];
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, value + '==="cw"||' + value + '==="ccw"', "invalid frontFace, must be one of cw,ccw");
                });
                return scope.def(value + '==="cw"?' + GL_CW + ":" + GL_CCW);
              });
            case S_COLOR_MASK:
              return parseParam(function(value) {
                check$1.command(isArrayLike(value) && value.length === 4, "color.mask must be length 4 array", env.commandStr);
                return value.map(function(v) {
                  return !!v;
                });
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, env2.shared.isArrayLike + "(" + value + ")&&" + value + ".length===4", "invalid color.mask");
                });
                return loop(4, function(i) {
                  return "!!" + value + "[" + i + "]";
                });
              });
            case S_SAMPLE_COVERAGE:
              return parseParam(function(value) {
                check$1.command(typeof value === "object" && value, param, env.commandStr);
                var sampleValue = "value" in value ? value.value : 1;
                var sampleInvert = !!value.invert;
                check$1.command(typeof sampleValue === "number" && sampleValue >= 0 && sampleValue <= 1, "sample.coverage.value must be a number between 0 and 1", env.commandStr);
                return [sampleValue, sampleInvert];
              }, function(env2, scope, value) {
                check$1.optional(function() {
                  env2.assert(scope, value + "&&typeof " + value + '==="object"', "invalid sample.coverage");
                });
                var VALUE = scope.def('"value" in ', value, "?+", value, ".value:1");
                var INVERT = scope.def("!!", value, ".invert");
                return [VALUE, INVERT];
              });
          }
        });
        return STATE;
      }
      function parseUniforms(uniforms, env) {
        var staticUniforms = uniforms.static;
        var dynamicUniforms = uniforms.dynamic;
        var UNIFORMS = {};
        Object.keys(staticUniforms).forEach(function(name) {
          var value = staticUniforms[name];
          var result;
          if (typeof value === "number" || typeof value === "boolean") {
            result = createStaticDecl(function() {
              return value;
            });
          } else if (typeof value === "function") {
            var reglType = value._reglType;
            if (reglType === "texture2d" || reglType === "textureCube") {
              result = createStaticDecl(function(env2) {
                return env2.link(value);
              });
            } else if (reglType === "framebuffer" || reglType === "framebufferCube") {
              check$1.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
              result = createStaticDecl(function(env2) {
                return env2.link(value.color[0]);
              });
            } else {
              check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
            }
          } else if (isArrayLike(value)) {
            result = createStaticDecl(function(env2) {
              var ITEM = env2.global.def("[", loop(value.length, function(i) {
                check$1.command(typeof value[i] === "number" || typeof value[i] === "boolean", "invalid uniform " + name, env2.commandStr);
                return value[i];
              }), "]");
              return ITEM;
            });
          } else {
            check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
          }
          result.value = value;
          UNIFORMS[name] = result;
        });
        Object.keys(dynamicUniforms).forEach(function(key) {
          var dyn = dynamicUniforms[key];
          UNIFORMS[key] = createDynamicDecl(dyn, function(env2, scope) {
            return env2.invoke(scope, dyn);
          });
        });
        return UNIFORMS;
      }
      function parseAttributes(attributes, env) {
        var staticAttributes = attributes.static;
        var dynamicAttributes = attributes.dynamic;
        var attributeDefs = {};
        Object.keys(staticAttributes).forEach(function(attribute) {
          var value = staticAttributes[attribute];
          var id2 = stringStore.id(attribute);
          var record = new AttributeRecord2();
          if (isBufferArgs(value)) {
            record.state = ATTRIB_STATE_POINTER;
            record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER$2, false, true));
            record.type = 0;
          } else {
            var buffer2 = bufferState.getBuffer(value);
            if (buffer2) {
              record.state = ATTRIB_STATE_POINTER;
              record.buffer = buffer2;
              record.type = 0;
            } else {
              check$1.command(typeof value === "object" && value, "invalid data for attribute " + attribute, env.commandStr);
              if ("constant" in value) {
                var constant2 = value.constant;
                record.buffer = "null";
                record.state = ATTRIB_STATE_CONSTANT;
                if (typeof constant2 === "number") {
                  record.x = constant2;
                } else {
                  check$1.command(isArrayLike(constant2) && constant2.length > 0 && constant2.length <= 4, "invalid constant for attribute " + attribute, env.commandStr);
                  CUTE_COMPONENTS.forEach(function(c2, i) {
                    if (i < constant2.length) {
                      record[c2] = constant2[i];
                    }
                  });
                }
              } else {
                if (isBufferArgs(value.buffer)) {
                  buffer2 = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER$2, false, true));
                } else {
                  buffer2 = bufferState.getBuffer(value.buffer);
                }
                check$1.command(!!buffer2, 'missing buffer for attribute "' + attribute + '"', env.commandStr);
                var offset = value.offset | 0;
                check$1.command(offset >= 0, 'invalid offset for attribute "' + attribute + '"', env.commandStr);
                var stride = value.stride | 0;
                check$1.command(stride >= 0 && stride < 256, 'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);
                var size = value.size | 0;
                check$1.command(!("size" in value) || size > 0 && size <= 4, 'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);
                var normalized = !!value.normalized;
                var type2 = 0;
                if ("type" in value) {
                  check$1.commandParameter(value.type, glTypes, "invalid type for attribute " + attribute, env.commandStr);
                  type2 = glTypes[value.type];
                }
                var divisor = value.divisor | 0;
                check$1.optional(function() {
                  if ("divisor" in value) {
                    check$1.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
                    check$1.command(divisor >= 0, 'invalid divisor for attribute "' + attribute + '"', env.commandStr);
                  }
                  var command = env.commandStr;
                  var VALID_KEYS = [
                    "buffer",
                    "offset",
                    "divisor",
                    "normalized",
                    "type",
                    "size",
                    "stride"
                  ];
                  Object.keys(value).forEach(function(prop) {
                    check$1.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ")", command);
                  });
                });
                record.buffer = buffer2;
                record.state = ATTRIB_STATE_POINTER;
                record.size = size;
                record.normalized = normalized;
                record.type = type2 || buffer2.dtype;
                record.offset = offset;
                record.stride = stride;
                record.divisor = divisor;
              }
            }
          }
          attributeDefs[attribute] = createStaticDecl(function(env2, scope) {
            var cache = env2.attribCache;
            if (id2 in cache) {
              return cache[id2];
            }
            var result = {
              isStream: false
            };
            Object.keys(record).forEach(function(key) {
              result[key] = record[key];
            });
            if (record.buffer) {
              result.buffer = env2.link(record.buffer);
              result.type = result.type || result.buffer + ".dtype";
            }
            cache[id2] = result;
            return result;
          });
        });
        Object.keys(dynamicAttributes).forEach(function(attribute) {
          var dyn = dynamicAttributes[attribute];
          function appendAttributeCode(env2, block) {
            var VALUE = env2.invoke(block, dyn);
            var shared = env2.shared;
            var constants2 = env2.constants;
            var IS_BUFFER_ARGS = shared.isBufferArgs;
            var BUFFER_STATE = shared.buffer;
            check$1.optional(function() {
              env2.assert(block, VALUE + "&&(typeof " + VALUE + '==="object"||typeof ' + VALUE + '==="function")&&(' + IS_BUFFER_ARGS + "(" + VALUE + ")||" + BUFFER_STATE + ".getBuffer(" + VALUE + ")||" + BUFFER_STATE + ".getBuffer(" + VALUE + ".buffer)||" + IS_BUFFER_ARGS + "(" + VALUE + '.buffer)||("constant" in ' + VALUE + "&&(typeof " + VALUE + '.constant==="number"||' + shared.isArrayLike + "(" + VALUE + ".constant))))", 'invalid dynamic attribute "' + attribute + '"');
            });
            var result = {
              isStream: block.def(false)
            };
            var defaultRecord = new AttributeRecord2();
            defaultRecord.state = ATTRIB_STATE_POINTER;
            Object.keys(defaultRecord).forEach(function(key) {
              result[key] = block.def("" + defaultRecord[key]);
            });
            var BUFFER = result.buffer;
            var TYPE = result.type;
            block("if(", IS_BUFFER_ARGS, "(", VALUE, ")){", result.isStream, "=true;", BUFFER, "=", BUFFER_STATE, ".createStream(", GL_ARRAY_BUFFER$2, ",", VALUE, ");", TYPE, "=", BUFFER, ".dtype;", "}else{", BUFFER, "=", BUFFER_STATE, ".getBuffer(", VALUE, ");", "if(", BUFFER, "){", TYPE, "=", BUFFER, ".dtype;", '}else if("constant" in ', VALUE, "){", result.state, "=", ATTRIB_STATE_CONSTANT, ";", "if(typeof " + VALUE + '.constant === "number"){', result[CUTE_COMPONENTS[0]], "=", VALUE, ".constant;", CUTE_COMPONENTS.slice(1).map(function(n) {
              return result[n];
            }).join("="), "=0;", "}else{", CUTE_COMPONENTS.map(function(name, i) {
              return result[name] + "=" + VALUE + ".constant.length>" + i + "?" + VALUE + ".constant[" + i + "]:0;";
            }).join(""), "}}else{", "if(", IS_BUFFER_ARGS, "(", VALUE, ".buffer)){", BUFFER, "=", BUFFER_STATE, ".createStream(", GL_ARRAY_BUFFER$2, ",", VALUE, ".buffer);", "}else{", BUFFER, "=", BUFFER_STATE, ".getBuffer(", VALUE, ".buffer);", "}", TYPE, '="type" in ', VALUE, "?", constants2.glTypes, "[", VALUE, ".type]:", BUFFER, ".dtype;", result.normalized, "=!!", VALUE, ".normalized;");
            function emitReadRecord(name) {
              block(result[name], "=", VALUE, ".", name, "|0;");
            }
            emitReadRecord("size");
            emitReadRecord("offset");
            emitReadRecord("stride");
            emitReadRecord("divisor");
            block("}}");
            block.exit("if(", result.isStream, "){", BUFFER_STATE, ".destroyStream(", BUFFER, ");", "}");
            return result;
          }
          attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
        });
        return attributeDefs;
      }
      function parseContext(context) {
        var staticContext = context.static;
        var dynamicContext = context.dynamic;
        var result = {};
        Object.keys(staticContext).forEach(function(name) {
          var value = staticContext[name];
          result[name] = createStaticDecl(function(env, scope) {
            if (typeof value === "number" || typeof value === "boolean") {
              return "" + value;
            } else {
              return env.link(value);
            }
          });
        });
        Object.keys(dynamicContext).forEach(function(name) {
          var dyn = dynamicContext[name];
          result[name] = createDynamicDecl(dyn, function(env, scope) {
            return env.invoke(scope, dyn);
          });
        });
        return result;
      }
      function parseArguments(options, attributes, uniforms, context, env) {
        var staticOptions = options.static;
        var dynamicOptions = options.dynamic;
        check$1.optional(function() {
          var KEY_NAMES = [
            S_FRAMEBUFFER,
            S_VERT,
            S_FRAG,
            S_ELEMENTS,
            S_PRIMITIVE,
            S_OFFSET,
            S_COUNT,
            S_INSTANCES,
            S_PROFILE,
            S_VAO
          ].concat(GL_STATE_NAMES);
          function checkKeys(dict) {
            Object.keys(dict).forEach(function(key) {
              check$1.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter "' + key + '"', env.commandStr);
            });
          }
          checkKeys(staticOptions);
          checkKeys(dynamicOptions);
        });
        var attribLocations = parseAttribLocations(options, attributes);
        var framebuffer = parseFramebuffer(options);
        var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
        var draw = parseDraw(options, env);
        var state = parseGLState(options, env);
        var shader = parseProgram(options, env, attribLocations);
        function copyBox(name) {
          var defn = viewportAndScissor[name];
          if (defn) {
            state[name] = defn;
          }
        }
        copyBox(S_VIEWPORT);
        copyBox(propName(S_SCISSOR_BOX));
        var dirty = Object.keys(state).length > 0;
        var result = {
          framebuffer,
          draw,
          shader,
          state,
          dirty,
          scopeVAO: null,
          drawVAO: null,
          useVAO: false,
          attributes: {}
        };
        result.profile = parseProfile(options);
        result.uniforms = parseUniforms(uniforms, env);
        result.drawVAO = result.scopeVAO = draw.vao;
        if (!result.drawVAO && shader.program && !attribLocations && extensions.angle_instanced_arrays && draw.static.elements) {
          var useVAO = true;
          var staticBindings = shader.program.attributes.map(function(attr) {
            var binding = attributes.static[attr];
            useVAO = useVAO && !!binding;
            return binding;
          });
          if (useVAO && staticBindings.length > 0) {
            var vao = attributeState.getVAO(attributeState.createVAO({
              attributes: staticBindings,
              elements: draw.static.elements
            }));
            result.drawVAO = new Declaration(null, null, null, function(env2, scope) {
              return env2.link(vao);
            });
            result.useVAO = true;
          }
        }
        if (attribLocations) {
          result.useVAO = true;
        } else {
          result.attributes = parseAttributes(attributes, env);
        }
        result.context = parseContext(context);
        return result;
      }
      function emitContext(env, scope, context) {
        var shared = env.shared;
        var CONTEXT = shared.context;
        var contextEnter = env.scope();
        Object.keys(context).forEach(function(name) {
          scope.save(CONTEXT, "." + name);
          var defn = context[name];
          var value = defn.append(env, scope);
          if (Array.isArray(value)) {
            contextEnter(CONTEXT, ".", name, "=[", value.join(), "];");
          } else {
            contextEnter(CONTEXT, ".", name, "=", value, ";");
          }
        });
        scope(contextEnter);
      }
      function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {
        var shared = env.shared;
        var GL = shared.gl;
        var FRAMEBUFFER_STATE = shared.framebuffer;
        var EXT_DRAW_BUFFERS;
        if (extDrawBuffers) {
          EXT_DRAW_BUFFERS = scope.def(shared.extensions, ".webgl_draw_buffers");
        }
        var constants2 = env.constants;
        var DRAW_BUFFERS = constants2.drawBuffer;
        var BACK_BUFFER = constants2.backBuffer;
        var NEXT;
        if (framebuffer) {
          NEXT = framebuffer.append(env, scope);
        } else {
          NEXT = scope.def(FRAMEBUFFER_STATE, ".next");
        }
        if (!skipCheck) {
          scope("if(", NEXT, "!==", FRAMEBUFFER_STATE, ".cur){");
        }
        scope("if(", NEXT, "){", GL, ".bindFramebuffer(", GL_FRAMEBUFFER$2, ",", NEXT, ".framebuffer);");
        if (extDrawBuffers) {
          scope(EXT_DRAW_BUFFERS, ".drawBuffersWEBGL(", DRAW_BUFFERS, "[", NEXT, ".colorAttachments.length]);");
        }
        scope("}else{", GL, ".bindFramebuffer(", GL_FRAMEBUFFER$2, ",null);");
        if (extDrawBuffers) {
          scope(EXT_DRAW_BUFFERS, ".drawBuffersWEBGL(", BACK_BUFFER, ");");
        }
        scope("}", FRAMEBUFFER_STATE, ".cur=", NEXT, ";");
        if (!skipCheck) {
          scope("}");
        }
      }
      function emitPollState(env, scope, args2) {
        var shared = env.shared;
        var GL = shared.gl;
        var CURRENT_VARS = env.current;
        var NEXT_VARS = env.next;
        var CURRENT_STATE = shared.current;
        var NEXT_STATE = shared.next;
        var block = env.cond(CURRENT_STATE, ".dirty");
        GL_STATE_NAMES.forEach(function(prop) {
          var param = propName(prop);
          if (param in args2.state) {
            return;
          }
          var NEXT, CURRENT;
          if (param in NEXT_VARS) {
            NEXT = NEXT_VARS[param];
            CURRENT = CURRENT_VARS[param];
            var parts = loop(currentState[param].length, function(i) {
              return block.def(NEXT, "[", i, "]");
            });
            block(env.cond(parts.map(function(p, i) {
              return p + "!==" + CURRENT + "[" + i + "]";
            }).join("||")).then(GL, ".", GL_VARIABLES[param], "(", parts, ");", parts.map(function(p, i) {
              return CURRENT + "[" + i + "]=" + p;
            }).join(";"), ";"));
          } else {
            NEXT = block.def(NEXT_STATE, ".", param);
            var ifte = env.cond(NEXT, "!==", CURRENT_STATE, ".", param);
            block(ifte);
            if (param in GL_FLAGS) {
              ifte(env.cond(NEXT).then(GL, ".enable(", GL_FLAGS[param], ");").else(GL, ".disable(", GL_FLAGS[param], ");"), CURRENT_STATE, ".", param, "=", NEXT, ";");
            } else {
              ifte(GL, ".", GL_VARIABLES[param], "(", NEXT, ");", CURRENT_STATE, ".", param, "=", NEXT, ";");
            }
          }
        });
        if (Object.keys(args2.state).length === 0) {
          block(CURRENT_STATE, ".dirty=false;");
        }
        scope(block);
      }
      function emitSetOptions(env, scope, options, filter2) {
        var shared = env.shared;
        var CURRENT_VARS = env.current;
        var CURRENT_STATE = shared.current;
        var GL = shared.gl;
        sortState(Object.keys(options)).forEach(function(param) {
          var defn = options[param];
          if (filter2 && !filter2(defn)) {
            return;
          }
          var variable = defn.append(env, scope);
          if (GL_FLAGS[param]) {
            var flag = GL_FLAGS[param];
            if (isStatic(defn)) {
              if (variable) {
                scope(GL, ".enable(", flag, ");");
              } else {
                scope(GL, ".disable(", flag, ");");
              }
            } else {
              scope(env.cond(variable).then(GL, ".enable(", flag, ");").else(GL, ".disable(", flag, ");"));
            }
            scope(CURRENT_STATE, ".", param, "=", variable, ";");
          } else if (isArrayLike(variable)) {
            var CURRENT = CURRENT_VARS[param];
            scope(GL, ".", GL_VARIABLES[param], "(", variable, ");", variable.map(function(v, i) {
              return CURRENT + "[" + i + "]=" + v;
            }).join(";"), ";");
          } else {
            scope(GL, ".", GL_VARIABLES[param], "(", variable, ");", CURRENT_STATE, ".", param, "=", variable, ";");
          }
        });
      }
      function injectExtensions(env, scope) {
        if (extInstancing) {
          env.instancing = scope.def(env.shared.extensions, ".angle_instanced_arrays");
        }
      }
      function emitProfile(env, scope, args2, useScope, incrementCounter) {
        var shared = env.shared;
        var STATS = env.stats;
        var CURRENT_STATE = shared.current;
        var TIMER = shared.timer;
        var profileArg = args2.profile;
        function perfCounter() {
          if (typeof performance === "undefined") {
            return "Date.now()";
          } else {
            return "performance.now()";
          }
        }
        var CPU_START, QUERY_COUNTER;
        function emitProfileStart(block) {
          CPU_START = scope.def();
          block(CPU_START, "=", perfCounter(), ";");
          if (typeof incrementCounter === "string") {
            block(STATS, ".count+=", incrementCounter, ";");
          } else {
            block(STATS, ".count++;");
          }
          if (timer2) {
            if (useScope) {
              QUERY_COUNTER = scope.def();
              block(QUERY_COUNTER, "=", TIMER, ".getNumPendingQueries();");
            } else {
              block(TIMER, ".beginQuery(", STATS, ");");
            }
          }
        }
        function emitProfileEnd(block) {
          block(STATS, ".cpuTime+=", perfCounter(), "-", CPU_START, ";");
          if (timer2) {
            if (useScope) {
              block(TIMER, ".pushScopeStats(", QUERY_COUNTER, ",", TIMER, ".getNumPendingQueries(),", STATS, ");");
            } else {
              block(TIMER, ".endQuery();");
            }
          }
        }
        function scopeProfile(value) {
          var prev = scope.def(CURRENT_STATE, ".profile");
          scope(CURRENT_STATE, ".profile=", value, ";");
          scope.exit(CURRENT_STATE, ".profile=", prev, ";");
        }
        var USE_PROFILE;
        if (profileArg) {
          if (isStatic(profileArg)) {
            if (profileArg.enable) {
              emitProfileStart(scope);
              emitProfileEnd(scope.exit);
              scopeProfile("true");
            } else {
              scopeProfile("false");
            }
            return;
          }
          USE_PROFILE = profileArg.append(env, scope);
          scopeProfile(USE_PROFILE);
        } else {
          USE_PROFILE = scope.def(CURRENT_STATE, ".profile");
        }
        var start2 = env.block();
        emitProfileStart(start2);
        scope("if(", USE_PROFILE, "){", start2, "}");
        var end = env.block();
        emitProfileEnd(end);
        scope.exit("if(", USE_PROFILE, "){", end, "}");
      }
      function emitAttributes(env, scope, args2, attributes, filter2) {
        var shared = env.shared;
        function typeLength(x) {
          switch (x) {
            case GL_FLOAT_VEC2:
            case GL_INT_VEC2:
            case GL_BOOL_VEC2:
              return 2;
            case GL_FLOAT_VEC3:
            case GL_INT_VEC3:
            case GL_BOOL_VEC3:
              return 3;
            case GL_FLOAT_VEC4:
            case GL_INT_VEC4:
            case GL_BOOL_VEC4:
              return 4;
            default:
              return 1;
          }
        }
        function emitBindAttribute(ATTRIBUTE, size, record) {
          var GL = shared.gl;
          var LOCATION = scope.def(ATTRIBUTE, ".location");
          var BINDING = scope.def(shared.attributes, "[", LOCATION, "]");
          var STATE = record.state;
          var BUFFER = record.buffer;
          var CONST_COMPONENTS = [
            record.x,
            record.y,
            record.z,
            record.w
          ];
          var COMMON_KEYS = [
            "buffer",
            "normalized",
            "offset",
            "stride"
          ];
          function emitBuffer() {
            scope("if(!", BINDING, ".buffer){", GL, ".enableVertexAttribArray(", LOCATION, ");}");
            var TYPE = record.type;
            var SIZE;
            if (!record.size) {
              SIZE = size;
            } else {
              SIZE = scope.def(record.size, "||", size);
            }
            scope("if(", BINDING, ".type!==", TYPE, "||", BINDING, ".size!==", SIZE, "||", COMMON_KEYS.map(function(key) {
              return BINDING + "." + key + "!==" + record[key];
            }).join("||"), "){", GL, ".bindBuffer(", GL_ARRAY_BUFFER$2, ",", BUFFER, ".buffer);", GL, ".vertexAttribPointer(", [
              LOCATION,
              SIZE,
              TYPE,
              record.normalized,
              record.stride,
              record.offset
            ], ");", BINDING, ".type=", TYPE, ";", BINDING, ".size=", SIZE, ";", COMMON_KEYS.map(function(key) {
              return BINDING + "." + key + "=" + record[key] + ";";
            }).join(""), "}");
            if (extInstancing) {
              var DIVISOR = record.divisor;
              scope("if(", BINDING, ".divisor!==", DIVISOR, "){", env.instancing, ".vertexAttribDivisorANGLE(", [LOCATION, DIVISOR], ");", BINDING, ".divisor=", DIVISOR, ";}");
            }
          }
          function emitConstant() {
            scope("if(", BINDING, ".buffer){", GL, ".disableVertexAttribArray(", LOCATION, ");", BINDING, ".buffer=null;", "}if(", CUTE_COMPONENTS.map(function(c2, i) {
              return BINDING + "." + c2 + "!==" + CONST_COMPONENTS[i];
            }).join("||"), "){", GL, ".vertexAttrib4f(", LOCATION, ",", CONST_COMPONENTS, ");", CUTE_COMPONENTS.map(function(c2, i) {
              return BINDING + "." + c2 + "=" + CONST_COMPONENTS[i] + ";";
            }).join(""), "}");
          }
          if (STATE === ATTRIB_STATE_POINTER) {
            emitBuffer();
          } else if (STATE === ATTRIB_STATE_CONSTANT) {
            emitConstant();
          } else {
            scope("if(", STATE, "===", ATTRIB_STATE_POINTER, "){");
            emitBuffer();
            scope("}else{");
            emitConstant();
            scope("}");
          }
        }
        attributes.forEach(function(attribute) {
          var name = attribute.name;
          var arg = args2.attributes[name];
          var record;
          if (arg) {
            if (!filter2(arg)) {
              return;
            }
            record = arg.append(env, scope);
          } else {
            if (!filter2(SCOPE_DECL)) {
              return;
            }
            var scopeAttrib = env.scopeAttrib(name);
            check$1.optional(function() {
              env.assert(scope, scopeAttrib + ".state", "missing attribute " + name);
            });
            record = {};
            Object.keys(new AttributeRecord2()).forEach(function(key) {
              record[key] = scope.def(scopeAttrib, ".", key);
            });
          }
          emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);
        });
      }
      function emitUniforms(env, scope, args2, uniforms, filter2, isBatchInnerLoop) {
        var shared = env.shared;
        var GL = shared.gl;
        var definedArrUniforms = {};
        var infix;
        for (var i = 0; i < uniforms.length; ++i) {
          var uniform = uniforms[i];
          var name = uniform.name;
          var type2 = uniform.info.type;
          var size = uniform.info.size;
          var arg = args2.uniforms[name];
          if (size > 1) {
            if (!arg) {
              continue;
            }
            var arrUniformName = name.replace("[0]", "");
            if (definedArrUniforms[arrUniformName]) {
              continue;
            }
            definedArrUniforms[arrUniformName] = 1;
          }
          var UNIFORM = env.link(uniform);
          var LOCATION = UNIFORM + ".location";
          var VALUE;
          if (arg) {
            if (!filter2(arg)) {
              continue;
            }
            if (isStatic(arg)) {
              var value = arg.value;
              check$1.command(value !== null && typeof value !== "undefined", 'missing uniform "' + name + '"', env.commandStr);
              if (type2 === GL_SAMPLER_2D || type2 === GL_SAMPLER_CUBE) {
                check$1.command(typeof value === "function" && (type2 === GL_SAMPLER_2D && (value._reglType === "texture2d" || value._reglType === "framebuffer") || type2 === GL_SAMPLER_CUBE && (value._reglType === "textureCube" || value._reglType === "framebufferCube")), "invalid texture for uniform " + name, env.commandStr);
                var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
                scope(GL, ".uniform1i(", LOCATION, ",", TEX_VALUE + ".bind());");
                scope.exit(TEX_VALUE, ".unbind();");
              } else if (type2 === GL_FLOAT_MAT2 || type2 === GL_FLOAT_MAT3 || type2 === GL_FLOAT_MAT4) {
                check$1.optional(function() {
                  check$1.command(isArrayLike(value), "invalid matrix for uniform " + name, env.commandStr);
                  check$1.command(type2 === GL_FLOAT_MAT2 && value.length === 4 || type2 === GL_FLOAT_MAT3 && value.length === 9 || type2 === GL_FLOAT_MAT4 && value.length === 16, "invalid length for matrix uniform " + name, env.commandStr);
                });
                var MAT_VALUE = env.global.def("new Float32Array([" + Array.prototype.slice.call(value) + "])");
                var dim = 2;
                if (type2 === GL_FLOAT_MAT3) {
                  dim = 3;
                } else if (type2 === GL_FLOAT_MAT4) {
                  dim = 4;
                }
                scope(GL, ".uniformMatrix", dim, "fv(", LOCATION, ",false,", MAT_VALUE, ");");
              } else {
                switch (type2) {
                  case GL_FLOAT$8:
                    if (size === 1) {
                      check$1.commandType(value, "number", "uniform " + name, env.commandStr);
                    } else {
                      check$1.command(isArrayLike(value) && value.length === size, "uniform " + name, env.commandStr);
                    }
                    infix = "1f";
                    break;
                  case GL_FLOAT_VEC2:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2), "uniform " + name, env.commandStr);
                    infix = "2f";
                    break;
                  case GL_FLOAT_VEC3:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3), "uniform " + name, env.commandStr);
                    infix = "3f";
                    break;
                  case GL_FLOAT_VEC4:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4), "uniform " + name, env.commandStr);
                    infix = "4f";
                    break;
                  case GL_BOOL:
                    if (size === 1) {
                      check$1.commandType(value, "boolean", "uniform " + name, env.commandStr);
                    } else {
                      check$1.command(isArrayLike(value) && value.length === size, "uniform " + name, env.commandStr);
                    }
                    infix = "1i";
                    break;
                  case GL_INT$3:
                    if (size === 1) {
                      check$1.commandType(value, "number", "uniform " + name, env.commandStr);
                    } else {
                      check$1.command(isArrayLike(value) && value.length === size, "uniform " + name, env.commandStr);
                    }
                    infix = "1i";
                    break;
                  case GL_BOOL_VEC2:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2), "uniform " + name, env.commandStr);
                    infix = "2i";
                    break;
                  case GL_INT_VEC2:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 2 === 0 && value.length <= size * 2), "uniform " + name, env.commandStr);
                    infix = "2i";
                    break;
                  case GL_BOOL_VEC3:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3), "uniform " + name, env.commandStr);
                    infix = "3i";
                    break;
                  case GL_INT_VEC3:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 3 === 0 && value.length <= size * 3), "uniform " + name, env.commandStr);
                    infix = "3i";
                    break;
                  case GL_BOOL_VEC4:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4), "uniform " + name, env.commandStr);
                    infix = "4i";
                    break;
                  case GL_INT_VEC4:
                    check$1.command(isArrayLike(value) && (value.length && value.length % 4 === 0 && value.length <= size * 4), "uniform " + name, env.commandStr);
                    infix = "4i";
                    break;
                }
                if (size > 1) {
                  infix += "v";
                  value = env.global.def("[" + Array.prototype.slice.call(value) + "]");
                } else {
                  value = isArrayLike(value) ? Array.prototype.slice.call(value) : value;
                }
                scope(GL, ".uniform", infix, "(", LOCATION, ",", value, ");");
              }
              continue;
            } else {
              VALUE = arg.append(env, scope);
            }
          } else {
            if (!filter2(SCOPE_DECL)) {
              continue;
            }
            VALUE = scope.def(shared.uniforms, "[", stringStore.id(name), "]");
          }
          if (type2 === GL_SAMPLER_2D) {
            check$1(!Array.isArray(VALUE), "must specify a scalar prop for textures");
            scope("if(", VALUE, "&&", VALUE, '._reglType==="framebuffer"){', VALUE, "=", VALUE, ".color[0];", "}");
          } else if (type2 === GL_SAMPLER_CUBE) {
            check$1(!Array.isArray(VALUE), "must specify a scalar prop for cube maps");
            scope("if(", VALUE, "&&", VALUE, '._reglType==="framebufferCube"){', VALUE, "=", VALUE, ".color[0];", "}");
          }
          check$1.optional(function() {
            function emitCheck(pred, message2) {
              env.assert(scope, pred, 'bad data or missing for uniform "' + name + '".  ' + message2);
            }
            function checkType(type3, size2) {
              if (size2 === 1) {
                check$1(!Array.isArray(VALUE), "must not specify an array type for uniform");
              }
              emitCheck("Array.isArray(" + VALUE + ") && typeof " + VALUE + '[0]===" ' + type3 + '" || typeof ' + VALUE + '==="' + type3 + '"', "invalid type, expected " + type3);
            }
            function checkVector(n, type3, size2) {
              if (Array.isArray(VALUE)) {
                check$1(VALUE.length && VALUE.length % n === 0 && VALUE.length <= n * size2, "must have length of " + (size2 === 1 ? "" : "n * ") + n);
              } else {
                emitCheck(shared.isArrayLike + "(" + VALUE + ")&&" + VALUE + ".length && " + VALUE + ".length % " + n + " === 0 && " + VALUE + ".length<=" + n * size2, "invalid vector, should have length of " + (size2 === 1 ? "" : "n * ") + n, env.commandStr);
              }
            }
            function checkTexture(target) {
              check$1(!Array.isArray(VALUE), "must not specify a value type");
              emitCheck("typeof " + VALUE + '==="function"&&' + VALUE + '._reglType==="texture' + (target === GL_TEXTURE_2D$3 ? "2d" : "Cube") + '"', "invalid texture type", env.commandStr);
            }
            switch (type2) {
              case GL_INT$3:
                checkType("number", size);
                break;
              case GL_INT_VEC2:
                checkVector(2, "number", size);
                break;
              case GL_INT_VEC3:
                checkVector(3, "number", size);
                break;
              case GL_INT_VEC4:
                checkVector(4, "number", size);
                break;
              case GL_FLOAT$8:
                checkType("number", size);
                break;
              case GL_FLOAT_VEC2:
                checkVector(2, "number", size);
                break;
              case GL_FLOAT_VEC3:
                checkVector(3, "number", size);
                break;
              case GL_FLOAT_VEC4:
                checkVector(4, "number", size);
                break;
              case GL_BOOL:
                checkType("boolean", size);
                break;
              case GL_BOOL_VEC2:
                checkVector(2, "boolean", size);
                break;
              case GL_BOOL_VEC3:
                checkVector(3, "boolean", size);
                break;
              case GL_BOOL_VEC4:
                checkVector(4, "boolean", size);
                break;
              case GL_FLOAT_MAT2:
                checkVector(4, "number", size);
                break;
              case GL_FLOAT_MAT3:
                checkVector(9, "number", size);
                break;
              case GL_FLOAT_MAT4:
                checkVector(16, "number", size);
                break;
              case GL_SAMPLER_2D:
                checkTexture(GL_TEXTURE_2D$3);
                break;
              case GL_SAMPLER_CUBE:
                checkTexture(GL_TEXTURE_CUBE_MAP$2);
                break;
            }
          });
          var unroll = 1;
          switch (type2) {
            case GL_SAMPLER_2D:
            case GL_SAMPLER_CUBE:
              var TEX = scope.def(VALUE, "._texture");
              scope(GL, ".uniform1i(", LOCATION, ",", TEX, ".bind());");
              scope.exit(TEX, ".unbind();");
              continue;
            case GL_INT$3:
            case GL_BOOL:
              infix = "1i";
              break;
            case GL_INT_VEC2:
            case GL_BOOL_VEC2:
              infix = "2i";
              unroll = 2;
              break;
            case GL_INT_VEC3:
            case GL_BOOL_VEC3:
              infix = "3i";
              unroll = 3;
              break;
            case GL_INT_VEC4:
            case GL_BOOL_VEC4:
              infix = "4i";
              unroll = 4;
              break;
            case GL_FLOAT$8:
              infix = "1f";
              break;
            case GL_FLOAT_VEC2:
              infix = "2f";
              unroll = 2;
              break;
            case GL_FLOAT_VEC3:
              infix = "3f";
              unroll = 3;
              break;
            case GL_FLOAT_VEC4:
              infix = "4f";
              unroll = 4;
              break;
            case GL_FLOAT_MAT2:
              infix = "Matrix2fv";
              break;
            case GL_FLOAT_MAT3:
              infix = "Matrix3fv";
              break;
            case GL_FLOAT_MAT4:
              infix = "Matrix4fv";
              break;
          }
          if (infix.indexOf("Matrix") === -1 && size > 1) {
            infix += "v";
            unroll = 1;
          }
          if (infix.charAt(0) === "M") {
            scope(GL, ".uniform", infix, "(", LOCATION, ",");
            var matSize = Math.pow(type2 - GL_FLOAT_MAT2 + 2, 2);
            var STORAGE = env.global.def("new Float32Array(", matSize, ")");
            if (Array.isArray(VALUE)) {
              scope("false,(", loop(matSize, function(i2) {
                return STORAGE + "[" + i2 + "]=" + VALUE[i2];
              }), ",", STORAGE, ")");
            } else {
              scope("false,(Array.isArray(", VALUE, ")||", VALUE, " instanceof Float32Array)?", VALUE, ":(", loop(matSize, function(i2) {
                return STORAGE + "[" + i2 + "]=" + VALUE + "[" + i2 + "]";
              }), ",", STORAGE, ")");
            }
            scope(");");
          } else if (unroll > 1) {
            var prev = [];
            var cur = [];
            for (var j = 0; j < unroll; ++j) {
              if (Array.isArray(VALUE)) {
                cur.push(VALUE[j]);
              } else {
                cur.push(scope.def(VALUE + "[" + j + "]"));
              }
              if (isBatchInnerLoop) {
                prev.push(scope.def());
              }
            }
            if (isBatchInnerLoop) {
              scope("if(!", env.batchId, "||", prev.map(function(p, i2) {
                return p + "!==" + cur[i2];
              }).join("||"), "){", prev.map(function(p, i2) {
                return p + "=" + cur[i2] + ";";
              }).join(""));
            }
            scope(GL, ".uniform", infix, "(", LOCATION, ",", cur.join(","), ");");
            if (isBatchInnerLoop) {
              scope("}");
            }
          } else {
            check$1(!Array.isArray(VALUE), "uniform value must not be an array");
            if (isBatchInnerLoop) {
              var prevS = scope.def();
              scope("if(!", env.batchId, "||", prevS, "!==", VALUE, "){", prevS, "=", VALUE, ";");
            }
            scope(GL, ".uniform", infix, "(", LOCATION, ",", VALUE, ");");
            if (isBatchInnerLoop) {
              scope("}");
            }
          }
        }
      }
      function emitDraw(env, outer, inner, args2) {
        var shared = env.shared;
        var GL = shared.gl;
        var DRAW_STATE = shared.draw;
        var drawOptions = args2.draw;
        function emitElements() {
          var defn = drawOptions.elements;
          var ELEMENTS2;
          var scope = outer;
          if (defn) {
            if (defn.contextDep && args2.contextDynamic || defn.propDep) {
              scope = inner;
            }
            ELEMENTS2 = defn.append(env, scope);
            if (drawOptions.elementsActive) {
              scope("if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);");
            }
          } else {
            ELEMENTS2 = scope.def();
            scope(ELEMENTS2, "=", DRAW_STATE, ".", S_ELEMENTS, ";", "if(", ELEMENTS2, "){", GL, ".bindBuffer(", GL_ELEMENT_ARRAY_BUFFER$2, ",", ELEMENTS2, ".buffer.buffer);}", "else if(", shared.vao, ".currentVAO){", ELEMENTS2, "=", env.shared.elements + ".getElements(" + shared.vao, ".currentVAO.elements);", !extVertexArrays ? "if(" + ELEMENTS2 + ")" + GL + ".bindBuffer(" + GL_ELEMENT_ARRAY_BUFFER$2 + "," + ELEMENTS2 + ".buffer.buffer);" : "", "}");
          }
          return ELEMENTS2;
        }
        function emitCount() {
          var defn = drawOptions.count;
          var COUNT2;
          var scope = outer;
          if (defn) {
            if (defn.contextDep && args2.contextDynamic || defn.propDep) {
              scope = inner;
            }
            COUNT2 = defn.append(env, scope);
            check$1.optional(function() {
              if (defn.MISSING) {
                env.assert(outer, "false", "missing vertex count");
              }
              if (defn.DYNAMIC) {
                env.assert(scope, COUNT2 + ">=0", "missing vertex count");
              }
            });
          } else {
            COUNT2 = scope.def(DRAW_STATE, ".", S_COUNT);
            check$1.optional(function() {
              env.assert(scope, COUNT2 + ">=0", "missing vertex count");
            });
          }
          return COUNT2;
        }
        var ELEMENTS = emitElements();
        function emitValue(name) {
          var defn = drawOptions[name];
          if (defn) {
            if (defn.contextDep && args2.contextDynamic || defn.propDep) {
              return defn.append(env, inner);
            } else {
              return defn.append(env, outer);
            }
          } else {
            return outer.def(DRAW_STATE, ".", name);
          }
        }
        var PRIMITIVE = emitValue(S_PRIMITIVE);
        var OFFSET = emitValue(S_OFFSET);
        var COUNT = emitCount();
        if (typeof COUNT === "number") {
          if (COUNT === 0) {
            return;
          }
        } else {
          inner("if(", COUNT, "){");
          inner.exit("}");
        }
        var INSTANCES, EXT_INSTANCING;
        if (extInstancing) {
          INSTANCES = emitValue(S_INSTANCES);
          EXT_INSTANCING = env.instancing;
        }
        var ELEMENT_TYPE = ELEMENTS + ".type";
        var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements) && !drawOptions.vaoActive;
        function emitInstancing() {
          function drawElements() {
            inner(EXT_INSTANCING, ".drawElementsInstancedANGLE(", [
              PRIMITIVE,
              COUNT,
              ELEMENT_TYPE,
              OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$8 + ")>>1)",
              INSTANCES
            ], ");");
          }
          function drawArrays() {
            inner(EXT_INSTANCING, ".drawArraysInstancedANGLE(", [PRIMITIVE, OFFSET, COUNT, INSTANCES], ");");
          }
          if (ELEMENTS && ELEMENTS !== "null") {
            if (!elementsStatic) {
              inner("if(", ELEMENTS, "){");
              drawElements();
              inner("}else{");
              drawArrays();
              inner("}");
            } else {
              drawElements();
            }
          } else {
            drawArrays();
          }
        }
        function emitRegular() {
          function drawElements() {
            inner(GL + ".drawElements(" + [
              PRIMITIVE,
              COUNT,
              ELEMENT_TYPE,
              OFFSET + "<<((" + ELEMENT_TYPE + "-" + GL_UNSIGNED_BYTE$8 + ")>>1)"
            ] + ");");
          }
          function drawArrays() {
            inner(GL + ".drawArrays(" + [PRIMITIVE, OFFSET, COUNT] + ");");
          }
          if (ELEMENTS && ELEMENTS !== "null") {
            if (!elementsStatic) {
              inner("if(", ELEMENTS, "){");
              drawElements();
              inner("}else{");
              drawArrays();
              inner("}");
            } else {
              drawElements();
            }
          } else {
            drawArrays();
          }
        }
        if (extInstancing && (typeof INSTANCES !== "number" || INSTANCES >= 0)) {
          if (typeof INSTANCES === "string") {
            inner("if(", INSTANCES, ">0){");
            emitInstancing();
            inner("}else if(", INSTANCES, "<0){");
            emitRegular();
            inner("}");
          } else {
            emitInstancing();
          }
        } else {
          emitRegular();
        }
      }
      function createBody(emitBody, parentEnv, args2, program, count) {
        var env = createREGLEnvironment();
        var scope = env.proc("body", count);
        check$1.optional(function() {
          env.commandStr = parentEnv.commandStr;
          env.command = env.link(parentEnv.commandStr);
        });
        if (extInstancing) {
          env.instancing = scope.def(env.shared.extensions, ".angle_instanced_arrays");
        }
        emitBody(env, scope, args2, program);
        return env.compile().body;
      }
      function emitDrawBody(env, draw, args2, program) {
        injectExtensions(env, draw);
        if (args2.useVAO) {
          if (args2.drawVAO) {
            draw(env.shared.vao, ".setVAO(", args2.drawVAO.append(env, draw), ");");
          } else {
            draw(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
          }
        } else {
          draw(env.shared.vao, ".setVAO(null);");
          emitAttributes(env, draw, args2, program.attributes, function() {
            return true;
          });
        }
        emitUniforms(env, draw, args2, program.uniforms, function() {
          return true;
        }, false);
        emitDraw(env, draw, draw, args2);
      }
      function emitDrawProc(env, args2) {
        var draw = env.proc("draw", 1);
        injectExtensions(env, draw);
        emitContext(env, draw, args2.context);
        emitPollFramebuffer(env, draw, args2.framebuffer);
        emitPollState(env, draw, args2);
        emitSetOptions(env, draw, args2.state);
        emitProfile(env, draw, args2, false, true);
        var program = args2.shader.progVar.append(env, draw);
        draw(env.shared.gl, ".useProgram(", program, ".program);");
        if (args2.shader.program) {
          emitDrawBody(env, draw, args2, args2.shader.program);
        } else {
          draw(env.shared.vao, ".setVAO(null);");
          var drawCache = env.global.def("{}");
          var PROG_ID = draw.def(program, ".id");
          var CACHED_PROC = draw.def(drawCache, "[", PROG_ID, "]");
          draw(env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0);").else(CACHED_PROC, "=", drawCache, "[", PROG_ID, "]=", env.link(function(program2) {
            return createBody(emitDrawBody, env, args2, program2, 1);
          }), "(", program, ");", CACHED_PROC, ".call(this,a0);"));
        }
        if (Object.keys(args2.state).length > 0) {
          draw(env.shared.current, ".dirty=true;");
        }
        if (env.shared.vao) {
          draw(env.shared.vao, ".setVAO(null);");
        }
      }
      function emitBatchDynamicShaderBody(env, scope, args2, program) {
        env.batchId = "a1";
        injectExtensions(env, scope);
        function all() {
          return true;
        }
        emitAttributes(env, scope, args2, program.attributes, all);
        emitUniforms(env, scope, args2, program.uniforms, all, false);
        emitDraw(env, scope, scope, args2);
      }
      function emitBatchBody(env, scope, args2, program) {
        injectExtensions(env, scope);
        var contextDynamic = args2.contextDep;
        var BATCH_ID = scope.def();
        var PROP_LIST = "a0";
        var NUM_PROPS = "a1";
        var PROPS = scope.def();
        env.shared.props = PROPS;
        env.batchId = BATCH_ID;
        var outer = env.scope();
        var inner = env.scope();
        scope(outer.entry, "for(", BATCH_ID, "=0;", BATCH_ID, "<", NUM_PROPS, ";++", BATCH_ID, "){", PROPS, "=", PROP_LIST, "[", BATCH_ID, "];", inner, "}", outer.exit);
        function isInnerDefn(defn) {
          return defn.contextDep && contextDynamic || defn.propDep;
        }
        function isOuterDefn(defn) {
          return !isInnerDefn(defn);
        }
        if (args2.needsContext) {
          emitContext(env, inner, args2.context);
        }
        if (args2.needsFramebuffer) {
          emitPollFramebuffer(env, inner, args2.framebuffer);
        }
        emitSetOptions(env, inner, args2.state, isInnerDefn);
        if (args2.profile && isInnerDefn(args2.profile)) {
          emitProfile(env, inner, args2, false, true);
        }
        if (!program) {
          var progCache = env.global.def("{}");
          var PROGRAM = args2.shader.progVar.append(env, inner);
          var PROG_ID = inner.def(PROGRAM, ".id");
          var CACHED_PROC = inner.def(progCache, "[", PROG_ID, "]");
          inner(env.shared.gl, ".useProgram(", PROGRAM, ".program);", "if(!", CACHED_PROC, "){", CACHED_PROC, "=", progCache, "[", PROG_ID, "]=", env.link(function(program2) {
            return createBody(emitBatchDynamicShaderBody, env, args2, program2, 2);
          }), "(", PROGRAM, ");}", CACHED_PROC, ".call(this,a0[", BATCH_ID, "],", BATCH_ID, ");");
        } else {
          if (args2.useVAO) {
            if (args2.drawVAO) {
              if (isInnerDefn(args2.drawVAO)) {
                inner(env.shared.vao, ".setVAO(", args2.drawVAO.append(env, inner), ");");
              } else {
                outer(env.shared.vao, ".setVAO(", args2.drawVAO.append(env, outer), ");");
              }
            } else {
              outer(env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
            }
          } else {
            outer(env.shared.vao, ".setVAO(null);");
            emitAttributes(env, outer, args2, program.attributes, isOuterDefn);
            emitAttributes(env, inner, args2, program.attributes, isInnerDefn);
          }
          emitUniforms(env, outer, args2, program.uniforms, isOuterDefn, false);
          emitUniforms(env, inner, args2, program.uniforms, isInnerDefn, true);
          emitDraw(env, outer, inner, args2);
        }
      }
      function emitBatchProc(env, args2) {
        var batch = env.proc("batch", 2);
        env.batchId = "0";
        injectExtensions(env, batch);
        var contextDynamic = false;
        var needsContext = true;
        Object.keys(args2.context).forEach(function(name) {
          contextDynamic = contextDynamic || args2.context[name].propDep;
        });
        if (!contextDynamic) {
          emitContext(env, batch, args2.context);
          needsContext = false;
        }
        var framebuffer = args2.framebuffer;
        var needsFramebuffer = false;
        if (framebuffer) {
          if (framebuffer.propDep) {
            contextDynamic = needsFramebuffer = true;
          } else if (framebuffer.contextDep && contextDynamic) {
            needsFramebuffer = true;
          }
          if (!needsFramebuffer) {
            emitPollFramebuffer(env, batch, framebuffer);
          }
        } else {
          emitPollFramebuffer(env, batch, null);
        }
        if (args2.state.viewport && args2.state.viewport.propDep) {
          contextDynamic = true;
        }
        function isInnerDefn(defn) {
          return defn.contextDep && contextDynamic || defn.propDep;
        }
        emitPollState(env, batch, args2);
        emitSetOptions(env, batch, args2.state, function(defn) {
          return !isInnerDefn(defn);
        });
        if (!args2.profile || !isInnerDefn(args2.profile)) {
          emitProfile(env, batch, args2, false, "a1");
        }
        args2.contextDep = contextDynamic;
        args2.needsContext = needsContext;
        args2.needsFramebuffer = needsFramebuffer;
        var progDefn = args2.shader.progVar;
        if (progDefn.contextDep && contextDynamic || progDefn.propDep) {
          emitBatchBody(env, batch, args2, null);
        } else {
          var PROGRAM = progDefn.append(env, batch);
          batch(env.shared.gl, ".useProgram(", PROGRAM, ".program);");
          if (args2.shader.program) {
            emitBatchBody(env, batch, args2, args2.shader.program);
          } else {
            batch(env.shared.vao, ".setVAO(null);");
            var batchCache = env.global.def("{}");
            var PROG_ID = batch.def(PROGRAM, ".id");
            var CACHED_PROC = batch.def(batchCache, "[", PROG_ID, "]");
            batch(env.cond(CACHED_PROC).then(CACHED_PROC, ".call(this,a0,a1);").else(CACHED_PROC, "=", batchCache, "[", PROG_ID, "]=", env.link(function(program) {
              return createBody(emitBatchBody, env, args2, program, 2);
            }), "(", PROGRAM, ");", CACHED_PROC, ".call(this,a0,a1);"));
          }
        }
        if (Object.keys(args2.state).length > 0) {
          batch(env.shared.current, ".dirty=true;");
        }
        if (env.shared.vao) {
          batch(env.shared.vao, ".setVAO(null);");
        }
      }
      function emitScopeProc(env, args2) {
        var scope = env.proc("scope", 3);
        env.batchId = "a2";
        var shared = env.shared;
        var CURRENT_STATE = shared.current;
        emitContext(env, scope, args2.context);
        if (args2.framebuffer) {
          args2.framebuffer.append(env, scope);
        }
        sortState(Object.keys(args2.state)).forEach(function(name) {
          var defn = args2.state[name];
          var value = defn.append(env, scope);
          if (isArrayLike(value)) {
            value.forEach(function(v, i) {
              scope.set(env.next[name], "[" + i + "]", v);
            });
          } else {
            scope.set(shared.next, "." + name, value);
          }
        });
        emitProfile(env, scope, args2, true, true);
        [S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(function(opt) {
          var variable = args2.draw[opt];
          if (!variable) {
            return;
          }
          scope.set(shared.draw, "." + opt, "" + variable.append(env, scope));
        });
        Object.keys(args2.uniforms).forEach(function(opt) {
          var value = args2.uniforms[opt].append(env, scope);
          if (Array.isArray(value)) {
            value = "[" + value.join() + "]";
          }
          scope.set(shared.uniforms, "[" + stringStore.id(opt) + "]", value);
        });
        Object.keys(args2.attributes).forEach(function(name) {
          var record = args2.attributes[name].append(env, scope);
          var scopeAttrib = env.scopeAttrib(name);
          Object.keys(new AttributeRecord2()).forEach(function(prop) {
            scope.set(scopeAttrib, "." + prop, record[prop]);
          });
        });
        if (args2.scopeVAO) {
          scope.set(shared.vao, ".targetVAO", args2.scopeVAO.append(env, scope));
        }
        function saveShader(name) {
          var shader = args2.shader[name];
          if (shader) {
            scope.set(shared.shader, "." + name, shader.append(env, scope));
          }
        }
        saveShader(S_VERT);
        saveShader(S_FRAG);
        if (Object.keys(args2.state).length > 0) {
          scope(CURRENT_STATE, ".dirty=true;");
          scope.exit(CURRENT_STATE, ".dirty=true;");
        }
        scope("a1(", env.shared.context, ",a0,", env.batchId, ");");
      }
      function isDynamicObject(object2) {
        if (typeof object2 !== "object" || isArrayLike(object2)) {
          return;
        }
        var props = Object.keys(object2);
        for (var i = 0; i < props.length; ++i) {
          if (dynamic.isDynamic(object2[props[i]])) {
            return true;
          }
        }
        return false;
      }
      function splatObject(env, options, name) {
        var object2 = options.static[name];
        if (!object2 || !isDynamicObject(object2)) {
          return;
        }
        var globals = env.global;
        var keys = Object.keys(object2);
        var thisDep = false;
        var contextDep = false;
        var propDep = false;
        var objectRef = env.global.def("{}");
        keys.forEach(function(key) {
          var value = object2[key];
          if (dynamic.isDynamic(value)) {
            if (typeof value === "function") {
              value = object2[key] = dynamic.unbox(value);
            }
            var deps = createDynamicDecl(value, null);
            thisDep = thisDep || deps.thisDep;
            propDep = propDep || deps.propDep;
            contextDep = contextDep || deps.contextDep;
          } else {
            globals(objectRef, ".", key, "=");
            switch (typeof value) {
              case "number":
                globals(value);
                break;
              case "string":
                globals('"', value, '"');
                break;
              case "object":
                if (Array.isArray(value)) {
                  globals("[", value.join(), "]");
                }
                break;
              default:
                globals(env.link(value));
                break;
            }
            globals(";");
          }
        });
        function appendBlock(env2, block) {
          keys.forEach(function(key) {
            var value = object2[key];
            if (!dynamic.isDynamic(value)) {
              return;
            }
            var ref = env2.invoke(block, value);
            block(objectRef, ".", key, "=", ref, ";");
          });
        }
        options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
          thisDep,
          contextDep,
          propDep,
          ref: objectRef,
          append: appendBlock
        });
        delete options.static[name];
      }
      function compileCommand(options, attributes, uniforms, context, stats2) {
        var env = createREGLEnvironment();
        env.stats = env.link(stats2);
        Object.keys(attributes.static).forEach(function(key) {
          splatObject(env, attributes, key);
        });
        NESTED_OPTIONS.forEach(function(name) {
          splatObject(env, options, name);
        });
        var args2 = parseArguments(options, attributes, uniforms, context, env);
        emitDrawProc(env, args2);
        emitScopeProc(env, args2);
        emitBatchProc(env, args2);
        return extend2(env.compile(), {
          destroy: function() {
            args2.shader.program.destroy();
          }
        });
      }
      return {
        next: nextState,
        current: currentState,
        procs: function() {
          var env = createREGLEnvironment();
          var poll = env.proc("poll");
          var refresh = env.proc("refresh");
          var common = env.block();
          poll(common);
          refresh(common);
          var shared = env.shared;
          var GL = shared.gl;
          var NEXT_STATE = shared.next;
          var CURRENT_STATE = shared.current;
          common(CURRENT_STATE, ".dirty=false;");
          emitPollFramebuffer(env, poll);
          emitPollFramebuffer(env, refresh, null, true);
          var INSTANCING;
          if (extInstancing) {
            INSTANCING = env.link(extInstancing);
          }
          if (extensions.oes_vertex_array_object) {
            refresh(env.link(extensions.oes_vertex_array_object), ".bindVertexArrayOES(null);");
          }
          for (var i = 0; i < limits.maxAttributes; ++i) {
            var BINDING = refresh.def(shared.attributes, "[", i, "]");
            var ifte = env.cond(BINDING, ".buffer");
            ifte.then(GL, ".enableVertexAttribArray(", i, ");", GL, ".bindBuffer(", GL_ARRAY_BUFFER$2, ",", BINDING, ".buffer.buffer);", GL, ".vertexAttribPointer(", i, ",", BINDING, ".size,", BINDING, ".type,", BINDING, ".normalized,", BINDING, ".stride,", BINDING, ".offset);").else(GL, ".disableVertexAttribArray(", i, ");", GL, ".vertexAttrib4f(", i, ",", BINDING, ".x,", BINDING, ".y,", BINDING, ".z,", BINDING, ".w);", BINDING, ".buffer=null;");
            refresh(ifte);
            if (extInstancing) {
              refresh(INSTANCING, ".vertexAttribDivisorANGLE(", i, ",", BINDING, ".divisor);");
            }
          }
          refresh(env.shared.vao, ".currentVAO=null;", env.shared.vao, ".setVAO(", env.shared.vao, ".targetVAO);");
          Object.keys(GL_FLAGS).forEach(function(flag) {
            var cap = GL_FLAGS[flag];
            var NEXT = common.def(NEXT_STATE, ".", flag);
            var block = env.block();
            block("if(", NEXT, "){", GL, ".enable(", cap, ")}else{", GL, ".disable(", cap, ")}", CURRENT_STATE, ".", flag, "=", NEXT, ";");
            refresh(block);
            poll("if(", NEXT, "!==", CURRENT_STATE, ".", flag, "){", block, "}");
          });
          Object.keys(GL_VARIABLES).forEach(function(name) {
            var func = GL_VARIABLES[name];
            var init2 = currentState[name];
            var NEXT, CURRENT;
            var block = env.block();
            block(GL, ".", func, "(");
            if (isArrayLike(init2)) {
              var n = init2.length;
              NEXT = env.global.def(NEXT_STATE, ".", name);
              CURRENT = env.global.def(CURRENT_STATE, ".", name);
              block(loop(n, function(i2) {
                return NEXT + "[" + i2 + "]";
              }), ");", loop(n, function(i2) {
                return CURRENT + "[" + i2 + "]=" + NEXT + "[" + i2 + "];";
              }).join(""));
              poll("if(", loop(n, function(i2) {
                return NEXT + "[" + i2 + "]!==" + CURRENT + "[" + i2 + "]";
              }).join("||"), "){", block, "}");
            } else {
              NEXT = common.def(NEXT_STATE, ".", name);
              CURRENT = common.def(CURRENT_STATE, ".", name);
              block(NEXT, ");", CURRENT_STATE, ".", name, "=", NEXT, ";");
              poll("if(", NEXT, "!==", CURRENT, "){", block, "}");
            }
            refresh(block);
          });
          return env.compile();
        }(),
        compile: compileCommand
      };
    }
    function stats() {
      return {
        vaoCount: 0,
        bufferCount: 0,
        elementsCount: 0,
        framebufferCount: 0,
        shaderCount: 0,
        textureCount: 0,
        cubeCount: 0,
        renderbufferCount: 0,
        maxTextureUnits: 0
      };
    }
    var GL_QUERY_RESULT_EXT = 34918;
    var GL_QUERY_RESULT_AVAILABLE_EXT = 34919;
    var GL_TIME_ELAPSED_EXT = 35007;
    var createTimer = function(gl, extensions) {
      if (!extensions.ext_disjoint_timer_query) {
        return null;
      }
      var queryPool = [];
      function allocQuery() {
        return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();
      }
      function freeQuery(query) {
        queryPool.push(query);
      }
      var pendingQueries = [];
      function beginQuery(stats2) {
        var query = allocQuery();
        extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
        pendingQueries.push(query);
        pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats2);
      }
      function endQuery() {
        extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
      }
      function PendingStats() {
        this.startQueryIndex = -1;
        this.endQueryIndex = -1;
        this.sum = 0;
        this.stats = null;
      }
      var pendingStatsPool = [];
      function allocPendingStats() {
        return pendingStatsPool.pop() || new PendingStats();
      }
      function freePendingStats(pendingStats2) {
        pendingStatsPool.push(pendingStats2);
      }
      var pendingStats = [];
      function pushScopeStats(start2, end, stats2) {
        var ps = allocPendingStats();
        ps.startQueryIndex = start2;
        ps.endQueryIndex = end;
        ps.sum = 0;
        ps.stats = stats2;
        pendingStats.push(ps);
      }
      var timeSum = [];
      var queryPtr = [];
      function update() {
        var ptr, i;
        var n = pendingQueries.length;
        if (n === 0) {
          return;
        }
        queryPtr.length = Math.max(queryPtr.length, n + 1);
        timeSum.length = Math.max(timeSum.length, n + 1);
        timeSum[0] = 0;
        queryPtr[0] = 0;
        var queryTime = 0;
        ptr = 0;
        for (i = 0; i < pendingQueries.length; ++i) {
          var query = pendingQueries[i];
          if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
            queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
            freeQuery(query);
          } else {
            pendingQueries[ptr++] = query;
          }
          timeSum[i + 1] = queryTime;
          queryPtr[i + 1] = ptr;
        }
        pendingQueries.length = ptr;
        ptr = 0;
        for (i = 0; i < pendingStats.length; ++i) {
          var stats2 = pendingStats[i];
          var start2 = stats2.startQueryIndex;
          var end = stats2.endQueryIndex;
          stats2.sum += timeSum[end] - timeSum[start2];
          var startPtr = queryPtr[start2];
          var endPtr = queryPtr[end];
          if (endPtr === startPtr) {
            stats2.stats.gpuTime += stats2.sum / 1e6;
            freePendingStats(stats2);
          } else {
            stats2.startQueryIndex = startPtr;
            stats2.endQueryIndex = endPtr;
            pendingStats[ptr++] = stats2;
          }
        }
        pendingStats.length = ptr;
      }
      return {
        beginQuery,
        endQuery,
        pushScopeStats,
        update,
        getNumPendingQueries: function() {
          return pendingQueries.length;
        },
        clear: function() {
          queryPool.push.apply(queryPool, pendingQueries);
          for (var i = 0; i < queryPool.length; i++) {
            extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
          }
          pendingQueries.length = 0;
          queryPool.length = 0;
        },
        restore: function() {
          pendingQueries.length = 0;
          queryPool.length = 0;
        }
      };
    };
    var GL_COLOR_BUFFER_BIT = 16384;
    var GL_DEPTH_BUFFER_BIT = 256;
    var GL_STENCIL_BUFFER_BIT = 1024;
    var GL_ARRAY_BUFFER = 34962;
    var CONTEXT_LOST_EVENT = "webglcontextlost";
    var CONTEXT_RESTORED_EVENT = "webglcontextrestored";
    var DYN_PROP = 1;
    var DYN_CONTEXT = 2;
    var DYN_STATE = 3;
    function find2(haystack, needle) {
      for (var i = 0; i < haystack.length; ++i) {
        if (haystack[i] === needle) {
          return i;
        }
      }
      return -1;
    }
    function wrapREGL2(args2) {
      var config = parseArgs(args2);
      if (!config) {
        return null;
      }
      var gl = config.gl;
      var glAttributes = gl.getContextAttributes();
      var contextLost = gl.isContextLost();
      var extensionState = createExtensionCache(gl, config);
      if (!extensionState) {
        return null;
      }
      var stringStore = createStringStore();
      var stats$$1 = stats();
      var extensions = extensionState.extensions;
      var timer2 = createTimer(gl, extensions);
      var START_TIME = clock2();
      var WIDTH = gl.drawingBufferWidth;
      var HEIGHT = gl.drawingBufferHeight;
      var contextState = {
        tick: 0,
        time: 0,
        viewportWidth: WIDTH,
        viewportHeight: HEIGHT,
        framebufferWidth: WIDTH,
        framebufferHeight: HEIGHT,
        drawingBufferWidth: WIDTH,
        drawingBufferHeight: HEIGHT,
        pixelRatio: config.pixelRatio
      };
      var uniformState = {};
      var drawState = {
        elements: null,
        primitive: 4,
        count: -1,
        offset: 0,
        instances: -1
      };
      var limits = wrapLimits(gl, extensions);
      var bufferState = wrapBufferState(gl, stats$$1, config, destroyBuffer);
      var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
      var attributeState = wrapAttributeState(gl, extensions, limits, stats$$1, bufferState, elementState, drawState);
      function destroyBuffer(buffer2) {
        return attributeState.destroyBuffer(buffer2);
      }
      var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
      var textureState = createTextureSet(gl, extensions, limits, function() {
        core.procs.poll();
      }, contextState, stats$$1, config);
      var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
      var framebufferState = wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats$$1);
      var core = reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer2, config);
      var readPixels = wrapReadPixels(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);
      var nextState = core.next;
      var canvas = gl.canvas;
      var rafCallbacks = [];
      var lossCallbacks = [];
      var restoreCallbacks = [];
      var destroyCallbacks = [config.onDestroy];
      var activeRAF = null;
      function handleRAF() {
        if (rafCallbacks.length === 0) {
          if (timer2) {
            timer2.update();
          }
          activeRAF = null;
          return;
        }
        activeRAF = raf.next(handleRAF);
        poll();
        for (var i = rafCallbacks.length - 1; i >= 0; --i) {
          var cb = rafCallbacks[i];
          if (cb) {
            cb(contextState, null, 0);
          }
        }
        gl.flush();
        if (timer2) {
          timer2.update();
        }
      }
      function startRAF() {
        if (!activeRAF && rafCallbacks.length > 0) {
          activeRAF = raf.next(handleRAF);
        }
      }
      function stopRAF() {
        if (activeRAF) {
          raf.cancel(handleRAF);
          activeRAF = null;
        }
      }
      function handleContextLoss(event) {
        event.preventDefault();
        contextLost = true;
        stopRAF();
        lossCallbacks.forEach(function(cb) {
          cb();
        });
      }
      function handleContextRestored(event) {
        gl.getError();
        contextLost = false;
        extensionState.restore();
        shaderState.restore();
        bufferState.restore();
        textureState.restore();
        renderbufferState.restore();
        framebufferState.restore();
        attributeState.restore();
        if (timer2) {
          timer2.restore();
        }
        core.procs.refresh();
        startRAF();
        restoreCallbacks.forEach(function(cb) {
          cb();
        });
      }
      if (canvas) {
        canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
        canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
      }
      function destroy() {
        rafCallbacks.length = 0;
        stopRAF();
        if (canvas) {
          canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
          canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
        }
        shaderState.clear();
        framebufferState.clear();
        renderbufferState.clear();
        attributeState.clear();
        textureState.clear();
        elementState.clear();
        bufferState.clear();
        if (timer2) {
          timer2.clear();
        }
        destroyCallbacks.forEach(function(cb) {
          cb();
        });
      }
      function compileProcedure(options) {
        check$1(!!options, "invalid args to regl({...})");
        check$1.type(options, "object", "invalid args to regl({...})");
        function flattenNestedOptions(options2) {
          var result = extend2({}, options2);
          delete result.uniforms;
          delete result.attributes;
          delete result.context;
          delete result.vao;
          if ("stencil" in result && result.stencil.op) {
            result.stencil.opBack = result.stencil.opFront = result.stencil.op;
            delete result.stencil.op;
          }
          function merge2(name) {
            if (name in result) {
              var child = result[name];
              delete result[name];
              Object.keys(child).forEach(function(prop) {
                result[name + "." + prop] = child[prop];
              });
            }
          }
          merge2("blend");
          merge2("depth");
          merge2("cull");
          merge2("stencil");
          merge2("polygonOffset");
          merge2("scissor");
          merge2("sample");
          if ("vao" in options2) {
            result.vao = options2.vao;
          }
          return result;
        }
        function separateDynamic(object2, useArrays) {
          var staticItems = {};
          var dynamicItems = {};
          Object.keys(object2).forEach(function(option) {
            var value = object2[option];
            if (dynamic.isDynamic(value)) {
              dynamicItems[option] = dynamic.unbox(value, option);
              return;
            } else if (useArrays && Array.isArray(value)) {
              for (var i = 0; i < value.length; ++i) {
                if (dynamic.isDynamic(value[i])) {
                  dynamicItems[option] = dynamic.unbox(value, option);
                  return;
                }
              }
            }
            staticItems[option] = value;
          });
          return {
            dynamic: dynamicItems,
            static: staticItems
          };
        }
        var context = separateDynamic(options.context || {}, true);
        var uniforms = separateDynamic(options.uniforms || {}, true);
        var attributes = separateDynamic(options.attributes || {}, false);
        var opts = separateDynamic(flattenNestedOptions(options), false);
        var stats$$12 = {
          gpuTime: 0,
          cpuTime: 0,
          count: 0
        };
        var compiled = core.compile(opts, attributes, uniforms, context, stats$$12);
        var draw = compiled.draw;
        var batch = compiled.batch;
        var scope = compiled.scope;
        var EMPTY_ARRAY = [];
        function reserve(count) {
          while (EMPTY_ARRAY.length < count) {
            EMPTY_ARRAY.push(null);
          }
          return EMPTY_ARRAY;
        }
        function REGLCommand(args3, body) {
          var i;
          if (contextLost) {
            check$1.raise("context lost");
          }
          if (typeof args3 === "function") {
            return scope.call(this, null, args3, 0);
          } else if (typeof body === "function") {
            if (typeof args3 === "number") {
              for (i = 0; i < args3; ++i) {
                scope.call(this, null, body, i);
              }
            } else if (Array.isArray(args3)) {
              for (i = 0; i < args3.length; ++i) {
                scope.call(this, args3[i], body, i);
              }
            } else {
              return scope.call(this, args3, body, 0);
            }
          } else if (typeof args3 === "number") {
            if (args3 > 0) {
              return batch.call(this, reserve(args3 | 0), args3 | 0);
            }
          } else if (Array.isArray(args3)) {
            if (args3.length) {
              return batch.call(this, args3, args3.length);
            }
          } else {
            return draw.call(this, args3);
          }
        }
        return extend2(REGLCommand, {
          stats: stats$$12,
          destroy: function() {
            compiled.destroy();
          }
        });
      }
      var setFBO = framebufferState.setFBO = compileProcedure({
        framebuffer: dynamic.define.call(null, DYN_PROP, "framebuffer")
      });
      function clearImpl(_, options) {
        var clearFlags = 0;
        core.procs.poll();
        var c2 = options.color;
        if (c2) {
          gl.clearColor(+c2[0] || 0, +c2[1] || 0, +c2[2] || 0, +c2[3] || 0);
          clearFlags |= GL_COLOR_BUFFER_BIT;
        }
        if ("depth" in options) {
          gl.clearDepth(+options.depth);
          clearFlags |= GL_DEPTH_BUFFER_BIT;
        }
        if ("stencil" in options) {
          gl.clearStencil(options.stencil | 0);
          clearFlags |= GL_STENCIL_BUFFER_BIT;
        }
        check$1(!!clearFlags, "called regl.clear with no buffer specified");
        gl.clear(clearFlags);
      }
      function clear(options) {
        check$1(typeof options === "object" && options, "regl.clear() takes an object as input");
        if ("framebuffer" in options) {
          if (options.framebuffer && options.framebuffer_reglType === "framebufferCube") {
            for (var i = 0; i < 6; ++i) {
              setFBO(extend2({
                framebuffer: options.framebuffer.faces[i]
              }, options), clearImpl);
            }
          } else {
            setFBO(options, clearImpl);
          }
        } else {
          clearImpl(null, options);
        }
      }
      function frame2(cb) {
        check$1.type(cb, "function", "regl.frame() callback must be a function");
        rafCallbacks.push(cb);
        function cancel() {
          var i = find2(rafCallbacks, cb);
          check$1(i >= 0, "cannot cancel a frame twice");
          function pendingCancel() {
            var index = find2(rafCallbacks, pendingCancel);
            rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
            rafCallbacks.length -= 1;
            if (rafCallbacks.length <= 0) {
              stopRAF();
            }
          }
          rafCallbacks[i] = pendingCancel;
        }
        startRAF();
        return {
          cancel
        };
      }
      function pollViewport() {
        var viewport = nextState.viewport;
        var scissorBox = nextState.scissor_box;
        viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
        contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;
        contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;
      }
      function poll() {
        contextState.tick += 1;
        contextState.time = now2();
        pollViewport();
        core.procs.poll();
      }
      function refresh() {
        textureState.refresh();
        pollViewport();
        core.procs.refresh();
        if (timer2) {
          timer2.update();
        }
      }
      function now2() {
        return (clock2() - START_TIME) / 1e3;
      }
      refresh();
      function addListener(event, callback) {
        check$1.type(callback, "function", "listener callback must be a function");
        var callbacks;
        switch (event) {
          case "frame":
            return frame2(callback);
          case "lost":
            callbacks = lossCallbacks;
            break;
          case "restore":
            callbacks = restoreCallbacks;
            break;
          case "destroy":
            callbacks = destroyCallbacks;
            break;
          default:
            check$1.raise("invalid event, must be one of frame,lost,restore,destroy");
        }
        callbacks.push(callback);
        return {
          cancel: function() {
            for (var i = 0; i < callbacks.length; ++i) {
              if (callbacks[i] === callback) {
                callbacks[i] = callbacks[callbacks.length - 1];
                callbacks.pop();
                return;
              }
            }
          }
        };
      }
      var regl2 = extend2(compileProcedure, {
        clear,
        prop: dynamic.define.bind(null, DYN_PROP),
        context: dynamic.define.bind(null, DYN_CONTEXT),
        this: dynamic.define.bind(null, DYN_STATE),
        draw: compileProcedure({}),
        buffer: function(options) {
          return bufferState.create(options, GL_ARRAY_BUFFER, false, false);
        },
        elements: function(options) {
          return elementState.create(options, false);
        },
        texture: textureState.create2D,
        cube: textureState.createCube,
        renderbuffer: renderbufferState.create,
        framebuffer: framebufferState.create,
        framebufferCube: framebufferState.createCube,
        vao: attributeState.createVAO,
        attributes: glAttributes,
        frame: frame2,
        on: addListener,
        limits,
        hasExtension: function(name) {
          return limits.extensions.indexOf(name.toLowerCase()) >= 0;
        },
        read: readPixels,
        destroy,
        _gl: gl,
        _refresh: refresh,
        poll: function() {
          poll();
          if (timer2) {
            timer2.update();
          }
        },
        now: now2,
        stats: stats$$1
      });
      config.onDone(null, regl2);
      return regl2;
    }
    return wrapREGL2;
  });
})(regl);
var wrapREGL = regl.exports;
var glslReadFloat = decodeFloat;
var UINT8_VIEW = new Uint8Array(4);
var FLOAT_VIEW = new Float32Array(UINT8_VIEW.buffer);
function decodeFloat(x, y, z, w) {
  UINT8_VIEW[0] = w;
  UINT8_VIEW[1] = z;
  UINT8_VIEW[2] = y;
  UINT8_VIEW[3] = x;
  return FLOAT_VIEW[0];
}
class Renderer {
  constructor(selector2, tileSet, scatterplot) {
    this._use_scale_to_download_tiles = true;
    this.scatterplot = scatterplot;
    this.holder = select(selector2);
    this.canvas = select(this.holder.node().firstElementChild);
    this.tileSet = tileSet;
    this.prefs = scatterplot.prefs;
    this.width = +this.canvas.attr("width");
    this.height = +this.canvas.attr("height");
    this.deferred_functions = [];
    this._use_scale_to_download_tiles = true;
  }
  get discard_share() {
    return 0;
  }
  get optimal_alpha() {
    let { zoom_balance, alpha, point_size } = this.prefs;
    const {
      max_ix,
      width,
      discard_share,
      height
    } = this;
    const { k } = this.zoom.transform;
    alpha = alpha === void 0 ? 0.25 : alpha;
    const target_share = alpha;
    const fraction_of_total_visible = 1 / k ** 2;
    const pixel_area = width * height;
    const total_intended_points = min([max_ix, this.tileSet.highest_known_ix]);
    const total_points = total_intended_points * (1 - discard_share);
    const area_of_point = (Math.PI * Math.exp(Math.log(1 * k) * zoom_balance) * point_size) ** 2;
    const target = target_share * pixel_area / (total_points * fraction_of_total_visible * area_of_point);
    return target > 1 ? 1 : target < 1 / 255 ? 1 / 255 : target;
  }
  get max_ix() {
    const { prefs } = this;
    if (!this._use_scale_to_download_tiles) {
      return prefs.max_points;
    }
    const { k } = this.zoom.transform;
    const point_size_adjust = Math.exp(Math.log(k) * prefs.zoom_balance);
    return prefs.max_points * k * k / point_size_adjust / point_size_adjust;
  }
  visible_tiles() {
    const { max_ix } = this;
    const { tileSet } = this;
    let all_tiles;
    let natural_display = this.aes.dim("x").current.field == "x" && this.aes.dim("y").current.field == "y" && this.aes.dim("x").last.field == "x" && this.aes.dim("y").last.field == "y";
    if (natural_display) {
      all_tiles = tileSet.map((d) => d).filter((tile) => tile.is_visible(max_ix, this.zoom.current_corners()));
    } else {
      console.log(this.aes.dim("y").last.field, "not using natural display filtering.");
      all_tiles = tileSet.map((d) => d).filter((tile) => tile.min_ix < this.max_ix);
    }
    all_tiles.sort((a, b) => a.min_ix - b.min_ix);
    return all_tiles;
  }
  bind_zoom(zoom2) {
    this.zoom = zoom2;
    return this;
  }
  _click_function_from_string() {
    return Function("datum", this.scatterplot.prefs.click_function);
  }
  _click_function_matches_prefs() {
    if (this._click_function_type == "string" && this._click_function == this._click_function_from_string()) {
      return true;
    } else if (this._click_function_type == "function" && this._click_function == this.scatterplot.prefs.click_function) {
      return true;
    }
    return false;
  }
  set click_function(f) {
    if (typeof this.scatterplot.prefs.click_function == "function") {
      this._click_function_type = "function";
      this._click_function = this.scatterplot.prefs.click_function;
    } else if (typeof this.scatterplot.prefs.click_function == "string") {
      this._click_function_type = "string";
      this._click_function = this._click_function_from_string();
    } else {
      console.warn("Unrecognized click_function type; should be string or function.");
      this._click_function_type = null;
      this._click_function = function() {
      };
    }
  }
  get click_function() {
    if (!this._click_function || !this._click_function_matches_prefs()) {
      this.click_function = this.scatterplot.prefs.click_function;
    }
    return this._click_function;
  }
  *initialize() {
    return Promise.all(this._initializations).then((d) => {
      this.zoom.restart_timer(5e5);
    });
  }
}
var gaussian_blur = "precision mediump float;\n#define GLSLIFY 1\n\nvec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.411764705882353) * direction;\n  vec2 off2 = vec2(3.2941176470588234) * direction;\n  vec2 off3 = vec2(5.176470588235294) * direction;\n  color += texture2D(image, uv) * 0.1964825501511404;\n  color += texture2D(image, uv + (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv - (off1 / resolution)) * 0.2969069646728344;\n  color += texture2D(image, uv + (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv - (off2 / resolution)) * 0.09447039785044732;\n  color += texture2D(image, uv + (off3 / resolution)) * 0.010381362401148057;\n  color += texture2D(image, uv - (off3 / resolution)) * 0.010381362401148057;\n  return color;\n}\n\nuniform vec2 iResolution;\nuniform sampler2D iChannel0;\nuniform vec2 direction;\n\nvoid main() {\n  vec2 uv = vec2(gl_FragCoord.xy / iResolution.xy);\n  gl_FragColor = blur13(iChannel0, uv, iResolution.xy, direction);\n}\n";
var vertex_shader = `precision mediump float;
#define GLSLIFY 1

uniform float u_zoom_balance;

uniform float u_update_time;
uniform float u_transition_duration;

// Type of jitter.
uniform float u_jitter;
uniform float u_last_jitter;

// Whether to plot only a single category.
uniform float u_only_color;
uniform float u_grid_mode;

uniform vec3 u_filter_numeric; // An override for simple numeric operations.
uniform vec3 u_last_filter_numeric; // An override for simple numeric operations.

uniform vec3 u_filter2_numeric; // An override for simple numeric operations.
uniform vec3 u_last_filter2_numeric; // An override for simple numeric operations.

// Transform from data space to the open window.
uniform mat3 u_window_scale;
uniform mat3 u_last_window_scale;
// Transform from the open window to the d3-zoom.
uniform mat3 u_zoom;

uniform float u_width;
uniform float u_height;
uniform float u_use_glyphset;
varying vec2 letter_pos; // store which letter to use.

uniform float u_maxix;           // The maximum index to plot.
uniform float u_time;            // The current time.
uniform float u_k;               // The d3-scale factor.
uniform float u_color_picker_mode;
uniform float u_base_size;
uniform float u_current_alpha;
uniform float u_last_alpha;

uniform sampler2D u_one_d_aesthetic_map;
uniform sampler2D u_color_aesthetic_map;

// The same set of items for a variety of aesthetics.

// whether to continuously interpolate between
// x0 and x, y0 and y.
uniform float u_position_interpolation_mode;

float a_color;
float a_last_color;

uniform float u_color_buffer_num;
uniform float u_last_color_buffer_num;

uniform vec3 u_color_constant;
uniform vec3 u_last_color_constant;

uniform float u_color_transform;
uniform float u_last_color_transform;
uniform vec2 u_color_domain;
uniform vec2 u_last_color_domain;
uniform float u_last_color_map_position;
uniform float u_color_map_position;

bool a_color_is_constant;
bool a_last_color_is_constant;

/*
python code to generate what follows.
def autogenerate_code():
  ks = ["x", "y", "jitter_radius", "jitter_speed", "size", "filter1", "filter2", "x0", "y0"]
  times = ["", "last_"]
  print("""
  //  BEGIN AUTOGENERATED. DO NOT EDIT. 
  // ------------------------------------------------    
  """)
  for k in ks:
    for time in times:
      timek = time + k
      print(f"""
  uniform float u_{timek}_buffer_num;
  uniform float u_{timek}_constant;
  uniform float u_{timek}_transform;
  uniform vec2 u_{timek}_domain;
  uniform vec2 u_{timek}_range;
  uniform float u_{timek}_map_position;
  float a_{timek};
  bool a_{timek}_is_constant;
      """)
  for i in range(0, 16):
    print(f"attribute float buffer_{i};")
  for k in ks:
    for time in times:
      timek = time + k
      print(f"""
    if (u_{timek}_buffer_num > -0.5) {{
      a_{timek} = get_buffer(u_{timek}_buffer_num);
      a_{timek}_is_constant = false;
    }} else {{
      a_{timek} = u_{timek}_constant;
      a_{timek}_is_constant = true;
    }}""")
  print("""
//  END AUTOGENERATED. DO NOT EDIT ABOVE. 
// ------------------------------------------------    
  """)

autogenerate_code()
*/
  //  BEGIN AUTOGENERATED. DO NOT EDIT. 
  // ------------------------------------------------    
  

  uniform float u_x_buffer_num;
  uniform float u_x_constant;
  uniform float u_x_transform;
  uniform vec2 u_x_domain;
  uniform vec2 u_x_range;
  uniform float u_x_map_position;
  float a_x;
  bool a_x_is_constant;
      

  uniform float u_last_x_buffer_num;
  uniform float u_last_x_constant;
  uniform float u_last_x_transform;
  uniform vec2 u_last_x_domain;
  uniform vec2 u_last_x_range;
  uniform float u_last_x_map_position;
  float a_last_x;
  bool a_last_x_is_constant;
      

  uniform float u_y_buffer_num;
  uniform float u_y_constant;
  uniform float u_y_transform;
  uniform vec2 u_y_domain;
  uniform vec2 u_y_range;
  uniform float u_y_map_position;
  float a_y;
  bool a_y_is_constant;
      

  uniform float u_last_y_buffer_num;
  uniform float u_last_y_constant;
  uniform float u_last_y_transform;
  uniform vec2 u_last_y_domain;
  uniform vec2 u_last_y_range;
  uniform float u_last_y_map_position;
  float a_last_y;
  bool a_last_y_is_constant;
      

  uniform float u_jitter_radius_buffer_num;
  uniform float u_jitter_radius_constant;
  uniform float u_jitter_radius_transform;
  uniform vec2 u_jitter_radius_domain;
  uniform vec2 u_jitter_radius_range;
  uniform float u_jitter_radius_map_position;
  float a_jitter_radius;
  bool a_jitter_radius_is_constant;
      

  uniform float u_last_jitter_radius_buffer_num;
  uniform float u_last_jitter_radius_constant;
  uniform float u_last_jitter_radius_transform;
  uniform vec2 u_last_jitter_radius_domain;
  uniform vec2 u_last_jitter_radius_range;
  uniform float u_last_jitter_radius_map_position;
  float a_last_jitter_radius;
  bool a_last_jitter_radius_is_constant;
      

  uniform float u_jitter_speed_buffer_num;
  uniform float u_jitter_speed_constant;
  uniform float u_jitter_speed_transform;
  uniform vec2 u_jitter_speed_domain;
  uniform vec2 u_jitter_speed_range;
  uniform float u_jitter_speed_map_position;
  float a_jitter_speed;
  bool a_jitter_speed_is_constant;
      

  uniform float u_last_jitter_speed_buffer_num;
  uniform float u_last_jitter_speed_constant;
  uniform float u_last_jitter_speed_transform;
  uniform vec2 u_last_jitter_speed_domain;
  uniform vec2 u_last_jitter_speed_range;
  uniform float u_last_jitter_speed_map_position;
  float a_last_jitter_speed;
  bool a_last_jitter_speed_is_constant;
      

  uniform float u_size_buffer_num;
  uniform float u_size_constant;
  uniform float u_size_transform;
  uniform vec2 u_size_domain;
  uniform vec2 u_size_range;
  uniform float u_size_map_position;
  float a_size;
  bool a_size_is_constant;
      

  uniform float u_last_size_buffer_num;
  uniform float u_last_size_constant;
  uniform float u_last_size_transform;
  uniform vec2 u_last_size_domain;
  uniform vec2 u_last_size_range;
  uniform float u_last_size_map_position;
  float a_last_size;
  bool a_last_size_is_constant;
      

  uniform float u_filter_buffer_num;
  uniform float u_filter_map_position;
  float a_filter1;
  bool a_filter_is_constant;
  uniform float u_last_filter_buffer_num;
  uniform float u_last_filter_map_position;
  float a_last_filter1;
  bool a_last_filter_is_constant;

  uniform float u_filter2_buffer_num;
  uniform float u_filter2_map_position;
  float a_filter2;
  bool a_filter2_is_constant;
  uniform float u_last_filter2_buffer_num;
  uniform float u_last_filter2_map_position;
  float a_last_filter2;
  bool a_last_filter2_is_constant;

  uniform float u_x0_buffer_num;
  uniform float u_x0_constant;
  uniform float u_x0_transform;
  uniform vec2 u_x0_domain;
  uniform vec2 u_x0_range;
  uniform float u_x0_map_position;
  float a_x0;
  bool a_x0_is_constant;
      

  uniform float u_last_x0_buffer_num;
  uniform float u_last_x0_constant;
  uniform float u_last_x0_transform;
  uniform vec2 u_last_x0_domain;
  uniform vec2 u_last_x0_range;
  uniform float u_last_x0_map_position;
  float a_last_x0;
  bool a_last_x0_is_constant;
      

  uniform float u_y0_buffer_num;
  uniform float u_y0_constant;
  uniform float u_y0_transform;
  uniform vec2 u_y0_domain;
  uniform vec2 u_y0_range;
  uniform float u_y0_map_position;
  float a_y0;
  bool a_y0_is_constant;
      

  uniform float u_last_y0_buffer_num;
  uniform float u_last_y0_constant;
  uniform float u_last_y0_transform;
  uniform vec2 u_last_y0_domain;
  uniform vec2 u_last_y0_range;
  uniform float u_last_y0_map_position;
  float a_last_y0;
  bool a_last_y0_is_constant;
      

attribute float buffer_0;
attribute float buffer_1;
attribute float buffer_2;
attribute float buffer_3;
attribute float buffer_4;
attribute float buffer_5;
attribute float buffer_6;
attribute float buffer_7;
attribute float buffer_8;
attribute float buffer_9;
attribute float buffer_10;
attribute float buffer_11;
attribute float buffer_12;
attribute float buffer_13;
attribute float buffer_14;
attribute float buffer_15;

// END AUTOGENERATED
  

highp float ix_to_random(in float ix, in float seed) {
  // For high numbers, taking the log avoids coincidence.
  highp float seed2 = log(ix) + 1.;
  vec2 co = vec2(seed2, seed);
  highp float a = 12.9898;
  highp float b = 78.233;
  highp float c = 43758.5453;
  highp float dt = dot(co.xy, vec2(a, b));
  highp float sn = mod(dt, 3.14);
  return fract(sin(sn) * c);
}

// The fill color.
varying vec4 fill;
varying float point_size;

uniform float u_jitter_radius_lookup;
uniform float u_jitter_radius_lookup_y_constant;
uniform vec2 u_jitter_radius_lookup_x_domain;
uniform vec2 u_jitter_radius_lookup_y_domain;

float point_size_adjust;

// A coordinate to throw away a vertex point.
vec4 discard_me = vec4(100.0, 100.0, 1.0, 1.0);

// Initialized in the main loop
// mat3 from_coord_to_gl;

const float e = 1.618282;
// I've been convinced.
const float tau = 2. * 3.14159265359;

float interpolate_raw(in float x, in float min, in float max) {
  if (x < min) {return 0.;}
  if (x > max) {return 1.;}
  return (x - min)/(max - min);
}

float interpolate(in float x, in float min, in float max) {
  if (max < min) {
    return 1. - interpolate_raw(x, max, min);
  } else {
    return interpolate_raw(x, min, max);
  }
}

/*

The following glsl code was written in python.

buffers = [*range(16)]

def write_buffs(buffs):
    if len(buffs) == 1:
        return[f"return buffer_{buffs[0]}"]
    condition_1 = ["  " + line for line in write_buffs(buffs[:len(buffs)//2])]
    condition_2 = ["" + line for line in write_buffs(buffs[len(buffs)//2:])]

    args = [
        f"if (i < {buffs[len(buffs) // 2 - 1]}.5) {{",
        *condition_1,
        "}",
        *condition_2
    ]
    return args

print("\\n".join(write_buffs(buffers)))
*/

float get_buffer(in float i) {
  //given an index, returns the appropriate buffer.
  if (i < 7.5) {
    if (i < 3.5) {
      if (i < 1.5) {
        if (i < 0.5) {
          return buffer_0;
        }
        return buffer_1;
      }
      if (i < 2.5) {
        return buffer_2;
      }
      return buffer_3;
    }
    if (i < 5.5) {
      if (i < 4.5) {
        return buffer_4;
      }
      return buffer_5;
    }
    if (i < 6.5) {
      return buffer_6;
    }
    return buffer_7;
  }
  if (i < 11.5) {
    if (i < 9.5) {
      if (i < 8.5) {
        return buffer_8;
      }
      return buffer_9;
    }
    if (i < 10.5) {
      return buffer_10;
    }
    return buffer_11;
  }
  if (i < 13.5) {
    if (i < 12.5) {
      return buffer_12;
    }
    return buffer_13;
  }
  if (i < 14.5) {
    return buffer_14;
  }
  return buffer_15;
}

float linstep(in vec2 range, in float x) {
  return interpolate(x, range.x, range.y);
  float scale_size = range.y - range.x;
  float from_left = x - range.x;
  return clamp(from_left / scale_size, 0.0, 1.0);
}

float linscale(in vec2 range, in float x) {
  float scale_size = range.y - range.x;
  float from_left = x - range.x;
  return from_left / scale_size;
}

vec2 box_muller(in float ix, in float seed) {
  // Box-Muller transform gives you two gaussian randoms for two uniforms.
  highp float U = ix_to_random(ix, seed);
  highp float V = ix_to_random(ix, seed + 17.123123);
  return vec2(sqrt(-2. * log(U)) * cos(tau * V),
              sqrt(-2. * log(U)) * sin(tau * V));
}

/*************** END COLOR SCALES *******************************/

float domainify(in vec2 domain, in float transform, in float attr, in bool clamped) {

  // Clamp an attribute into a domain, with an option log or sqrt transform.
  if (transform == 2.) {
    domain = sqrt(domain);
    attr = sqrt(attr);
  }
  if (transform == 3.) {
    domain = log(domain);
    attr = log(attr);
  }
  if (clamped) {
    return linstep(domain, attr);
  } else {
    return linscale(domain, attr);
  }
}

mat3 pixelspace_to_glspace;

float run_numeric_filter (in float a_filter,
  in float u_filter_op, in float u_filter_param_1,
  in float u_filter_param_2) {
  bool truthy;
  if (u_filter_op < 1.5) {
    truthy = a_filter < u_filter_param_1;
  } else if (u_filter_op < 2.5) {
    truthy = a_filter > u_filter_param_1;
  } else if (u_filter_op < 3.5) {
    truthy = a_filter == u_filter_param_1;
  } else if (u_filter_op < 4.5) {
    truthy = abs(a_filter - u_filter_param_2) < u_filter_param_1;
  }
  if (truthy) {return 1.;} else {return 0.;}
}

float choose_and_run_filter(
  in vec3 u_filter_numeric,
  in float a_filter,
  in float map_location,
  in bool filter_is_constant
  ) {
    if (filter_is_constant) {
      return 1.;
    }
    if (u_filter_numeric.r < 0.5) {
      // Must be on a dictionary. Unreasonable assumption, maybe?
      float frac_filter = linstep(vec2(-2047., 2047), a_filter);
      float map_coords = (map_location - .5) / 32.;
      return texture2D(u_one_d_aesthetic_map, vec2(map_coords, frac_filter)).a;
    } else {
      return run_numeric_filter(a_filter,
        u_filter_numeric.r, u_filter_numeric.g, u_filter_numeric.b);
    }
}

const float tau_0 = 2. * 3.14159265359;

highp float ix_to_random_1540259130(in float ix, in float seed) {
  // For high numbers, taking the log avoids coincidence.
  highp float seed2 = log(ix) + 1.;
  vec2 co = vec2(seed2, seed);
  highp float a = 12.9898;
  highp float b = 78.233;
  highp float c = 43758.5453;
  highp float dt= dot(co.xy ,vec2(a,b));
  highp float sn= mod(dt,3.14);
  return fract(sin(sn) * c);
}

highp vec2 box_muller_1540259130(in float ix, in float seed) {
  // Box-Muller transform gives you two gaussian randoms for two uniforms.
  highp float U = ix_to_random_1540259130(ix, seed);
  highp float V = ix_to_random_1540259130(ix, seed + 17.123123);
  return vec2(
    sqrt(-2.*log(U))*cos(tau_0*V),
    sqrt(-2.*log(U))*sin(tau_0*V)
  );
}

vec2 logarithmic_spiral_jitter_1540259130(
  in float ix, // a random seed.
  in float a, // offset
  in float angle_parameter_1540259130, // angle parameter
  in float randomize_angle_1540259130, // sd radians
  in float max_r_1540259130, // Maximum radius of spiral.
  in float randomize_rotation_max_radians_1540259130, // in standard deviations to the log-multiplier.
  in float randomize_radius_1540259130, // in standard deviation percentage points.
  in float hole, // donut hole size.
  in float speed_0, // webgl units per second.
  in float time_0,// The time, in seconds, to plot at. Generally passed as a uniform or something.
  in float acceleration,
  in float n_spirals_1540259130,
  in float shear,
  in float aspect_ratio_1540259130
  ) {
  // Each point starts at a different place on the spiral.
  vec2 two_gaussians_1540259130 = box_muller_1540259130(ix, 55.1);

  highp float calculated_angle = angle_parameter_1540259130 + two_gaussians_1540259130.x * randomize_angle_1540259130;
  float k = 1. / tan(calculated_angle);
  if (k > 100000.) {
    k = 0.;
  }

  // The length of the segment to be traversed.
  float arc_length =  sqrt((1. + k*k)/k) * (max_r_1540259130 - a);
  float period = arc_length / speed_0;

  // Every point needs to start at a different place along the curve.
  float stagger_time = ix_to_random_1540259130(ix, 3.);

  // How long does a circuit take? Add some random noise.
  float time_period = period * exp(box_muller_1540259130(ix, 0.031).x / 6.);

  // Adjust u_time from the clock to our current spot.
  float varying_time = time_0 + stagger_time * time_period;

  // Adjust that time by raising to a power to set the speed along the curve.
  // Not sure if this is the soundest way to parametrize.
  float relative_time = pow(1. - mod(varying_time, time_period)/time_period, acceleration);

  // Calculate the radius at this time point.
  float radius = max_r_1540259130 * relative_time + a;

  // The angle implied by that radius.
  float theta  = 1./k * log(radius / a);

  /* A different way to calculate radius from the theta. Not used
  float max_theta = 1. / k * log(max_r / a);
  float theta2 = max_theta * relative_time;
  vec2 pos_theta_style = vec2(a * exp(k * theta2), theta2);
  radius = pos_theta_style.x;
  theta = pos_theta_style.y;
  */

  // If multiple spirals, the theta needs to be rotated for which spiral we're in.
  // Choose it based on a new random seed.
  float which_spiral = floor(ix_to_random_1540259130(ix, 13.13) * n_spirals_1540259130);
  float which_spiral_adjust = which_spiral / n_spirals_1540259130 * tau_0;
  theta = theta + which_spiral_adjust;

  // Add some gaussian jitter to the polar coordinates.
  vec2 polar_jitter = box_muller_1540259130(ix, 24.);

  highp float radius_adjust = 1. + polar_jitter.x * randomize_radius_1540259130;
  highp float theta_adjust = polar_jitter.y * randomize_rotation_max_radians_1540259130;

  vec2 shear_adjust = box_muller_1540259130(ix, 59.1) * shear;

  mat3 shear_mat = mat3(
    1., shear_adjust.x, 0.,
    shear_adjust.y, 1., 0.,
    0., 0., 1.);
  // into euclidean space.
  vec3 pos_spiral = vec3(
   cos(theta + theta_adjust)*(radius * radius_adjust + hole),
   sin(theta + theta_adjust)*(radius * radius_adjust + hole),
   0.
  );
  mat3 adjust_to_viewport =
         mat3(
            1./aspect_ratio_1540259130, 0., 0.,
            0., 1., 0.,
            0., 0., 1.);

  pos_spiral = pos_spiral * shear_mat * 
               adjust_to_viewport;
  return pos_spiral.xy;
}

#define FLOAT_MAX  1.70141184e38
#define FLOAT_MIN  1.17549435e-38

lowp vec4 encode_float_1604150559(highp float v) {
  highp float av = abs(v);

  //Handle special cases
  if(av < FLOAT_MIN) {
    return vec4(0.0, 0.0, 0.0, 0.0);
  } else if(v > FLOAT_MAX) {
    return vec4(127.0, 128.0, 0.0, 0.0) / 255.0;
  } else if(v < -FLOAT_MAX) {
    return vec4(255.0, 128.0, 0.0, 0.0) / 255.0;
  }

  highp vec4 c = vec4(0,0,0,0);

  //Compute exponent and mantissa
  highp float e = floor(log2(av));
  highp float m = av * pow(2.0, -e) - 1.0;
  
  //Unpack mantissa
  c[1] = floor(128.0 * m);
  m -= c[1] / 128.0;
  c[2] = floor(32768.0 * m);
  m -= c[2] / 32768.0;
  c[3] = floor(8388608.0 * m);
  
  //Unpack exponent
  highp float ebias = e + 127.0;
  c[0] = floor(ebias / 2.0);
  ebias -= c[0] * 2.0;
  c[1] += floor(ebias) * 128.0; 

  //Unpack sign bit
  c[0] += 128.0 * step(0.0, -v);

  //Scale back to range
  return c / 255.0;
}

#ifndef PI
#define PI 3.141592653589793
#endif

float sineInOut_0(float t) {
  return -0.5 * (cos(PI * t) - 1.0);
}

#ifndef PI
#define PI 3.141592653589793
#endif

vec2 bezier_interpolate(vec2 p1, vec2 p2, float frac, float ix) {
  // Interpolates between two points on a Bezier curve around a jittered middle.
    vec2 midpoint = box_muller(ix, 3.) * .05 *
         dot(p2 - p1, p2 - p1)
         + p2 / 2. + p1 / 2.;

      return mix(
        mix(p2, midpoint, frac),
        mix(midpoint, p1, frac),
      frac);
}

float sineInOut(float t) {
  return -0.5 * (cos(PI * t) - 1.0);
}

const vec4 decoder = vec4(1./256./256./256., 1. / 256. / 256., 1. / 256., 1.);

float RGBAtoFloat(in vec4 floater) {
  //return 0.05;
  // Scale values up by 256.
  return dot(floater, decoder);
}

float texture_float_lookup(in vec2 domain,
                           in vec2 range,
                           in float transform,
                           in float attr,
                           in float texture_position,
                           in float y_attr,// not used
                           in vec2 y_range) { // not used.
  if (transform == 4.0) {
    // Literal transforms aren't looked up, just returned as is.
    return attr;
  }
  float inrange = domainify(domain, transform, attr, true);
  if (texture_position > 0.5) {
    float y_pos = texture_position / 32. - 0.5 / 32.;
    vec4 encoded = texture2D(u_one_d_aesthetic_map, vec2(y_pos, inrange));
    return encoded.a;
    return RGBAtoFloat(encoded); // unreachable.
  } else {
    return mix(range.x, range.y, inrange);
  }
}

float texture_float_lookup(in vec2 domain,
                           in vec2 range,
                           in float transform,
                           in float attr,
                           in float texture_pos) {

  return texture_float_lookup(domain,
                              range,
                              transform,
                              attr,
                              texture_pos,
                              1.,
                              vec2(0., 2.));
}

vec2 calculate_position(in vec2 position, in float x_scale_type,
                        in vec2 x_domain, in vec2 x_range, in float y_scale_type,
                        in vec2 y_domain, in vec2 y_range, in mat3 window_scale,
                        in mat3 zoom, in float x_map_position,
                        in float y_map_position
                        ) {
    float x;
    float y;

    if (x_scale_type < 4.0) {
      x = texture_float_lookup(x_domain, x_range,
        x_scale_type,
        position.x, x_map_position, 1., vec2(0., 2.)
        );
    } else {
      x = position.x;
    }

    if (x_scale_type < 4.0) {
      y = texture_float_lookup(y_domain, y_range, y_scale_type,
        position.y, y_map_position, 1., vec2(0., 2.)
        );
    } else {
      y = position.y;
    }

    vec3 pos2d = vec3(x, y, 1.0) * window_scale * zoom * pixelspace_to_glspace;
    return pos2d.xy;
}

float cubicInOut(float t) {
  return t < 0.5
    ? 4.0 * t * t * t
    : 1. - 4.0 * pow(1. - t, 3.0);
}

vec4 ixToRGBA(in float ix)  {
  float min = fract(ix / 256.);
  float mid = fract((ix - min) / 256.);
  float high = fract((ix - min - mid * 256.) / (256.) / 256.);
  return vec4(min, mid, high, 1.);
}

vec2 circle_jitter(in float ix, in float aspect_ratio, in float time,
                   in float radius, in float speed) {
  vec2 two_gaussians = box_muller(ix, 12.);

  float stagger_time = two_gaussians.y * tau;

  // How long does a circuit take?

  float units_per_period = radius * radius * tau / 2.;
  float units_per_second = speed / 100.;
  float seconds_per_period = units_per_period / units_per_second;
  float time_period = seconds_per_period;
  if (time_period > 1e4) {
    return vec2(0., 0.);
  }

  // Adjust time from the clock to our current spot.
  float varying_time = time + stagger_time * time_period;
  // Where are we from 0 to 1 relative to the time period

  float relative_time = 1. - mod(varying_time, time_period) / time_period;

  float theta = relative_time * tau;

  float r_mult = (sqrt(ix_to_random(ix, 7.)));
  return vec2(cos(theta) * r_mult, aspect_ratio * sin(theta) * r_mult) *
         radius;
}

vec2 calculate_jitter(
  in float jitter_type,
  in float ix, // distinguishing index
  in vec2 jitter_radius_domain,
  in vec2 jitter_radius_range,
  in float jitter_radius_transform,
  in float jitter_radius,
  in float jitter_radius_map_position,
  in bool jitter_radius_is_constant,
  in vec2 jitter_speed_domain,
  in vec2 jitter_speed_range,
  in float jitter_speed_transform,
  in float jitter_speed,
  in float jitter_speed_map_position,
  in bool jitter_speed_is_constant
) {

  // Jitter is calculated based on speed, so requires two full maps in.

  if (jitter_type == 0.) {
    // No jitter
    return vec2(0., 0.);
  }

  if (jitter_type == 5.) {
    // Temporal jitter--should be broken out into a separate channel/channels.
    float time_period = 60.;
    float share = 1./4.;
    float offset = ix_to_random(ix, 12.);
    float fractional = fract((offset * time_period + u_time)/time_period);
    if (fractional > share) {
      return vec2(0., 0.);
    }
    float size = 0.5 * (1. - cos(2. * 3.1415926 * min(fractional/share, 1. - fractional/share)));
    size = clamp(size, 0., 1.);
    return vec2(size, 0.);
  }
  float jitter_r;  
  if (jitter_radius_is_constant) {
    jitter_r = jitter_radius;
  } else {
    jitter_r = texture_float_lookup(
    jitter_radius_domain,
    jitter_radius_range,
    jitter_radius_transform,
    jitter_radius,
    0., 0., vec2(-1., 1.));
  }
  if (jitter_type == 3.) {
    float r = box_muller(ix, 1.).r * jitter_r;
    r = r / u_k;    
    float theta = ix_to_random(ix, 15.) * tau;
    return vec2(cos(theta) * r, sin(theta) * r * u_width / u_height);
  }

  if (jitter_type == 2.) {
    // uniform in the circle.
    float theta = ix_to_random(ix, 15.) * tau;
    float r = jitter_r * sqrt(ix_to_random(ix, 115.));
    r = r / u_k;
    return vec2(cos(theta) * r, sin(theta) * r * u_width / u_height);
  }

  /* Jittering that includes motion) */

  float p_jitter_speed =
      texture_float_lookup(jitter_speed_domain,
                          jitter_speed_range,
                          jitter_speed_transform, jitter_speed,
                          jitter_speed_map_position,  1., vec2(0., 2.));

  if (jitter_type == 1.) {
    return logarithmic_spiral_jitter_1540259130(
                ix,
                0.005 * jitter_r,                     // a
                1.3302036,                       // angle parameter
                0.005,                                 // angle random
                jitter_r,                             // max radius
                0.03,                                 // random_rotation
                0.06,                                 // random radius
                0.003 * point_size_adjust * jitter_r, // donut.
                .5 * p_jitter_speed * jitter_r / point_size_adjust, // speed
                u_time,                                           // time
                0.8,                                              // acceleration
                2.0,                                              // n_spirals
                .09, //shear
                u_width/u_height         // shear
            );
  }

  if (jitter_type == 4.) {
    // circle
    return circle_jitter(ix, u_width/u_height, u_time, jitter_r, p_jitter_speed);
  }
}

void run_color_fill(in float ease) {

  if (u_only_color >= -1.5) {
    if (u_only_color > -.5 && a_color != u_only_color) {
      gl_Position = discard_me;
      return;
    } else {
      // -1 is a special value meaning 'plot everything'.
      fill = vec4(0., 0., 0., 1. / 255.);
      gl_PointSize = 1.;
    }
  } else {
    if (a_color_is_constant) {
      fill = vec4(u_color_constant.rgb, u_current_alpha);
    } else {
      float fractional_color = linstep(u_color_domain, a_color);
      float color_pos = (u_color_map_position * -1. - 1.) / 32. + 0.5 / 32.;
      fill = texture2D(u_color_aesthetic_map , vec2(color_pos, fractional_color));
      fill = vec4(fill.rgb, u_current_alpha);
    }
    if (ease < 1.) {
      vec4 last_fill;
      if (a_last_color_is_constant) {
        last_fill = vec4(u_last_color_constant.rgb, u_last_alpha);
      } else {
        float last_fractional = linstep(u_last_color_domain, a_last_color);
        float color_pos = (u_last_color_map_position * -1. - 1.) / 32. + 0.5 / 32.;
        last_fill = texture2D(u_color_aesthetic_map, vec2(color_pos, last_fractional));
        // Alpha channel interpolation already happened.
        last_fill = vec4(last_fill.rgb, u_last_alpha);
      }
      // RGB blending is bad--maybe use https://www.shadertoy.com/view/lsdGzN
      // instead?
      fill = mix(last_fill, fill, ease);
    }
  }
}

void main() {
  float debug_mode = 0.;
  float ix = buffer_0;
  if (ix > u_maxix && debug_mode < 1.) {
    // throw away points that are too low.
    gl_Position = discard_me;
    return;
  }

  if (debug_mode > 1.5) {
    // Debug mode.
//    fill = vec4(ix_to_random(ix, 15.), ix_to_random(ix, 15.), ix_to_random(ix, 11.), 1.);
    gl_PointSize = 2.;
    gl_Position = vec4(box_muller(ix, 2.).xy * .33, 0., 1.);
    return;
  }

 // Autogenerated below this point
 if (u_x_buffer_num > -0.5) {
      a_x = get_buffer(u_x_buffer_num);
      a_x_is_constant = false;
    } else {
      a_x = u_x_constant;
      a_x_is_constant = true;
    }

    if (u_last_x_buffer_num > -0.5) {
      a_last_x = get_buffer(u_last_x_buffer_num);
      a_last_x_is_constant = false;
    } else {
      a_last_x = u_last_x_constant;
      a_last_x_is_constant = true;
    }

    if (u_y_buffer_num > -0.5) {
      a_y = get_buffer(u_y_buffer_num);
      a_y_is_constant = false;
    } else {
      a_y = u_y_constant;
      a_y_is_constant = true;
    }

    if (u_last_y_buffer_num > -0.5) {
      a_last_y = get_buffer(u_last_y_buffer_num);
      a_last_y_is_constant = false;
    } else {
      a_last_y = u_last_y_constant;
      a_last_y_is_constant = true;
    }

    if (u_jitter_radius_buffer_num > -0.5) {
      a_jitter_radius = get_buffer(u_jitter_radius_buffer_num);
      a_jitter_radius_is_constant = false;
    } else {
      a_jitter_radius = u_jitter_radius_constant;
      a_jitter_radius_is_constant = true;
    }

    if (u_last_jitter_radius_buffer_num > -0.5) {
      a_last_jitter_radius = get_buffer(u_last_jitter_radius_buffer_num);
      a_last_jitter_radius_is_constant = false;
    } else {
      a_last_jitter_radius = u_last_jitter_radius_constant;
      a_last_jitter_radius_is_constant = true;
    }

    if (u_jitter_speed_buffer_num > -0.5) {
      a_jitter_speed = get_buffer(u_jitter_speed_buffer_num);
      a_jitter_speed_is_constant = false;
    } else {
      a_jitter_speed = u_jitter_speed_constant;
      a_jitter_speed_is_constant = true;
    }

    if (u_last_jitter_speed_buffer_num > -0.5) {
      a_last_jitter_speed = get_buffer(u_last_jitter_speed_buffer_num);
      a_last_jitter_speed_is_constant = false;
    } else {
      a_last_jitter_speed = u_last_jitter_speed_constant;
      a_last_jitter_speed_is_constant = true;
    }

    if (u_size_buffer_num > -0.5) {
      a_size = get_buffer(u_size_buffer_num);
      a_size_is_constant = false;
    } else {
      a_size = u_size_constant;
      a_size_is_constant = true;
    }

    if (u_last_size_buffer_num > -0.5) {
      a_last_size = get_buffer(u_last_size_buffer_num);
      a_last_size_is_constant = false;
    } else {
      a_last_size = u_last_size_constant;
      a_last_size_is_constant = true;
    }

    if (u_filter_buffer_num > -0.5) {
      a_filter1 = get_buffer(u_filter_buffer_num);
      a_filter_is_constant = false;
    } else {
      a_filter1 = 1.;
      a_filter_is_constant = true;
    }

    if (u_last_filter_buffer_num > -0.5) {
      a_last_filter1 = get_buffer(u_last_filter_buffer_num);
      a_last_filter_is_constant = false;
    } else {
      a_last_filter1 = 1.;
      a_last_filter_is_constant = true;
    }

    if (u_filter2_buffer_num > -0.5) {
      a_filter2 = get_buffer(u_filter2_buffer_num);
      a_filter2_is_constant = false;
    } else {
      a_filter2 = 1.;
      a_filter2_is_constant = true;
    }

    if (u_last_filter2_buffer_num > -0.5) {
      a_last_filter2 = get_buffer(u_last_filter2_buffer_num);
      a_last_filter2_is_constant = false;
    } else {
      a_last_filter2 = 1.;
      a_last_filter2_is_constant = true;
    }

    if (u_x0_buffer_num > -0.5) {
      a_x0 = get_buffer(u_x0_buffer_num);
      a_x0_is_constant = false;
    } else {
      a_x0 = u_x0_constant;
      a_x0_is_constant = true;
    }

    if (u_last_x0_buffer_num > -0.5) {
      a_last_x0 = get_buffer(u_last_x0_buffer_num);
      a_last_x0_is_constant = false;
    } else {
      a_last_x0 = u_last_x0_constant;
      a_last_x0_is_constant = true;
    }

    if (u_y0_buffer_num > -0.5) {
      a_y0 = get_buffer(u_y0_buffer_num);
      a_y0_is_constant = false;
    } else {
      a_y0 = u_y0_constant;
      a_y0_is_constant = true;
    }

    if (u_last_y0_buffer_num > -0.5) {
      a_last_y0 = get_buffer(u_last_y0_buffer_num);
      a_last_y0_is_constant = false;
    } else {
      a_last_y0 = u_last_y0_constant;
      a_last_y0_is_constant = true;
    }
//  END AUTOGENERATED. DO NOT EDIT ABOVE. 
// ------------------------------------------------    
  gl_PointSize = 1.;

  if (u_color_buffer_num > -0.5) {
    a_color = get_buffer(u_color_buffer_num);
    a_color_is_constant = false;
  } else {
    a_color = ix;
    a_color_is_constant = true;
  }

  if (u_last_color_buffer_num > -0.5) {
    a_last_color = get_buffer(u_last_color_buffer_num);
    a_last_color_is_constant = false;
  } else {
    a_last_color = ix;
    a_last_color_is_constant = true;
  }

  pixelspace_to_glspace = mat3(
      2. / u_width, 0., -1.,
      0., - 2. / u_height, 1.,
      0., 0., 1.
  );

  float interpolation =
    interpolate(u_update_time, 0., u_transition_duration);
    
  float ease = interpolation;

  // I set this sometimes.

  vec2 position = vec2(a_x, a_y);
  vec2 old_position = vec2(a_last_x, a_last_y);

  old_position = calculate_position(old_position, u_last_x_transform,
     u_last_x_domain, u_last_x_range,
     u_last_y_transform, u_last_y_domain, u_last_y_range,
     u_last_window_scale,
     u_zoom, u_last_x_map_position,      
     u_last_y_map_position);
     
  bool plot_actual_position = u_grid_mode < .5;

  if (plot_actual_position) {
    position = calculate_position(position, 
      u_x_transform,
      u_x_domain, u_x_range,
      u_y_transform, u_y_domain, 
      u_y_range, u_window_scale, u_zoom, 
      u_x_map_position, u_y_map_position);

    float xpos = clamp((1. + position.x) / 2., 0., 1.);
    float randy = ix_to_random(ix, 13.76);
    float delay = xpos + randy * .1;

    delay = delay * 3.;
    // delay = 0.;
    float frac = interpolate(
      u_update_time,
      delay,
      u_transition_duration + delay
    );

    if (u_position_interpolation_mode > 0.) {
      // If it's a continuous loop, just choose a random point along that loop.
      frac = fract(u_update_time/u_transition_duration);
      frac = fract(frac + randy);
    }

    frac = sineInOut_0(frac);

    if (frac <= 0.) {
      position = old_position;
    } else if (frac < 1.) {
      frac = fract(frac);
      position = bezier_interpolate(position, old_position, frac, ix);
    }
  } else {
     position.x = -1. + 2. * linscale(u_x_domain, position.x);
    //position.y = -1.0;
    vec2 jitterspec = vec2(
      (ix_to_random(ix, 3.) * a_jitter_radius ) * 2.,
      (ix_to_random(ix, 1.5) * a_jitter_speed ) * 2.
    );

    position = position + jitterspec;
  }

  /* FILTERING */

  float filter1_status = choose_and_run_filter(
    u_filter_numeric,
    a_filter1,
    u_filter_map_position,
    a_filter_is_constant
  );

  float last_filter1_status = choose_and_run_filter(
    u_last_filter_numeric,
    a_last_filter1,
    u_last_filter_map_position,
    a_last_filter_is_constant
  );

  float filter2_status = choose_and_run_filter(
    u_filter2_numeric,
    a_filter2,
    u_filter2_map_position,
    a_filter2_is_constant
  );

  float last_filter2_status = choose_and_run_filter(
    u_last_filter2_numeric,
    a_last_filter2,
    u_last_filter2_map_position,
    a_last_filter2_is_constant
  );

  bool was_filtered = last_filter2_status < .5 || last_filter1_status < .5;
  bool will_be_filtered = filter2_status < .5 || filter1_status < .5;

  bool filter_status = will_be_filtered;

  if (ease < ix_to_random(ix, 1.)) {
    filter_status = was_filtered;
  }

  if (filter_status == true) {
    gl_Position = discard_me;
    return;
  }

  float size_multiplier = texture_float_lookup(
    u_size_domain, u_size_range,
    u_size_transform, a_size, u_size_map_position);

  float last_size_multiplier = texture_float_lookup(
    u_last_size_domain, u_last_size_range, u_last_size_transform, a_last_size,
    u_last_size_map_position);

  size_multiplier = u_base_size * 
     mix(last_size_multiplier, size_multiplier, ease);
  
  float depth_size_adjust = (1.0 - ix / (u_maxix));

  // It's ugly on new macs when it jumps straight from one to two for a bunch of points at once.
  float size_fuzz = exp(ix_to_random(ix, 3.1) * .5 - .25);
  point_size_adjust = exp(log(u_k) * u_zoom_balance) * size_fuzz * depth_size_adjust;
//  point_size_adjust = exp(log(u_k) * u_zoom_balance);

  gl_PointSize = point_size_adjust * size_multiplier;

  if (gl_PointSize  <= 0.01) {
    gl_Position = discard_me;
    return;
  }

  vec2 jitter = vec2(0., 0.);

  if (plot_actual_position && (u_jitter > 0. || u_last_jitter > 0.)) {
    /* JITTER */
    float jitter_radius_fraction;
      jitter = calculate_jitter(
        u_jitter, ix,
        u_jitter_radius_domain,        u_jitter_radius_range,
        u_jitter_radius_transform,        a_jitter_radius,
        u_jitter_radius_map_position,        a_jitter_radius_is_constant,
        u_jitter_speed_domain,
        u_jitter_speed_range,
        u_jitter_speed_transform, a_jitter_speed,
        u_jitter_speed_map_position, a_jitter_speed_is_constant
      );
    vec2 last_jitter;
    if (ease < 1.) {
      last_jitter = calculate_jitter(
        u_last_jitter, ix,
        u_last_jitter_radius_domain,       
        u_last_jitter_radius_range,
        u_last_jitter_radius_transform,        
        a_last_jitter_radius,
        u_last_jitter_radius_map_position,
        a_last_jitter_radius_is_constant,
        u_last_jitter_speed_domain,
        u_last_jitter_speed_range,
        u_last_jitter_speed_transform,
        a_last_jitter_speed,
        u_last_jitter_speed_map_position,
        a_last_jitter_speed_is_constant
      );
      jitter = mix(last_jitter, jitter, ease);
    }
    if (u_jitter == 5.) {
      gl_PointSize *= jitter.x;
      jitter = vec2(0., 0.);
      if (gl_PointSize < 0.05) {
        gl_Position = discard_me;
        return;
      }
    }
    gl_Position = vec4(position + jitter, 0., 1.);
  } else {
    gl_Position = vec4(position + jitter, 0., 1.);
  }  
  if (u_color_picker_mode > 0.) {
    // Add one so the first element is distinguishable.
    fill = encode_float_1604150559(ix + 1.);
  } else {
    run_color_fill(ease);
  }
  point_size = gl_PointSize;
/*  if (u_use_glyphset > 0. && point_size > 5.0) {
    float random_letter = floor(64. * ix_to_random(ix, 1.3));
    letter_pos = vec2(
      // start at a number between 0 and 7.
      mod(random_letter, 8.) / 8.,
      floor(random_letter / 8.) / 8.
    );
    gl_PointSize *= 3.0;
  }*/
}
`;
var frag_shader = "#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives : enable\n#endif\n\nprecision mediump float;\n#define GLSLIFY 1\n\nvarying vec4 fill;\nvarying vec2 letter_pos;\nvarying float point_size;\n\nuniform float u_only_color;\nuniform float u_color_picker_mode;\n//uniform float u_use_glyphset;\n//uniform sampler2D u_glyphset;\n\nfloat delta = 0.0, alpha = 1.0;\n\nbool out_of_circle(in vec2 coord) {\n  vec2 cxy = 2.0 * coord - 1.0;\n  float r_sq = dot(cxy, cxy);\n  if (r_sq > 1.03) {return true;}\n  return false;\n}\n\nbool out_of_hollow_circle(in vec2 coord) {\n  vec2 cxy = 2.0 * coord - 1.0;\n  float r_sq = dot(cxy, cxy);\n  if (r_sq > 1.01) {return true;}\n  float distance_from_edge = (1.0 - r_sq) * point_size;\n  if (distance_from_edge > 4.0) {return true;}\n  return false;\n}\n\nbool out_of_triangle(in vec2 coord) {\n  if (coord.y > (2. * abs(coord.x - .5))) {\n    return false;\n  }\n  return true;\n}\n\nvoid main() {\n  if (u_only_color >= -1.5) {\n    gl_FragColor = vec4(0., 0., 0., 1./255.);\n    return;\n  }\n\n  float alpha = fill.a;\n//  if (u_use_glyphset == 0. || point_size < 5.0) {\n    if (out_of_circle(gl_PointCoord)) {\n      discard;\n      return;\n    }\n    vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n    float r = dot(cxy, cxy);\n    #ifdef GL_OES_standard_derivatives\n      delta = fwidth(r);\n      alpha *= (1.0 - smoothstep(1.0 - delta, 1.0 + delta, r));\n    #endif\n/*  } else {\n    vec2 coords = letter_pos + gl_PointCoord/8.;\n//    vec2 coords = vec2(.2, .2);\n    vec4 sprite = texture2D(u_glyphset, coords);\n    alpha *= (sprite.a);  \n//    fill = vec4(1.0, 1.0, 1.0, alpha);  \n    if (alpha <= 0.03) discard;\n  }*/\n  // Pre-blend the alpha channel.\n  if (u_color_picker_mode == 1.) {\n    // no alpha when color picking; we use all four channels for that.\n    gl_FragColor = fill;\n  } else {\n    gl_FragColor = vec4(fill.rgb * alpha, alpha);\n  }\n\n}\n";
function colors(specifier) {
  var n = specifier.length / 6 | 0, colors2 = new Array(n), i = 0;
  while (i < n)
    colors2[i] = "#" + specifier.slice(i * 6, ++i * 6);
  return colors2;
}
var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");
var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");
var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");
var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");
var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");
var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");
var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");
var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");
var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");
var Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
var ramp$1 = (scheme2) => rgbBasis(scheme2[scheme2.length - 1]);
var scheme$q = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(colors);
var BrBG = ramp$1(scheme$q);
var scheme$p = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(colors);
var PRGn = ramp$1(scheme$p);
var scheme$o = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(colors);
var PiYG = ramp$1(scheme$o);
var scheme$n = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(colors);
var PuOr = ramp$1(scheme$n);
var scheme$m = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(colors);
var RdBu = ramp$1(scheme$m);
var scheme$l = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(colors);
var RdGy = ramp$1(scheme$l);
var scheme$k = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(colors);
var RdYlBu = ramp$1(scheme$k);
var scheme$j = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(colors);
var RdYlGn = ramp$1(scheme$j);
var scheme$i = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(colors);
var Spectral = ramp$1(scheme$i);
var scheme$h = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(colors);
var BuGn = ramp$1(scheme$h);
var scheme$g = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(colors);
var BuPu = ramp$1(scheme$g);
var scheme$f = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(colors);
var GnBu = ramp$1(scheme$f);
var scheme$e = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(colors);
var OrRd = ramp$1(scheme$e);
var scheme$d = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(colors);
var PuBuGn = ramp$1(scheme$d);
var scheme$c = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(colors);
var PuBu = ramp$1(scheme$c);
var scheme$b = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(colors);
var PuRd = ramp$1(scheme$b);
var scheme$a = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(colors);
var RdPu = ramp$1(scheme$a);
var scheme$9 = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(colors);
var YlGnBu = ramp$1(scheme$9);
var scheme$8 = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(colors);
var YlGn = ramp$1(scheme$8);
var scheme$7 = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(colors);
var YlOrBr = ramp$1(scheme$7);
var scheme$6 = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(colors);
var YlOrRd = ramp$1(scheme$6);
var scheme$5 = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(colors);
var Blues = ramp$1(scheme$5);
var scheme$4 = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(colors);
var Greens = ramp$1(scheme$4);
var scheme$3 = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(colors);
var Greys = ramp$1(scheme$3);
var scheme$2 = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(colors);
var Purples = ramp$1(scheme$2);
var scheme$1 = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(colors);
var Reds = ramp$1(scheme$1);
var scheme = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(colors);
var Oranges = ramp$1(scheme);
function cividis(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))) + ")";
}
var cubehelix = cubehelixLong(cubehelix$2(300, 0.5, 0), cubehelix$2(-240, 0.5, 1));
var warm = cubehelixLong(cubehelix$2(-100, 0.75, 0.35), cubehelix$2(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix$2(260, 0.75, 0.35), cubehelix$2(80, 1.5, 0.8));
var c$1 = cubehelix$2();
function rainbow(t) {
  if (t < 0 || t > 1)
    t -= Math.floor(t);
  var ts = Math.abs(t - 0.5);
  c$1.h = 360 * t - 100;
  c$1.s = 1.5 - 1.5 * ts;
  c$1.l = 0.8 - 0.9 * ts;
  return c$1 + "";
}
var c = rgb(), pi_1_3 = Math.PI / 3, pi_2_3 = Math.PI * 2 / 3;
function sinebow(t) {
  var x;
  t = (0.5 - t) * Math.PI;
  c.r = 255 * (x = Math.sin(t)) * x;
  c.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
  c.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
  return c + "";
}
function turbo(t) {
  t = Math.max(0, Math.min(1, t));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))) + ")";
}
function ramp(range2) {
  var n = range2.length;
  return function(t) {
    return range2[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));
var d3Chromatic = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  schemeCategory10: category10,
  schemeAccent: Accent,
  schemeDark2: Dark2,
  schemePaired: Paired,
  schemePastel1: Pastel1,
  schemePastel2: Pastel2,
  schemeSet1: Set1,
  schemeSet2: Set2,
  schemeSet3: Set3,
  schemeTableau10: Tableau10,
  interpolateBrBG: BrBG,
  schemeBrBG: scheme$q,
  interpolatePRGn: PRGn,
  schemePRGn: scheme$p,
  interpolatePiYG: PiYG,
  schemePiYG: scheme$o,
  interpolatePuOr: PuOr,
  schemePuOr: scheme$n,
  interpolateRdBu: RdBu,
  schemeRdBu: scheme$m,
  interpolateRdGy: RdGy,
  schemeRdGy: scheme$l,
  interpolateRdYlBu: RdYlBu,
  schemeRdYlBu: scheme$k,
  interpolateRdYlGn: RdYlGn,
  schemeRdYlGn: scheme$j,
  interpolateSpectral: Spectral,
  schemeSpectral: scheme$i,
  interpolateBuGn: BuGn,
  schemeBuGn: scheme$h,
  interpolateBuPu: BuPu,
  schemeBuPu: scheme$g,
  interpolateGnBu: GnBu,
  schemeGnBu: scheme$f,
  interpolateOrRd: OrRd,
  schemeOrRd: scheme$e,
  interpolatePuBuGn: PuBuGn,
  schemePuBuGn: scheme$d,
  interpolatePuBu: PuBu,
  schemePuBu: scheme$c,
  interpolatePuRd: PuRd,
  schemePuRd: scheme$b,
  interpolateRdPu: RdPu,
  schemeRdPu: scheme$a,
  interpolateYlGnBu: YlGnBu,
  schemeYlGnBu: scheme$9,
  interpolateYlGn: YlGn,
  schemeYlGn: scheme$8,
  interpolateYlOrBr: YlOrBr,
  schemeYlOrBr: scheme$7,
  interpolateYlOrRd: YlOrRd,
  schemeYlOrRd: scheme$6,
  interpolateBlues: Blues,
  schemeBlues: scheme$5,
  interpolateGreens: Greens,
  schemeGreens: scheme$4,
  interpolateGreys: Greys,
  schemeGreys: scheme$3,
  interpolatePurples: Purples,
  schemePurples: scheme$2,
  interpolateReds: Reds,
  schemeReds: scheme$1,
  interpolateOranges: Oranges,
  schemeOranges: scheme,
  interpolateCividis: cividis,
  interpolateCubehelixDefault: cubehelix,
  interpolateRainbow: rainbow,
  interpolateWarm: warm,
  interpolateCool: cool,
  interpolateSinebow: sinebow,
  interpolateTurbo: turbo,
  interpolateViridis: viridis,
  interpolateMagma: magma,
  interpolateInferno: inferno,
  interpolatePlasma: plasma
});
function isOpChannel(input) {
  return input.op !== void 0;
}
function isLambdaChannel(input) {
  return input.lambda !== void 0;
}
function isConstantChannel(input) {
  return input.constant !== void 0;
}
const scales = {
  sqrt,
  log,
  linear,
  literal: identity
};
const palette_size = 4096;
function to_buffer(data2) {
  const output = new Uint8Array(4 * palette_size);
  output.set(data2.flat());
  return output;
}
function materialize_color_interplator(interpolator) {
  const rawValues = range(palette_size).map((i) => {
    const p = rgb(interpolator(i / palette_size));
    return [p.r, p.g, p.b, 255];
  });
  return to_buffer(rawValues);
}
const color_palettes = {
  white: to_buffer(range(palette_size).map(() => [0.5, 0.5, 0.5, 0.5]))
};
const schemes = {};
for (const [k, v] of Object.entries(d3Chromatic)) {
  if (k.startsWith("scheme") && typeof v[0] === "string") {
    const colors2 = new Array(palette_size);
    const scheme2 = v.map((v2) => {
      const col2 = rgb(v2);
      return [col2.r, col2.g, col2.b, 255];
    });
    for (const i of range(palette_size)) {
      colors2[i] = scheme2[i % v.length];
    }
    const name = k.replace("scheme", "").toLowerCase();
    color_palettes[name] = to_buffer(colors2);
    schemes[name] = v;
  }
  if (k.startsWith("interpolate")) {
    const name = k.replace("interpolate", "").toLowerCase();
    color_palettes[name] = materialize_color_interplator(v);
    if (name === "rainbow") {
      color_palettes.shufbow = shuffle(color_palettes[name]);
    }
  }
}
function okabe() {
  const okabe_palette = ["#E69F00", "#CC79A7", "#56B4E9", "#009E73", "#0072B2", "#D55E00", "#F0E442"];
  const colors2 = new Array(palette_size);
  const scheme2 = okabe_palette.map((v) => {
    const col2 = rgb(v);
    return [col2.r, col2.g, col2.b, 255];
  });
  for (const i of range(palette_size)) {
    colors2[i] = scheme2[i % okabe_palette.length];
  }
  color_palettes.okabe = to_buffer(colors2);
  schemes["okabe"] = okabe_palette;
}
okabe();
class Aesthetic {
  constructor(scatterplot, regl2, tile, aesthetic_map) {
    this.field = null;
    this._texture_buffer = null;
    this.partner = null;
    this._textures = {};
    this._scale = (p) => 1;
    this.aesthetic_map = aesthetic_map;
    if (this.aesthetic_map === void 0) {
      throw new Error("Aesthetic map is undefined");
    }
    this.scatterplot = scatterplot;
    this.regl = regl2;
    this._domain = this.default_domain;
    this._range = [0, 1];
    this.tileSet = tile;
    this._domains = {};
    this.id = "" + Math.random();
    this.current_encoding = { constant: 1 };
  }
  apply(point) {
    return this.scale(this.value_for(point));
  }
  get transform() {
    if (this._transform)
      return this._transform;
    return this.default_transform;
  }
  set transform(transform) {
    this._transform = transform;
  }
  get scale() {
    function capitalize(r) {
      return r.charAt(0).toUpperCase() + r.slice(1);
    }
    let scale = scales[this.transform]().domain(this.domain).range(this.range);
    const range2 = this.range;
    if (typeof range2 == "string") {
      const interpolator = d3Chromatic["interpolate" + capitalize(range2)];
      if (interpolator !== void 0) {
        if (this.transform === "sqrt") {
          return sequentialPow(interpolator).exponent(0.5).domain(this.domain);
        } else if (this.transform === "log") {
          return sequentialLog(interpolator).domain(this.domain);
        } else {
          return sequential(interpolator).domain(this.domain);
        }
      }
    }
    if (this.is_dictionary()) {
      scale = ordinal().domain(this.domain);
      if (typeof range2 === "string" && schemes[range2]) {
        if (this.column.dictionary === null) {
          throw new Error("Dictionary is null");
        }
        scale.range(schemes[range2]).domain(this.column.dictionary.toArray());
      } else {
        scale.range(this.range);
      }
    }
    return scale;
  }
  get column() {
    if (this.field === null) {
      throw new Error("Can't retrieve column for aesthetic without a field");
    }
    if (this.tileSet.table) {
      return this.tileSet.table.getColumn(this.field);
    }
    throw new Error("Table is null");
  }
  get default_domain() {
    if (this.field == void 0) {
      return [1, 1];
    }
    if (this._domains[this.field]) {
      return this._domains[this.field];
    }
    if (!this.tileSet.table) {
      return [1, 1];
    }
    const { column: column2 } = this;
    if (!column2) {
      return [1, 1];
    }
    if (column2.type.dictionary) {
      this._domains[this.field] = [0, this.aesthetic_map.texture_size - 1];
    } else {
      this._domains[this.field] = extent(column2.toArray());
    }
    return this._domains[this.field];
  }
  default_data() {
    return Array(this.aesthetic_map.texture_size).fill(this.default_constant);
  }
  get domain() {
    return this._domain || this.default_domain;
  }
  get range() {
    return this._range || this.default_range;
  }
  value_for(point) {
    return point[this.field];
  }
  get map_position() {
    if (this.use_map_on_regl === 0) {
      return 0;
    }
    return this.aesthetic_map.get_position(this.id);
  }
  get texture_buffer() {
    if (this._texture_buffer) {
      return this._texture_buffer;
    }
    this._texture_buffer = new Float32Array(this.aesthetic_map.texture_size);
    this._texture_buffer.set(this.default_data());
    return this._texture_buffer;
  }
  key() {
    return this.field + this.domain + this.range + this.transform;
  }
  post_to_regl_buffer() {
    this.aesthetic_map.set_one_d(this.id, this.texture_buffer);
  }
  convert_string_encoding(channel) {
    const v = {
      field: channel,
      domain: this.default_domain,
      range: this.default_range
    };
    return v;
  }
  complete_domain(encoding) {
    encoding.domain = encoding.domain || this.default_domain;
    return encoding;
  }
  update(encoding) {
    if (encoding === "null") {
      encoding = null;
    }
    if (encoding === null) {
      this.current_encoding = {
        constant: this.default_constant
      };
      return;
    }
    if (encoding === void 0) {
      return;
    }
    if (typeof encoding === "string") {
      encoding = this.convert_string_encoding(encoding);
    }
    if (typeof encoding !== "object") {
      let x = {
        constant: encoding
      };
      this.current_encoding = x;
      return;
    }
    this.current_encoding = encoding;
    if (isConstantChannel(encoding)) {
      return;
    }
    this.field = encoding.field;
    if (isOpChannel(encoding)) {
      return;
    }
    if (isLambdaChannel(encoding)) {
      const {
        lambda,
        field
      } = encoding;
      if (lambda) {
        this.apply_function_for_textures(field, this.domain, lambda);
        this.post_to_regl_buffer();
      } else if (encoding.range) {
        this.encode_for_textures(this.range);
        this.post_to_regl_buffer();
      }
      return;
    }
    if (encoding["domain"] === void 0) {
      encoding["domain"] = this.default_domain;
    }
    if (encoding["range"]) {
      this._domain = encoding.domain;
      this._range = encoding.range;
    }
    this._transform = encoding.transform || void 0;
    if (this.label === "color" || encoding.range && typeof encoding.range[0] === "string") {
      this.encode_for_textures(encoding.range);
      this.post_to_regl_buffer();
    }
  }
  encode_for_textures(range2) {
    const { texture_size } = this.aesthetic_map;
    const values = new Array(texture_size);
    this.scaleFunc = scales[this.transform]().range(range2).domain([0, texture_size - 1]);
    for (let i = 0; i < texture_size; i += 1) {
      values[i] = this.scaleFunc(i);
    }
  }
  arrow_column() {
    const c2 = this.tileSet.table.getColumn(this.field);
    if (c2 === null) {
      throw `No column ${this.field} on arrow table for aesthetic ${this.label}`;
    }
    return c2;
  }
  is_dictionary() {
    if (this.field == void 0) {
      return false;
    }
    return this.arrow_column().type.dictionary;
  }
  get constant() {
    if (isConstantChannel(this.current_encoding)) {
      return this.current_encoding.constant;
    }
    return this.default_constant;
  }
  get use_map_on_regl() {
    if (this.is_dictionary()) {
      if (this.domain[0] === -2047 && this.domain[1] == 2047) {
        return 1;
      }
    }
    if (this.label === "color") {
      return 1;
    }
    return 0;
  }
  apply_function_for_textures(field, range$1, raw_func) {
    const { texture_size } = this.aesthetic_map;
    let func;
    if (typeof raw_func === "string") {
      func = lambda_to_function(parseLambdaString(raw_func));
    } else {
      func = raw_func;
    }
    this.scaleFunc = linear().range(range$1).domain([0, texture_size - 1]);
    let input = range(texture_size);
    if (field === void 0 || this.tileSet.table === void 0) {
      console.warn("SETTING EMPTY FIELD");
      this.texture_buffer.set(range(texture_size).map((i) => 1));
      return;
    }
    const { column: column2 } = this;
    if (!column2) {
      throw `Column ${field} does not exist on table.`;
    }
    if (column2.type.dictionary) {
      input.fill(void 0);
      const dvals = column2.data.dictionary.toArray();
      dvals.forEach((d, i) => {
        input[i] = d;
      });
    } else {
      input = input.map((d) => this.scale(d));
    }
    const values = input.map((i) => func(i));
    this.texture_buffer.set(values);
  }
}
class OneDAesthetic extends Aesthetic {
  static get default_constant() {
    return 1.5;
  }
  static get_default_domain() {
    return [0, 1];
  }
  get default_domain() {
    return [0, 1];
  }
}
class BooleanAesthetic extends Aesthetic {
}
class Size extends OneDAesthetic {
  constructor() {
    super(...arguments);
    this.default_constant = 1;
    this.label = "size";
    this.default_transform = "sqrt";
  }
  static get default_constant() {
    return 1.5;
  }
  static get_default_domain() {
    return [0, 10];
  }
  get default_domain() {
    return [0, 10];
  }
}
Size.default_range = [0, 1];
class PositionalAesthetic extends OneDAesthetic {
  constructor(scatterplot, regl2, tile, map2) {
    super(scatterplot, regl2, tile, map2);
    this.default_range = [-1, 1];
    this.default_constant = 0;
    this.default_transform = "literal";
    this._transform = "literal";
  }
  get range() {
    if (this.tileSet.extent && this.tileSet.extent[this.label])
      return this.tileSet.extent[this.label];
    return [-20, 20];
  }
  static get default_constant() {
    return 0;
  }
}
class X extends PositionalAesthetic {
  constructor() {
    super(...arguments);
    this.label = "x";
    this.field = "x";
  }
}
class X0 extends X {
  constructor() {
    super(...arguments);
    this.label = "x0";
  }
}
class Y extends PositionalAesthetic {
  constructor() {
    super(...arguments);
    this.label = "y";
    this.field = "y";
  }
}
class Y0 extends Y {
  constructor() {
    super(...arguments);
    this.label = "y0";
  }
}
class AbstractFilter extends BooleanAesthetic {
  constructor(scatterplot, regl2, tile, map2) {
    super(scatterplot, regl2, tile, map2);
    this.default_transform = "literal";
    this.default_constant = 1;
    this.default_range = [0, 1];
    this.current_encoding = { constant: 1 };
  }
  get default_domain() {
    return [0, 1];
  }
  get domain() {
    const domain = this.is_dictionary() ? [-2047, 2047] : [0, 1];
    return domain;
  }
  update(encoding) {
    super.update(encoding);
  }
  post_to_regl_buffer() {
    super.post_to_regl_buffer();
  }
  ops_to_array() {
    const input = this.current_encoding;
    if (input === null)
      return [0, 0, 0];
    if (input === void 0)
      return [0, 0, 0];
    if (!isOpChannel(input)) {
      return [0, 0, 0];
    }
    if (input.op === "within") {
      return [4, input.a, input.b];
    }
    const val = [
      [null, "lt", "gt", "eq"].indexOf(input.op),
      input.a,
      0
    ];
    return val;
  }
}
class Filter extends AbstractFilter {
  constructor() {
    super(...arguments);
    this.label = "filter";
  }
}
class Filter2 extends AbstractFilter {
  constructor() {
    super(...arguments);
    this.label = "filter2";
  }
}
class Jitter_speed extends Aesthetic {
  constructor() {
    super(...arguments);
    this.label = "jitter_speed";
    this.default_transform = "linear";
    this.default_constant = 0.5;
  }
  get default_domain() {
    return [0, 1];
  }
}
Jitter_speed.default_range = [0, 1];
function encode_jitter_to_int(jitter) {
  if (jitter === "spiral") {
    return 1;
  }
  if (jitter === "uniform") {
    return 2;
  }
  if (jitter === "normal") {
    return 3;
  }
  if (jitter === "circle") {
    return 4;
  }
  if (jitter === "time") {
    return 5;
  }
  return 0;
}
class Jitter_radius extends Aesthetic {
  constructor() {
    super(...arguments);
    this.jitter_int_formatted = 0;
    this.default_transform = "linear";
    this._method = "None";
    this.label = "jitter_radius";
  }
  get default_constant() {
    return 0;
  }
  get default_domain() {
    return [0, 1];
  }
  get default_range() {
    return [0, 1];
  }
  get method() {
    return this.current_encoding && this.current_encoding.method ? this.current_encoding.method : "None";
  }
  set method(value) {
    this._method = value;
  }
  get jitter_int_format() {
    return encode_jitter_to_int(this.method);
  }
}
class Color extends Aesthetic {
  constructor() {
    super(...arguments);
    this.label = "color";
    this.texture_type = "uint8";
    this.default_constant = [0.7, 0, 0.5];
    this.default_transform = "linear";
    this.current_encoding = {
      constant: [0.7, 0, 0.5]
    };
  }
  get default_range() {
    return [0, 1];
  }
  default_data() {
    return color_palettes.viridis;
  }
  get texture_buffer() {
    if (this._texture_buffer) {
      return this._texture_buffer;
    }
    this._texture_buffer = new Uint8Array(this.aesthetic_map.texture_size * 4);
    this._texture_buffer.set(this.default_data());
    return this._texture_buffer;
  }
  static convert_color(color2) {
    const { r, g, b } = rgb(color2);
    return [r / 255, g / 255, b / 255];
  }
  post_to_regl_buffer() {
    this.aesthetic_map.set_color(this.id, this.texture_buffer);
  }
  update(encoding) {
    this.current_encoding = encoding;
    if (isConstantChannel(encoding)) {
      if (typeof encoding.constant === "string") {
        encoding.constant = Color.convert_color(encoding.constant);
      }
    }
    super.update(encoding);
  }
  encode_for_textures(range$1) {
    this._scale = scales[this.transform]().range(range$1).domain(this.domain);
    if (color_palettes[range$1]) {
      this.texture_buffer.set(color_palettes[range$1]);
    } else if (range$1.length === this.aesthetic_map.texture_size * 4) {
      this.texture_buffer.set(range$1);
    } else if (range$1.length && range$1[0].length && range$1[0].length === 3) {
      const r = range(palette_size).map((i) => {
        const [r2, g, b] = range$1[i % range$1.length];
        return [r2, g, b, 255];
      });
      this.texture_buffer.set(r.flat());
    } else {
      console.warn(`request range of ${range$1} for color ${this.field} unknown`);
    }
  }
}
class StatefulAesthetic {
  constructor(scatterplot, regl2, tile, aesthetic_map) {
    this.needs_transitions = false;
    if (aesthetic_map === void 0) {
      throw new Error(`Aesthetic map is undefined.`);
    }
    this.scatterplot = scatterplot;
    this.regl = regl2;
    this.tile = tile;
    this.aesthetic_map = aesthetic_map;
    this.aesthetic_map = aesthetic_map;
    this.current_encoding = {
      constant: 1
    };
  }
  get current() {
    return this.states[0];
  }
  get last() {
    return this.states[1];
  }
  get states() {
    if (this._states !== void 0) {
      return this._states;
    }
    this._states = [
      new this.Factory(this.scatterplot, this.regl, this.tile, this.aesthetic_map),
      new this.Factory(this.scatterplot, this.regl, this.tile, this.aesthetic_map)
    ];
    return this._states;
  }
  update(encoding) {
    const stringy = JSON.stringify(encoding);
    if (stringy == JSON.stringify(this.current_encoding) || encoding === void 0) {
      if (this.needs_transitions) {
        this.states[1].update(this.current_encoding);
      }
      this.needs_transitions = false;
    } else {
      this.states.reverse();
      this.states[0].update(encoding);
      this.needs_transitions = true;
      this.current_encoding = encoding;
    }
  }
}
class StatefulX extends StatefulAesthetic {
  get Factory() {
    return X;
  }
  get label() {
    return "x";
  }
}
class StatefulX0 extends StatefulAesthetic {
  get Factory() {
    return X0;
  }
  get label() {
    return "x0";
  }
}
class StatefulY extends StatefulAesthetic {
  get Factory() {
    return Y;
  }
  get label() {
    return "y";
  }
}
class StatefulY0 extends StatefulAesthetic {
  get Factory() {
    return Y0;
  }
  get label() {
    return "y0";
  }
}
class StatefulSize extends StatefulAesthetic {
  get Factory() {
    return Size;
  }
  get label() {
    return "size";
  }
}
class StatefulJitter_speed extends StatefulAesthetic {
  get Factory() {
    return Jitter_speed;
  }
  get label() {
    return "jitter_speed";
  }
}
class StatefulJitter_radius extends StatefulAesthetic {
  get Factory() {
    return Jitter_radius;
  }
  get label() {
    return "jitter_radius";
  }
}
class StatefulColor extends StatefulAesthetic {
  get Factory() {
    return Color;
  }
  get label() {
    return "color";
  }
}
class StatefulFilter extends StatefulAesthetic {
  get Factory() {
    return Filter;
  }
  get label() {
    return "filter";
  }
}
class StatefulFilter2 extends StatefulAesthetic {
  get Factory() {
    return Filter2;
  }
  get label() {
    return "filter2";
  }
}
const stateful_aesthetics = {
  x: StatefulX,
  x0: StatefulX0,
  y: StatefulY,
  y0: StatefulY0,
  size: StatefulSize,
  jitter_speed: StatefulJitter_speed,
  jitter_radius: StatefulJitter_radius,
  color: StatefulColor,
  filter: StatefulFilter,
  filter2: StatefulFilter2
};
function parseLambdaString(lambdastring) {
  let [field, lambda] = lambdastring.split("=>").map((d) => d.trim());
  if (lambda === void 0) {
    throw `Couldn't parse ${lambdastring} into a function`;
  }
  if (lambda.slice(0, 1) !== "{" && lambda.slice(0, 6) !== "return") {
    lambda = `return ${lambda}`;
  }
  const func = `${field} => ${lambda}`;
  return {
    field,
    lambda: func
  };
}
function lambda_to_function(input) {
  if (typeof input.lambda === "function") {
    throw "Must pass a string to lambda, not a function.";
  }
  const {
    lambda,
    field
  } = input;
  if (field === void 0) {
    throw "Must pass a field to lambda.";
  }
  const cleaned = parseLambdaString(lambda).lambda;
  const [arg, code] = cleaned.split("=>", 2).map((d) => d.trim());
  const func = new Function(arg, code);
  return func;
}
class AestheticSet {
  constructor(scatterplot, regl2, tileSet) {
    this.scatterplot = scatterplot;
    this.store = {};
    this.regl = regl2;
    this.tileSet = tileSet;
    this.position_interpolation = false;
    this.aesthetic_map = new TextureSet(this.regl);
    return this;
  }
  dim(aesthetic) {
    if (this.store[aesthetic]) {
      return this.store[aesthetic];
    }
    if (stateful_aesthetics[aesthetic] !== void 0) {
      this.store[aesthetic] = new stateful_aesthetics[aesthetic](this.scatterplot, this.regl, this.tileSet, this.aesthetic_map);
      return this.store[aesthetic];
    }
    throw new Error(`Unknown aesthetic ${aesthetic}`);
  }
  *[Symbol.iterator]() {
    for (let [k, v] of Object.entries(this.store)) {
      yield [k, v];
    }
  }
  interpret_position(encoding) {
    if (encoding) {
      if (encoding.x0 || encoding.position0) {
        this.position_interpolation = true;
      } else if (encoding.x || encoding.position) {
        this.position_interpolation = false;
      }
      for (const p of ["position", "position0"]) {
        const suffix = p.replace("position", "");
        if (encoding[p]) {
          if (encoding[p] === "literal") {
            encoding[`x${suffix}`] = {
              field: "x",
              transform: "literal"
            };
            encoding[`y${suffix}`] = {
              field: "y",
              transform: "literal"
            };
          } else {
            const field = encoding[p];
            encoding[`x${suffix}`] = {
              field: `${field}.x`,
              transform: "literal"
            };
            encoding[`y${suffix}`] = {
              field: `${field}.y`,
              transform: "literal"
            };
          }
          delete encoding[p];
        }
      }
    }
    delete encoding.position;
    delete encoding.position0;
  }
  apply_encoding(encoding) {
    if (encoding === void 0) {
      encoding = {};
    }
    if (encoding.filter1) {
      encoding.filter = encoding.filter1;
      delete encoding.filter1;
    }
    this.interpret_position(encoding);
    for (const k of Object.keys(stateful_aesthetics)) {
      this.dim(k).update(encoding[k]);
    }
  }
}
class TextureSet {
  constructor(regl2, texture_size = 4096, texture_widths = 32) {
    this.id_locs = {};
    this.offsets = {};
    this.texture_size = texture_size;
    this.texture_widths = texture_widths;
    this.regl = regl2;
    this._one_d_position = 1;
    this._color_position = -1;
  }
  get_position(id2) {
    return this.offsets[id2] || 0;
  }
  set_one_d(id2, value) {
    let offset;
    const { offsets } = this;
    if (offsets[id2]) {
      offset = offsets[id2];
    } else {
      offset = this._one_d_position++;
      offsets[id2] = offset;
    }
    this.one_d_texture.subimage({
      data: value,
      width: 1,
      height: this.texture_size
    }, offset - 1, 0);
  }
  set_color(id2, value) {
    let offset;
    const { offsets } = this;
    if (offsets[id2]) {
      offset = offsets[id2];
    } else {
      offset = this._color_position--;
      offsets[id2] = offset;
    }
    this.color_texture.subimage({
      data: value,
      width: 1,
      height: this.texture_size
    }, -offset - 1, 0);
  }
  get one_d_texture() {
    if (this._one_d_texture) {
      return this._one_d_texture;
    }
    const texture_type = this.regl.hasExtension("OES_texture_float") ? "float" : this.regl.hasExtension("OES_texture_half_float") ? "half float" : "uint8";
    const format2 = texture_type === "uint8" ? "rgba" : "alpha";
    const params = {
      width: this.texture_widths,
      height: this.texture_size,
      type: texture_type,
      format: format2
    };
    this._one_d_texture = this.regl.texture(params);
    return this._one_d_texture;
  }
  get color_texture() {
    if (this._color_texture) {
      return this._color_texture;
    }
    this._color_texture = this.regl.texture({
      width: this.texture_widths,
      height: this.texture_size,
      type: "uint8",
      format: "rgba"
    });
    return this._color_texture;
  }
}
class ReglRenderer extends Renderer {
  constructor(selector2, tileSet, scatterplot) {
    super(selector2, tileSet, scatterplot);
    this.buffer_size = 1024 * 1024 * 64;
    this.textures = {};
    this.regl = wrapREGL({
      optionalExtensions: [
        "OES_standard_derivatives",
        "OES_element_index_uint",
        "OES_texture_float",
        "OES_texture_half_float"
      ],
      canvas: this.canvas.node()
    });
    this.aes = new AestheticSet(scatterplot, this.regl, tileSet);
    this.initialize_textures();
    this._initializations = [
      this.tileSet.promise.then(() => {
        this.remake_renderer();
        this._webgl_scale_history = [this.default_webgl_scale, this.default_webgl_scale];
      })
    ];
    this.initialize();
  }
  get buffers() {
    this._buffers = this._buffers || new MultipurposeBufferSet(this.regl, this.buffer_size);
    return this._buffers;
  }
  data(dataset) {
    if (dataset === void 0) {
      return this.tileSet;
    }
    this.tileSet = dataset;
    return this;
  }
  get props() {
    const { prefs } = this;
    const { transform } = this.zoom;
    const { aes_to_buffer_num, buffer_num_to_variable, variable_to_buffer_num } = this.allocate_aesthetic_buffers();
    const props = {
      aes: { encoding: this.aes.encoding },
      colors_as_grid: 0,
      corners: this.zoom.current_corners(),
      zoom_balance: prefs.zoom_balance,
      transform,
      max_ix: this.max_ix,
      time: (Date.now() - this.zoom._start) / 1e3,
      update_time: (Date.now() - this.most_recent_restart) / 1e3,
      string_index: 0,
      prefs: JSON.parse(JSON.stringify(prefs)),
      color_type: void 0,
      start_time: this.most_recent_restart,
      webgl_scale: this._webgl_scale_history[0],
      last_webgl_scale: this._webgl_scale_history[1],
      use_scale_for_tiles: this._use_scale_to_download_tiles,
      grid_mode: 0,
      buffer_num_to_variable,
      aes_to_buffer_num,
      variable_to_buffer_num,
      color_picker_mode: 0,
      zoom_matrix: [
        [transform.k, 0, transform.x],
        [0, transform.k, transform.y],
        [0, 0, 1]
      ].flat()
    };
    return JSON.parse(JSON.stringify(props));
  }
  get default_webgl_scale() {
    if (this._default_webgl_scale) {
      return this._default_webgl_scale;
    }
    this._default_webgl_scale = this.zoom.webgl_scale();
    return this._default_webgl_scale;
  }
  render_points(props) {
    const prop_list = [];
    for (const tile of this.visible_tiles()) {
      const manager = new TileBufferManager(this.regl, tile, this);
      if (!manager.ready(props.prefs, props.block_for_buffers)) {
        continue;
      }
      const this_props = {
        manager,
        image_locations: manager.image_locations,
        sprites: this.sprites
      };
      Object.assign(this_props, props);
      prop_list.push(this_props);
    }
    prop_list.reverse();
    this._renderer(prop_list);
  }
  tick() {
    const { prefs } = this;
    const { regl: regl2, tileSet } = this;
    const { props } = this;
    this.tick_num = this.tick_num || 0;
    this.tick_num++;
    if (this._use_scale_to_download_tiles) {
      tileSet.download_most_needed_tiles(this.zoom.current_corners(), this.props.max_ix);
    } else {
      tileSet.download_to_depth(prefs.max_points);
    }
    regl2.clear({
      color: [0.9, 0.9, 0.93, 0],
      depth: 1
    });
    const start2 = Date.now();
    let current = () => void 0;
    while (Date.now() - start2 < 10 && this.deferred_functions.length) {
      current = this.deferred_functions.shift();
      try {
        current();
      } catch (err) {
        console.warn(err, current);
      }
    }
    this.render_all(props);
  }
  render_jpeg(props) {
  }
  single_blur_pass(fbo1, fbo2, direction) {
    const { regl: regl2 } = this;
    fbo2.use(() => {
      regl2.clear({ color: [0, 0, 0, 0] });
      regl2({
        frag: gaussian_blur,
        uniforms: {
          iResolution: ({ viewportWidth, viewportHeight }) => [viewportWidth, viewportHeight],
          iChannel0: fbo1,
          direction
        },
        vert: `
        precision mediump float;
        attribute vec2 position;
        varying vec2 uv;
        void main() {
          uv = 0.5 * (position + 1.0);
          gl_Position = vec4(position, 0, 1);
        }`,
        attributes: {
          position: [-4, -4, 4, -4, 0, 4]
        },
        depth: { enable: false },
        count: 3
      })();
    });
  }
  blur(fbo1, fbo2, passes = 3) {
    let remaining = passes - 1;
    while (remaining > -1) {
      this.single_blur_pass(fbo1, fbo2, [2 ** remaining, 0]);
      this.single_blur_pass(fbo2, fbo1, [0, 2 ** remaining]);
      remaining -= 1;
    }
  }
  render_all(props) {
    const { regl: regl2 } = this;
    this.fbos.points.use(() => {
      regl2.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
    });
    regl2.clear({ color: [0, 0, 0, 0] });
    this.fbos.lines.use(() => regl2.clear({ color: [0, 0, 0, 0] }));
    if (this.scatterplot.trimap) {
      this.fbos.lines.use(() => {
        this.scatterplot.trimap.zoom = this.zoom;
        this.scatterplot.trimap.tick("polygon");
      });
    }
    for (const layer of [this.fbos.lines, this.fbos.points]) {
      regl2({
        profile: true,
        blend: {
          enable: true,
          func: {
            srcRGB: "one",
            srcAlpha: "one",
            dstRGB: "one minus src alpha",
            dstAlpha: "one minus src alpha"
          }
        },
        frag: `
        precision mediump float;
        varying vec2 uv;
        uniform sampler2D tex;
        uniform float wRcp, hRcp;
        void main() {
          gl_FragColor = texture2D(tex, uv);
        }
      `,
        vert: `
        precision mediump float;
        attribute vec2 position;
        varying vec2 uv;
        void main() {
          uv = 0.5 * (position + 1.0);
          gl_Position = vec4(position, 0., 1.);
        }
      `,
        attributes: {
          position: this.fill_buffer
        },
        depth: { enable: false },
        count: 3,
        uniforms: {
          tex: () => layer,
          wRcp: ({ viewportWidth }) => 1 / viewportWidth,
          hRcp: ({ viewportHeight }) => 1 / viewportHeight
        }
      })();
    }
  }
  initialize_textures() {
    const { regl: regl2 } = this;
    this.fbos = this.fbos || {};
    this.textures = this.textures || {};
    this.textures.empty_texture = regl2.texture(range(128).map((d) => range(128).map((d2) => [0, 0, 0])));
    this.fbos.minicounter = regl2.framebuffer({
      width: 512,
      height: 512,
      depth: false
    });
    this.fbos.lines = regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.points = regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.ping = regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.pong = regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.contour = this.fbos.contour || regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.colorpicker = this.fbos.colorpicker || regl2.framebuffer({
      width: this.width,
      height: this.height,
      depth: false
    });
    this.fbos.dummy = this.fbos.dummy || regl2.framebuffer({
      width: 1,
      height: 1,
      depth: false
    });
  }
  get_image_texture(url) {
    const { regl: regl2 } = this;
    this.textures = this.textures || {};
    if (this.textures[url]) {
      return this.textures[url];
    }
    const image = new Image();
    image.src = url;
    image.onload = () => {
      this.textures[url] = regl2.texture(image);
    };
    return this.textures[url];
  }
  n_visible(only_color = -1) {
    let { width, height } = this;
    width = Math.floor(width);
    height = Math.floor(height);
    this.contour_vals = this.contour_vals || new Uint8Array(4 * width * height);
    const { props } = this;
    props.only_color = only_color;
    let v;
    this.fbos.contour.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
      this.regl.read(this.contour_vals);
      v = sum$1(this.contour_vals);
    });
    return v;
  }
  color_pick(x, y) {
    const { props, height } = this;
    props.color_picker_mode = 1;
    let color_at_point;
    this.fbos.colorpicker.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
      try {
        color_at_point = this.regl.read({
          x,
          y: height - y,
          width: 1,
          height: 1
        });
      } catch (err) {
        console.warn("Read bad data from", {
          x,
          y,
          height,
          attempted: height - y
        });
        color_at_point = [0, 0, 0, 0];
      }
    });
    const point_as_float = glslReadFloat(...color_at_point) - 1;
    const point_as_int = Math.round(point_as_float);
    const p = this.tileSet.findPoint(point_as_int);
    if (p.length === 0) {
      return void 0;
    }
    return p[0];
  }
  get fill_buffer() {
    if (!this._fill_buffer) {
      const { regl: regl2 } = this;
      this._fill_buffer = regl2.buffer({ data: [-4, -4, 4, -4, 0, 4] });
    }
    return this._fill_buffer;
  }
  draw_contour_buffer(field, ix) {
    let { width, height } = this;
    width = Math.floor(width);
    height = Math.floor(height);
    this.contour_vals = this.contour_vals || new Uint8Array(4 * width * height);
    this.contour_alpha_vals = this.contour_alpha_vals || new Uint16Array(width * height);
    const { props } = this;
    props.aes.encoding.color = {
      field
    };
    props.only_color = ix;
    this.fbos.contour.use(() => {
      this.regl.clear({ color: [0, 0, 0, 0] });
      this.render_points(props);
      this.regl.read(this.contour_vals);
    });
    this.blur(this.fbos.contour, this.fbos.ping, 3);
    this.fbos.contour.use(() => {
      this.regl.read(this.contour_vals);
    });
    let i = 0;
    while (i < width * height * 4) {
      this.contour_alpha_vals[i / 4] = this.contour_vals[i + 3] * 255;
      i += 4;
    }
    return this.contour_alpha_vals;
  }
  remake_renderer() {
    const { regl: regl2 } = this;
    const parameters = {
      depth: { enable: false },
      stencil: { enable: false },
      blend: {
        enable(_, { color_picker_mode }) {
          return color_picker_mode < 0.5;
        },
        func: {
          srcRGB: "one",
          srcAlpha: "one",
          dstRGB: "one minus src alpha",
          dstAlpha: "one minus src alpha"
        }
      },
      primitive: "points",
      frag: frag_shader,
      vert: vertex_shader,
      count(_, props) {
        return props.manager.count;
      },
      attributes: {
        buffer_0: (_, props) => props.manager.regl_elements.get("ix")
      },
      uniforms: {
        u_update_time: regl2.prop("update_time"),
        u_transition_duration(_, props) {
          return props.prefs.duration;
        },
        u_only_color(_, props) {
          if (props.only_color !== void 0) {
            return props.only_color;
          }
          return -2;
        },
        u_use_glyphset: (_, { prefs }) => prefs.glyph_set ? 1 : 0,
        u_glyphset: (_, { prefs }) => {
          if (prefs.glyph_set) {
            return this.get_image_texture(prefs.glyph_set);
          }
          return this.textures.empty_texture;
        },
        u_color_picker_mode: regl2.prop("color_picker_mode"),
        u_position_interpolation_mode() {
          if (this.aes.position_interpolation) {
            return 1;
          }
          return 0;
        },
        u_grid_mode: (_, { grid_mode }) => grid_mode,
        u_colors_as_grid: regl2.prop("colors_as_grid"),
        u_width: ({ viewportWidth }) => viewportWidth,
        u_height: ({ viewportHeight }) => viewportHeight,
        u_one_d_aesthetic_map: this.aes.aesthetic_map.one_d_texture,
        u_color_aesthetic_map: this.aes.aesthetic_map.color_texture,
        u_aspect_ratio: ({ viewportWidth, viewportHeight }) => viewportWidth / viewportHeight,
        u_zoom_balance: regl2.prop("zoom_balance"),
        u_base_size: (_, { prefs }) => prefs.point_size,
        u_maxix: (_, props) => props.max_ix,
        u_k(_, props) {
          return props.transform.k;
        },
        u_window_scale: regl2.prop("webgl_scale"),
        u_last_window_scale: regl2.prop("last_webgl_scale"),
        u_time: ({ time: time2 }) => time2,
        u_filter_numeric() {
          return this.aes.dim("filter").current.ops_to_array();
        },
        u_last_filter_numeric() {
          return this.aes.dim("filter").last.ops_to_array();
        },
        u_filter2_numeric() {
          return this.aes.dim("filter").current.ops_to_array();
        },
        u_last_filter2_numeric() {
          return this.aes.dim("filter").last.ops_to_array();
        },
        u_current_alpha: () => this.optimal_alpha,
        u_last_alpha: () => this.optimal_alpha,
        u_jitter: () => this.aes.dim("jitter_radius").current.jitter_int_format,
        u_last_jitter: () => this.aes.dim("jitter_radius").last.jitter_int_format,
        u_zoom(_, props) {
          return props.zoom_matrix;
        }
      }
    };
    for (const i of range(0, 16)) {
      parameters.attributes[`buffer_${i}`] = (_, { manager, buffer_num_to_variable }) => {
        const c2 = manager.regl_elements.get(buffer_num_to_variable[i]);
        return c2 || { constant: 0 };
      };
    }
    for (const k of [
      "x",
      "y",
      "color",
      "jitter_radius",
      "x0",
      "y0",
      "jitter_speed",
      "size",
      "filter",
      "filter2",
      "character"
    ]) {
      for (const time2 of ["current", "last"]) {
        const temporal = time2 === "current" ? "" : "last_";
        parameters.uniforms[`u_${temporal}${k}_map`] = () => {
          const aes_holder = this.aes.dim(k)[time2];
          return aes_holder.textures.one_d;
        };
        parameters.uniforms[`u_${temporal}${k}_map_position`] = () => this.aes.dim(k)[time2].map_position;
        parameters.uniforms[`u_${temporal}${k}_buffer_num`] = (_, { aes_to_buffer_num }) => {
          const val = aes_to_buffer_num[`${k}--${time2}`];
          if (val === void 0) {
            return -1;
          }
          return val;
        };
        if (k !== "filter" && k !== "filter2") {
          parameters.uniforms[`u_${temporal}${k}_domain`] = () => this.aes.dim(k)[time2].domain;
          parameters.uniforms[`u_${temporal}${k}_range`] = () => this.aes.dim(k)[time2].range;
          parameters.uniforms[`u_${temporal}${k}_transform`] = () => {
            const t = this.aes.dim(k)[time2].transform;
            if (t === "linear")
              return 1;
            if (t === "sqrt")
              return 2;
            if (t === "log")
              return 3;
            if (t === "literal")
              return 4;
            throw "Invalid transform";
          };
          parameters.uniforms[`u_${temporal}${k}_constant`] = () => {
            return this.aes.dim(k)[time2].constant;
          };
        }
      }
    }
    this._renderer = regl2(parameters);
    return this._renderer;
  }
  allocate_aesthetic_buffers() {
    const buffers = [];
    const priorities = [
      "x",
      "y",
      "color",
      "x0",
      "y0",
      "size",
      "jitter_radius",
      "jitter_speed",
      "filter",
      "filter2"
    ];
    for (const aesthetic of priorities) {
      for (const time2 of ["current", "last"]) {
        try {
          if (this.aes.dim(aesthetic)[time2].field) {
            buffers.push({ aesthetic, time: time2, field: this.aes.dim(aesthetic)[time2].field });
          }
        } catch (e) {
          this.reglframe.cancel();
          this.reglframe = void 0;
          throw e;
        }
      }
    }
    buffers.sort((a, b) => {
      if (a.time < b.time) {
        return -1;
      }
      if (b.time < a.time) {
        return 1;
      }
      return priorities.indexOf(a.aesthetic) - priorities.indexOf(b.aesthetic);
    });
    const aes_to_buffer_num = {};
    const variable_to_buffer_num = { ix: 0 };
    let num = 0;
    for (const { aesthetic, time: time2, field } of buffers) {
      const k = `${aesthetic}--${time2}`;
      if (variable_to_buffer_num[field] !== void 0) {
        aes_to_buffer_num[k] = variable_to_buffer_num[field];
        continue;
      }
      if (num++ < 16) {
        aes_to_buffer_num[k] = num;
        variable_to_buffer_num[field] = num;
        continue;
      } else {
        aes_to_buffer_num[k] = aes_to_buffer_num[`${aesthetic}--current`];
      }
    }
    const buffer_num_to_variable = [...Object.keys(variable_to_buffer_num)];
    return { aes_to_buffer_num, variable_to_buffer_num, buffer_num_to_variable };
  }
  get discard_share() {
    return 0;
  }
}
class TileBufferManager {
  constructor(regl2, tile, renderer) {
    this.tile = tile;
    this.regl = regl2;
    this.renderer = renderer;
    tile._regl_elements = tile._regl_elements || new Map();
    this.regl_elements = tile._regl_elements;
  }
  ready(prefs, block_for_buffers = true) {
    const { renderer, regl_elements } = this;
    const needed_dimensions = new Set();
    for (let [k, v] of renderer.aes) {
      for (const aesthetic of [v.current, v.last]) {
        if (aesthetic.field) {
          needed_dimensions.add(aesthetic.field);
        }
      }
    }
    for (const key of ["ix", ...needed_dimensions]) {
      const current = this.regl_elements.get(key);
      if (current === null) {
        return false;
      }
      if (current === void 0) {
        if (!this.tile.ready) {
          return false;
        }
        regl_elements.set(key, null);
        if (block_for_buffers) {
          if (key === void 0) {
            continue;
          }
          this.create_regl_buffer(key);
        } else {
          renderer.deferred_functions.push(() => this.create_regl_buffer(key));
          return false;
        }
      }
    }
    return true;
  }
  get count() {
    const { tile, regl_elements } = this;
    if (regl_elements.has("_count")) {
      return regl_elements.get("_count");
    }
    if (tile.ready) {
      regl_elements.set("_count", tile.table.length);
      return regl_elements.get("_count");
    }
  }
  create_buffer_data(key) {
    const { tile } = this;
    if (!tile.ready) {
      throw "Tile table not present.";
    }
    const column2 = tile.table.getColumn(`${key}_dict_index`) || tile.table.getColumn(key);
    if (!column2) {
      const col_names = tile.table.schema.fields.map((d) => d.name);
      throw `Requested ${key} but table has columns ${col_names.join(", ")}`;
    }
    if (column2.dictionary) {
      const buffer2 = new Float32Array(tile.table.length);
      let row2 = 0;
      for (const val of column2.data.values) {
        const char_value = tile.local_dictionary_lookups[key].get(val);
        buffer2[row2] = tile.dictionary_lookups[key].get(char_value);
        row2 += 1;
      }
      return buffer2;
    }
    if (column2.data.values.constructor !== Float32Array) {
      const buffer2 = new Float32Array(tile.table.length);
      for (let i = 0; i < tile.table.length; i++) {
        buffer2[i] = column2.data.values[i];
      }
      return buffer2;
    }
    return column2.data.values;
  }
  create_regl_buffer(key) {
    const { regl_elements } = this;
    const data2 = this.create_buffer_data(key);
    const item_size = 4;
    const data_length = data2.length;
    const buffer_desc = this.renderer.buffers.allocate_block(data_length, item_size);
    regl_elements.set(key, buffer_desc);
    buffer_desc.buffer.subdata(data2, buffer_desc.offset);
  }
}
class MultipurposeBufferSet {
  constructor(regl2, buffer_size) {
    this.regl = regl2;
    this.buffer_size = buffer_size;
    this.buffers = [];
    this.buffer_offsets = [];
    this.generate_new_buffer();
  }
  generate_new_buffer() {
    if (this.pointer) {
      this.buffer_offsets.unshift(this.pointer);
    }
    this.pointer = 0;
    this.buffers.unshift(this.regl.buffer({
      type: "float",
      length: this.buffer_size,
      usage: "dynamic"
    }));
  }
  allocate_block(items, bytes_per_item) {
    if (this.pointer + items * bytes_per_item > this.buffer_size) {
      this.generate_new_buffer();
    }
    const value = {
      buffer: this.buffers[0],
      offset: this.pointer,
      stride: bytes_per_item
    };
    this.pointer += items * bytes_per_item;
    return value;
  }
}
var Arrow_dom = {};
var adapters = {};
var tslib = { exports: {} };
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
(function(module) {
  var __extends;
  var __assign;
  var __rest;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter;
  var __generator;
  var __exportStar;
  var __values;
  var __read;
  var __spread;
  var __spreadArrays;
  var __spreadArray;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory) {
    var root2 = typeof commonjsGlobal === "object" ? commonjsGlobal : typeof self === "object" ? self : typeof this === "object" ? this : {};
    {
      factory(createExporter(root2, createExporter(module.exports)));
    }
    function createExporter(exports, previous) {
      if (exports !== root2) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports, "__esModule", { value: true });
        } else {
          exports.__esModule = true;
        }
      }
      return function(id2, v) {
        return exports[id2] = previous ? previous(id2, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    __rest = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c2 < 3 ? d(r) : c2 > 3 ? d(target, key, r) : d(target, key)) || r;
      return c2 > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __exportStar = function(m, o) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s = 0, i = 0, il = arguments.length; i < il; i++)
        s += arguments[i].length;
      for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __spreadArray = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve, reject) {
            v = o[n](v), settle(resolve, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    __importStar = function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    __importDefault = function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter);
    exporter("__generator", __generator);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values);
    exporter("__read", __read);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
})(tslib);
var buffer$1 = {};
var flatbuffers = {};
flatbuffers.Offset;
flatbuffers.Table;
flatbuffers.SIZEOF_SHORT = 2;
flatbuffers.SIZEOF_INT = 4;
flatbuffers.FILE_IDENTIFIER_LENGTH = 4;
flatbuffers.SIZE_PREFIX_LENGTH = 4;
flatbuffers.Encoding = {
  UTF8_BYTES: 1,
  UTF16_STRING: 2
};
flatbuffers.int32 = new Int32Array(2);
flatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);
flatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);
flatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;
flatbuffers.Long = function(low, high) {
  this.low = low | 0;
  this.high = high | 0;
};
flatbuffers.Long.create = function(low, high) {
  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);
};
flatbuffers.Long.prototype.toFloat64 = function() {
  return (this.low >>> 0) + this.high * 4294967296;
};
flatbuffers.Long.prototype.equals = function(other) {
  return this.low == other.low && this.high == other.high;
};
flatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);
flatbuffers.Builder = function(opt_initial_size) {
  if (!opt_initial_size) {
    var initial_size = 1024;
  } else {
    var initial_size = opt_initial_size;
  }
  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);
  this.space = initial_size;
  this.minalign = 1;
  this.vtable = null;
  this.vtable_in_use = 0;
  this.isNested = false;
  this.object_start = 0;
  this.vtables = [];
  this.vector_num_elems = 0;
  this.force_defaults = false;
};
flatbuffers.Builder.prototype.clear = function() {
  this.bb.clear();
  this.space = this.bb.capacity();
  this.minalign = 1;
  this.vtable = null;
  this.vtable_in_use = 0;
  this.isNested = false;
  this.object_start = 0;
  this.vtables = [];
  this.vector_num_elems = 0;
  this.force_defaults = false;
};
flatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {
  this.force_defaults = forceDefaults;
};
flatbuffers.Builder.prototype.dataBuffer = function() {
  return this.bb;
};
flatbuffers.Builder.prototype.asUint8Array = function() {
  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
};
flatbuffers.Builder.prototype.prep = function(size, additional_bytes) {
  if (size > this.minalign) {
    this.minalign = size;
  }
  var align_size = ~(this.bb.capacity() - this.space + additional_bytes) + 1 & size - 1;
  while (this.space < align_size + size + additional_bytes) {
    var old_buf_size = this.bb.capacity();
    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);
    this.space += this.bb.capacity() - old_buf_size;
  }
  this.pad(align_size);
};
flatbuffers.Builder.prototype.pad = function(byte_size) {
  for (var i = 0; i < byte_size; i++) {
    this.bb.writeInt8(--this.space, 0);
  }
};
flatbuffers.Builder.prototype.writeInt8 = function(value) {
  this.bb.writeInt8(this.space -= 1, value);
};
flatbuffers.Builder.prototype.writeInt16 = function(value) {
  this.bb.writeInt16(this.space -= 2, value);
};
flatbuffers.Builder.prototype.writeInt32 = function(value) {
  this.bb.writeInt32(this.space -= 4, value);
};
flatbuffers.Builder.prototype.writeInt64 = function(value) {
  this.bb.writeInt64(this.space -= 8, value);
};
flatbuffers.Builder.prototype.writeFloat32 = function(value) {
  this.bb.writeFloat32(this.space -= 4, value);
};
flatbuffers.Builder.prototype.writeFloat64 = function(value) {
  this.bb.writeFloat64(this.space -= 8, value);
};
flatbuffers.Builder.prototype.addInt8 = function(value) {
  this.prep(1, 0);
  this.writeInt8(value);
};
flatbuffers.Builder.prototype.addInt16 = function(value) {
  this.prep(2, 0);
  this.writeInt16(value);
};
flatbuffers.Builder.prototype.addInt32 = function(value) {
  this.prep(4, 0);
  this.writeInt32(value);
};
flatbuffers.Builder.prototype.addInt64 = function(value) {
  this.prep(8, 0);
  this.writeInt64(value);
};
flatbuffers.Builder.prototype.addFloat32 = function(value) {
  this.prep(4, 0);
  this.writeFloat32(value);
};
flatbuffers.Builder.prototype.addFloat64 = function(value) {
  this.prep(8, 0);
  this.writeFloat64(value);
};
flatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt8(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt16(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addInt32(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || !value.equals(defaultValue)) {
    this.addInt64(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat32(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addFloat64(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {
  if (this.force_defaults || value != defaultValue) {
    this.addOffset(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {
  if (value != defaultValue) {
    this.nested(value);
    this.slot(voffset);
  }
};
flatbuffers.Builder.prototype.nested = function(obj) {
  if (obj != this.offset()) {
    throw new Error("FlatBuffers: struct must be serialized inline.");
  }
};
flatbuffers.Builder.prototype.notNested = function() {
  if (this.isNested) {
    throw new Error("FlatBuffers: object serialization must not be nested.");
  }
};
flatbuffers.Builder.prototype.slot = function(voffset) {
  this.vtable[voffset] = this.offset();
};
flatbuffers.Builder.prototype.offset = function() {
  return this.bb.capacity() - this.space;
};
flatbuffers.Builder.growByteBuffer = function(bb) {
  var old_buf_size = bb.capacity();
  if (old_buf_size & 3221225472) {
    throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
  }
  var new_buf_size = old_buf_size << 1;
  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);
  nbb.setPosition(new_buf_size - old_buf_size);
  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);
  return nbb;
};
flatbuffers.Builder.prototype.addOffset = function(offset) {
  this.prep(flatbuffers.SIZEOF_INT, 0);
  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);
};
flatbuffers.Builder.prototype.startObject = function(numfields) {
  this.notNested();
  if (this.vtable == null) {
    this.vtable = [];
  }
  this.vtable_in_use = numfields;
  for (var i = 0; i < numfields; i++) {
    this.vtable[i] = 0;
  }
  this.isNested = true;
  this.object_start = this.offset();
};
flatbuffers.Builder.prototype.endObject = function() {
  if (this.vtable == null || !this.isNested) {
    throw new Error("FlatBuffers: endObject called without startObject");
  }
  this.addInt32(0);
  var vtableloc = this.offset();
  var i = this.vtable_in_use - 1;
  for (; i >= 0 && this.vtable[i] == 0; i--) {
  }
  var trimmed_size = i + 1;
  for (; i >= 0; i--) {
    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);
  }
  var standard_fields = 2;
  this.addInt16(vtableloc - this.object_start);
  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;
  this.addInt16(len);
  var existing_vtable = 0;
  var vt1 = this.space;
  outer_loop:
    for (i = 0; i < this.vtables.length; i++) {
      var vt2 = this.bb.capacity() - this.vtables[i];
      if (len == this.bb.readInt16(vt2)) {
        for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {
          if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {
            continue outer_loop;
          }
        }
        existing_vtable = this.vtables[i];
        break;
      }
    }
  if (existing_vtable) {
    this.space = this.bb.capacity() - vtableloc;
    this.bb.writeInt32(this.space, existing_vtable - vtableloc);
  } else {
    this.vtables.push(this.offset());
    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);
  }
  this.isNested = false;
  return vtableloc;
};
flatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier, opt_size_prefix) {
  var size_prefix = opt_size_prefix ? flatbuffers.SIZE_PREFIX_LENGTH : 0;
  if (opt_file_identifier) {
    var file_identifier = opt_file_identifier;
    this.prep(this.minalign, flatbuffers.SIZEOF_INT + flatbuffers.FILE_IDENTIFIER_LENGTH + size_prefix);
    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
      throw new Error("FlatBuffers: file identifier must be length " + flatbuffers.FILE_IDENTIFIER_LENGTH);
    }
    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {
      this.writeInt8(file_identifier.charCodeAt(i));
    }
  }
  this.prep(this.minalign, flatbuffers.SIZEOF_INT + size_prefix);
  this.addOffset(root_table);
  if (size_prefix) {
    this.addInt32(this.bb.capacity() - this.space);
  }
  this.bb.setPosition(this.space);
};
flatbuffers.Builder.prototype.finishSizePrefixed = function(root_table, opt_file_identifier) {
  this.finish(root_table, opt_file_identifier, true);
};
flatbuffers.Builder.prototype.requiredField = function(table2, field) {
  var table_start = this.bb.capacity() - table2;
  var vtable_start = table_start - this.bb.readInt32(table_start);
  var ok = this.bb.readInt16(vtable_start + field) != 0;
  if (!ok) {
    throw new Error("FlatBuffers: field " + field + " must be set");
  }
};
flatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {
  this.notNested();
  this.vector_num_elems = num_elems;
  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);
  this.prep(alignment, elem_size * num_elems);
};
flatbuffers.Builder.prototype.endVector = function() {
  this.writeInt32(this.vector_num_elems);
  return this.offset();
};
flatbuffers.Builder.prototype.createString = function(s) {
  if (s instanceof Uint8Array) {
    var utf82 = s;
  } else {
    var utf82 = [];
    var i = 0;
    while (i < s.length) {
      var codePoint;
      var a = s.charCodeAt(i++);
      if (a < 55296 || a >= 56320) {
        codePoint = a;
      } else {
        var b = s.charCodeAt(i++);
        codePoint = (a << 10) + b + (65536 - (55296 << 10) - 56320);
      }
      if (codePoint < 128) {
        utf82.push(codePoint);
      } else {
        if (codePoint < 2048) {
          utf82.push(codePoint >> 6 & 31 | 192);
        } else {
          if (codePoint < 65536) {
            utf82.push(codePoint >> 12 & 15 | 224);
          } else {
            utf82.push(codePoint >> 18 & 7 | 240, codePoint >> 12 & 63 | 128);
          }
          utf82.push(codePoint >> 6 & 63 | 128);
        }
        utf82.push(codePoint & 63 | 128);
      }
    }
  }
  this.addInt8(0);
  this.startVector(1, utf82.length, 1);
  this.bb.setPosition(this.space -= utf82.length);
  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf82.length; i++) {
    bytes[offset++] = utf82[i];
  }
  return this.endVector();
};
flatbuffers.Builder.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};
flatbuffers.ByteBuffer = function(bytes) {
  this.bytes_ = bytes;
  this.position_ = 0;
};
flatbuffers.ByteBuffer.allocate = function(byte_size) {
  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));
};
flatbuffers.ByteBuffer.prototype.clear = function() {
  this.position_ = 0;
};
flatbuffers.ByteBuffer.prototype.bytes = function() {
  return this.bytes_;
};
flatbuffers.ByteBuffer.prototype.position = function() {
  return this.position_;
};
flatbuffers.ByteBuffer.prototype.setPosition = function(position) {
  this.position_ = position;
};
flatbuffers.ByteBuffer.prototype.capacity = function() {
  return this.bytes_.length;
};
flatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {
  return this.readUint8(offset) << 24 >> 24;
};
flatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {
  return this.bytes_[offset];
};
flatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {
  return this.readUint16(offset) << 16 >> 16;
};
flatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;
};
flatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {
  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;
};
flatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {
  return this.readInt32(offset) >>> 0;
};
flatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {
  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));
};
flatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {
  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));
};
flatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {
  flatbuffers.int32[0] = this.readInt32(offset);
  return flatbuffers.float32[0];
};
flatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {
  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);
  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);
  return flatbuffers.float64[0];
};
flatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {
  this.bytes_[offset] = value;
};
flatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {
  this.bytes_[offset] = value;
};
flatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
};
flatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
};
flatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
  this.bytes_[offset + 2] = value >> 16;
  this.bytes_[offset + 3] = value >> 24;
};
flatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {
  this.bytes_[offset] = value;
  this.bytes_[offset + 1] = value >> 8;
  this.bytes_[offset + 2] = value >> 16;
  this.bytes_[offset + 3] = value >> 24;
};
flatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {
  this.writeInt32(offset, value.low);
  this.writeInt32(offset + 4, value.high);
};
flatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {
  this.writeUint32(offset, value.low);
  this.writeUint32(offset + 4, value.high);
};
flatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {
  flatbuffers.float32[0] = value;
  this.writeInt32(offset, flatbuffers.int32[0]);
};
flatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {
  flatbuffers.float64[0] = value;
  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);
  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);
};
flatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {
  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT + flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
  }
  var result = "";
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    result += String.fromCharCode(this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));
  }
  return result;
};
flatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {
  var vtable = bb_pos - this.readInt32(bb_pos);
  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;
};
flatbuffers.ByteBuffer.prototype.__union = function(t, offset) {
  t.bb_pos = offset + this.readInt32(offset);
  t.bb = this;
  return t;
};
flatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {
  offset += this.readInt32(offset);
  var length = this.readInt32(offset);
  var result = "";
  var i = 0;
  offset += flatbuffers.SIZEOF_INT;
  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {
    return this.bytes_.subarray(offset, offset + length);
  }
  while (i < length) {
    var codePoint;
    var a = this.readUint8(offset + i++);
    if (a < 192) {
      codePoint = a;
    } else {
      var b = this.readUint8(offset + i++);
      if (a < 224) {
        codePoint = (a & 31) << 6 | b & 63;
      } else {
        var c2 = this.readUint8(offset + i++);
        if (a < 240) {
          codePoint = (a & 15) << 12 | (b & 63) << 6 | c2 & 63;
        } else {
          var d = this.readUint8(offset + i++);
          codePoint = (a & 7) << 18 | (b & 63) << 12 | (c2 & 63) << 6 | d & 63;
        }
      }
    }
    if (codePoint < 65536) {
      result += String.fromCharCode(codePoint);
    } else {
      codePoint -= 65536;
      result += String.fromCharCode((codePoint >> 10) + 55296, (codePoint & (1 << 10) - 1) + 56320);
    }
  }
  return result;
};
flatbuffers.ByteBuffer.prototype.__indirect = function(offset) {
  return offset + this.readInt32(offset);
};
flatbuffers.ByteBuffer.prototype.__vector = function(offset) {
  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT;
};
flatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {
  return this.readInt32(offset + this.readInt32(offset));
};
flatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {
  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {
    throw new Error("FlatBuffers: file identifier must be length " + flatbuffers.FILE_IDENTIFIER_LENGTH);
  }
  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {
    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {
      return false;
    }
  }
  return true;
};
flatbuffers.ByteBuffer.prototype.createLong = function(low, high) {
  return flatbuffers.Long.create(low, high);
};
var flatbuffers$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  flatbuffers
});
var require$$2 = /* @__PURE__ */ getAugmentedNamespace(flatbuffers$1);
var utf8$2 = {};
Object.defineProperty(utf8$2, "__esModule", { value: true });
utf8$2.encodeUtf8 = utf8$2.decodeUtf8 = void 0;
var decoder = new TextDecoder("utf-8");
utf8$2.decodeUtf8 = function(buffer2) {
  return decoder.decode(buffer2);
};
var encoder = new TextEncoder();
utf8$2.encodeUtf8 = function(value) {
  return encoder.encode(value);
};
var compat = {};
var interfaces = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.AsyncQueue = exports.ReadableInterop = exports.ArrowJSON = exports.ITERATOR_DONE = void 0;
  var tslib_12 = tslib.exports;
  var adapters_12 = adapters;
  exports.ITERATOR_DONE = Object.freeze({ done: true, value: void 0 });
  var ArrowJSON = function() {
    function ArrowJSON2(_json) {
      this._json = _json;
    }
    Object.defineProperty(ArrowJSON2.prototype, "schema", {
      get: function() {
        return this._json["schema"];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ArrowJSON2.prototype, "batches", {
      get: function() {
        return this._json["batches"] || [];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(ArrowJSON2.prototype, "dictionaries", {
      get: function() {
        return this._json["dictionaries"] || [];
      },
      enumerable: false,
      configurable: true
    });
    return ArrowJSON2;
  }();
  exports.ArrowJSON = ArrowJSON;
  var ReadableInterop = function() {
    function ReadableInterop2() {
    }
    ReadableInterop2.prototype.tee = function() {
      return this._getDOMStream().tee();
    };
    ReadableInterop2.prototype.pipe = function(writable, options) {
      return this._getNodeStream().pipe(writable, options);
    };
    ReadableInterop2.prototype.pipeTo = function(writable, options) {
      return this._getDOMStream().pipeTo(writable, options);
    };
    ReadableInterop2.prototype.pipeThrough = function(duplex, options) {
      return this._getDOMStream().pipeThrough(duplex, options);
    };
    ReadableInterop2.prototype._getDOMStream = function() {
      return this._DOMStream || (this._DOMStream = this.toDOMStream());
    };
    ReadableInterop2.prototype._getNodeStream = function() {
      return this._nodeStream || (this._nodeStream = this.toNodeStream());
    };
    return ReadableInterop2;
  }();
  exports.ReadableInterop = ReadableInterop;
  var AsyncQueue = function(_super) {
    tslib_12.__extends(AsyncQueue2, _super);
    function AsyncQueue2() {
      var _this = _super.call(this) || this;
      _this._values = [];
      _this.resolvers = [];
      _this._closedPromise = new Promise(function(r) {
        return _this._closedPromiseResolve = r;
      });
      return _this;
    }
    Object.defineProperty(AsyncQueue2.prototype, "closed", {
      get: function() {
        return this._closedPromise;
      },
      enumerable: false,
      configurable: true
    });
    AsyncQueue2.prototype.cancel = function(reason) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.return(reason)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    };
    AsyncQueue2.prototype.write = function(value) {
      if (this._ensureOpen()) {
        this.resolvers.length <= 0 ? this._values.push(value) : this.resolvers.shift().resolve({ done: false, value });
      }
    };
    AsyncQueue2.prototype.abort = function(value) {
      if (this._closedPromiseResolve) {
        this.resolvers.length <= 0 ? this._error = { error: value } : this.resolvers.shift().reject({ done: true, value });
      }
    };
    AsyncQueue2.prototype.close = function() {
      if (this._closedPromiseResolve) {
        var resolvers = this.resolvers;
        while (resolvers.length > 0) {
          resolvers.shift().resolve(exports.ITERATOR_DONE);
        }
        this._closedPromiseResolve();
        this._closedPromiseResolve = void 0;
      }
    };
    AsyncQueue2.prototype[Symbol.asyncIterator] = function() {
      return this;
    };
    AsyncQueue2.prototype.toDOMStream = function(options) {
      return adapters_12.default.toDOMStream(this._closedPromiseResolve || this._error ? this : this._values, options);
    };
    AsyncQueue2.prototype.toNodeStream = function(options) {
      return adapters_12.default.toNodeStream(this._closedPromiseResolve || this._error ? this : this._values, options);
    };
    AsyncQueue2.prototype.throw = function(_) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.abort(_)];
            case 1:
              _a.sent();
              return [2, exports.ITERATOR_DONE];
          }
        });
      });
    };
    AsyncQueue2.prototype.return = function(_) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.close()];
            case 1:
              _a.sent();
              return [2, exports.ITERATOR_DONE];
          }
        });
      });
    };
    AsyncQueue2.prototype.read = function(size) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.next(size, "read")];
            case 1:
              return [2, _a.sent().value];
          }
        });
      });
    };
    AsyncQueue2.prototype.peek = function(size) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.next(size, "peek")];
            case 1:
              return [2, _a.sent().value];
          }
        });
      });
    };
    AsyncQueue2.prototype.next = function() {
      var _this = this;
      var _args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        _args[_i] = arguments[_i];
      }
      if (this._values.length > 0) {
        return Promise.resolve({ done: false, value: this._values.shift() });
      } else if (this._error) {
        return Promise.reject({ done: true, value: this._error.error });
      } else if (!this._closedPromiseResolve) {
        return Promise.resolve(exports.ITERATOR_DONE);
      } else {
        return new Promise(function(resolve, reject) {
          _this.resolvers.push({ resolve, reject });
        });
      }
    };
    AsyncQueue2.prototype._ensureOpen = function() {
      if (this._closedPromiseResolve) {
        return true;
      }
      throw new Error("AsyncQueue is closed");
    };
    return AsyncQueue2;
  }(ReadableInterop);
  exports.AsyncQueue = AsyncQueue;
})(interfaces);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isReadableNodeStream = exports.isWritableNodeStream = exports.isReadableDOMStream = exports.isWritableDOMStream = exports.isFetchResponse = exports.isFSReadStream = exports.isFileHandle = exports.isUnderlyingSink = exports.isIteratorResult = exports.isArrayLike = exports.isArrowJSON = exports.isAsyncIterable = exports.isIterable = exports.isObservable = exports.isPromise = exports.isObject = exports.BigUint64ArrayAvailable = exports.BigUint64Array = exports.BigInt64ArrayAvailable = exports.BigInt64Array = exports.BigIntAvailable = exports.BigInt = void 0;
  var tslib_12 = tslib.exports;
  var interfaces_12 = interfaces;
  var _a = tslib_12.__read(function() {
    var BigIntUnavailableError = function() {
      throw new Error("BigInt is not available in this environment");
    };
    function BigIntUnavailable() {
      throw BigIntUnavailableError();
    }
    BigIntUnavailable.asIntN = function() {
      throw BigIntUnavailableError();
    };
    BigIntUnavailable.asUintN = function() {
      throw BigIntUnavailableError();
    };
    return typeof BigInt !== "undefined" ? [BigInt, true] : [BigIntUnavailable, false];
  }(), 2), BigIntCtor = _a[0], BigIntAvailable = _a[1];
  exports.BigInt = BigIntCtor;
  exports.BigIntAvailable = BigIntAvailable;
  var _b = tslib_12.__read(function() {
    var BigInt64ArrayUnavailableError = function() {
      throw new Error("BigInt64Array is not available in this environment");
    };
    var BigInt64ArrayUnavailable = function() {
      function BigInt64ArrayUnavailable2() {
        throw BigInt64ArrayUnavailableError();
      }
      Object.defineProperty(BigInt64ArrayUnavailable2, "BYTES_PER_ELEMENT", {
        get: function() {
          return 8;
        },
        enumerable: false,
        configurable: true
      });
      BigInt64ArrayUnavailable2.of = function() {
        throw BigInt64ArrayUnavailableError();
      };
      BigInt64ArrayUnavailable2.from = function() {
        throw BigInt64ArrayUnavailableError();
      };
      return BigInt64ArrayUnavailable2;
    }();
    return typeof BigInt64Array !== "undefined" ? [BigInt64Array, true] : [BigInt64ArrayUnavailable, false];
  }(), 2), BigInt64ArrayCtor = _b[0], BigInt64ArrayAvailable = _b[1];
  exports.BigInt64Array = BigInt64ArrayCtor;
  exports.BigInt64ArrayAvailable = BigInt64ArrayAvailable;
  var _c = tslib_12.__read(function() {
    var BigUint64ArrayUnavailableError = function() {
      throw new Error("BigUint64Array is not available in this environment");
    };
    var BigUint64ArrayUnavailable = function() {
      function BigUint64ArrayUnavailable2() {
        throw BigUint64ArrayUnavailableError();
      }
      Object.defineProperty(BigUint64ArrayUnavailable2, "BYTES_PER_ELEMENT", {
        get: function() {
          return 8;
        },
        enumerable: false,
        configurable: true
      });
      BigUint64ArrayUnavailable2.of = function() {
        throw BigUint64ArrayUnavailableError();
      };
      BigUint64ArrayUnavailable2.from = function() {
        throw BigUint64ArrayUnavailableError();
      };
      return BigUint64ArrayUnavailable2;
    }();
    return typeof BigUint64Array !== "undefined" ? [BigUint64Array, true] : [BigUint64ArrayUnavailable, false];
  }(), 2), BigUint64ArrayCtor = _c[0], BigUint64ArrayAvailable = _c[1];
  exports.BigUint64Array = BigUint64ArrayCtor;
  exports.BigUint64ArrayAvailable = BigUint64ArrayAvailable;
  var isNumber = function(x) {
    return typeof x === "number";
  };
  var isBoolean = function(x) {
    return typeof x === "boolean";
  };
  var isFunction = function(x) {
    return typeof x === "function";
  };
  exports.isObject = function(x) {
    return x != null && Object(x) === x;
  };
  exports.isPromise = function(x) {
    return exports.isObject(x) && isFunction(x.then);
  };
  exports.isObservable = function(x) {
    return exports.isObject(x) && isFunction(x.subscribe);
  };
  exports.isIterable = function(x) {
    return exports.isObject(x) && isFunction(x[Symbol.iterator]);
  };
  exports.isAsyncIterable = function(x) {
    return exports.isObject(x) && isFunction(x[Symbol.asyncIterator]);
  };
  exports.isArrowJSON = function(x) {
    return exports.isObject(x) && exports.isObject(x["schema"]);
  };
  exports.isArrayLike = function(x) {
    return exports.isObject(x) && isNumber(x["length"]);
  };
  exports.isIteratorResult = function(x) {
    return exports.isObject(x) && "done" in x && "value" in x;
  };
  exports.isUnderlyingSink = function(x) {
    return exports.isObject(x) && isFunction(x["abort"]) && isFunction(x["close"]) && isFunction(x["start"]) && isFunction(x["write"]);
  };
  exports.isFileHandle = function(x) {
    return exports.isObject(x) && isFunction(x["stat"]) && isNumber(x["fd"]);
  };
  exports.isFSReadStream = function(x) {
    return exports.isReadableNodeStream(x) && isNumber(x["bytesRead"]);
  };
  exports.isFetchResponse = function(x) {
    return exports.isObject(x) && exports.isReadableDOMStream(x["body"]);
  };
  exports.isWritableDOMStream = function(x) {
    return exports.isObject(x) && isFunction(x["abort"]) && isFunction(x["getWriter"]) && !(x instanceof interfaces_12.ReadableInterop);
  };
  exports.isReadableDOMStream = function(x) {
    return exports.isObject(x) && isFunction(x["cancel"]) && isFunction(x["getReader"]) && !(x instanceof interfaces_12.ReadableInterop);
  };
  exports.isWritableNodeStream = function(x) {
    return exports.isObject(x) && isFunction(x["end"]) && isFunction(x["write"]) && isBoolean(x["writable"]) && !(x instanceof interfaces_12.ReadableInterop);
  };
  exports.isReadableNodeStream = function(x) {
    return exports.isObject(x) && isFunction(x["read"]) && isFunction(x["pipe"]) && isBoolean(x["readable"]) && !(x instanceof interfaces_12.ReadableInterop);
  };
})(compat);
Object.defineProperty(buffer$1, "__esModule", { value: true });
buffer$1.compareArrayLike = buffer$1.rebaseValueOffsets = buffer$1.toUint8ClampedArrayAsyncIterator = buffer$1.toFloat64ArrayAsyncIterator = buffer$1.toFloat32ArrayAsyncIterator = buffer$1.toUint32ArrayAsyncIterator = buffer$1.toUint16ArrayAsyncIterator = buffer$1.toUint8ArrayAsyncIterator = buffer$1.toInt32ArrayAsyncIterator = buffer$1.toInt16ArrayAsyncIterator = buffer$1.toInt8ArrayAsyncIterator = buffer$1.toArrayBufferViewAsyncIterator = buffer$1.toUint8ClampedArrayIterator = buffer$1.toFloat64ArrayIterator = buffer$1.toFloat32ArrayIterator = buffer$1.toUint32ArrayIterator = buffer$1.toUint16ArrayIterator = buffer$1.toUint8ArrayIterator = buffer$1.toInt32ArrayIterator = buffer$1.toInt16ArrayIterator = buffer$1.toInt8ArrayIterator = buffer$1.toArrayBufferViewIterator = buffer$1.toUint8ClampedArray = buffer$1.toFloat64Array = buffer$1.toFloat32Array = buffer$1.toBigUint64Array = buffer$1.toUint32Array = buffer$1.toUint16Array = buffer$1.toUint8Array = buffer$1.toBigInt64Array = buffer$1.toInt32Array = buffer$1.toInt16Array = buffer$1.toInt8Array = buffer$1.toArrayBufferView = buffer$1.joinUint8Arrays = buffer$1.memcpy = void 0;
var tslib_1$1e = tslib.exports;
var flatbuffers_1$4 = require$$2;
var utf8_1$7 = utf8$2;
var ByteBuffer$2 = flatbuffers_1$4.flatbuffers.ByteBuffer;
var compat_1$b = compat;
var SharedArrayBuf = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : ArrayBuffer;
function collapseContiguousByteRanges(chunks) {
  var result = chunks[0] ? [chunks[0]] : [];
  var xOffset, yOffset, xLen, yLen;
  for (var x = void 0, y = void 0, i = 0, j = 0, n = chunks.length; ++i < n; ) {
    x = result[j];
    y = chunks[i];
    if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {
      y && (result[++j] = y);
      continue;
    }
    xOffset = x.byteOffset, xLen = x.byteLength;
    yOffset = y.byteOffset, yLen = y.byteLength;
    if (xOffset + xLen < yOffset || yOffset + yLen < xOffset) {
      y && (result[++j] = y);
      continue;
    }
    result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);
  }
  return result;
}
function memcpy(target, source, targetByteOffset, sourceByteLength) {
  if (targetByteOffset === void 0) {
    targetByteOffset = 0;
  }
  if (sourceByteLength === void 0) {
    sourceByteLength = source.byteLength;
  }
  var targetByteLength = target.byteLength;
  var dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);
  var src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));
  dst.set(src, targetByteOffset);
  return target;
}
buffer$1.memcpy = memcpy;
function joinUint8Arrays(chunks, size) {
  var result = collapseContiguousByteRanges(chunks);
  var byteLength = result.reduce(function(x, b) {
    return x + b.byteLength;
  }, 0);
  var source, sliced, buffer2;
  var offset = 0, index = -1;
  var length = Math.min(size || Infinity, byteLength);
  for (var n = result.length; ++index < n; ) {
    source = result[index];
    sliced = source.subarray(0, Math.min(source.length, length - offset));
    if (length <= offset + sliced.length) {
      if (sliced.length < source.length) {
        result[index] = source.subarray(sliced.length);
      } else if (sliced.length === source.length) {
        index++;
      }
      buffer2 ? memcpy(buffer2, sliced, offset) : buffer2 = sliced;
      break;
    }
    memcpy(buffer2 || (buffer2 = new Uint8Array(length)), sliced, offset);
    offset += sliced.length;
  }
  return [buffer2 || new Uint8Array(0), result.slice(index), byteLength - (buffer2 ? buffer2.byteLength : 0)];
}
buffer$1.joinUint8Arrays = joinUint8Arrays;
function toArrayBufferView(ArrayBufferViewCtor, input) {
  var value = compat_1$b.isIteratorResult(input) ? input.value : input;
  if (value instanceof ArrayBufferViewCtor) {
    if (ArrayBufferViewCtor === Uint8Array) {
      return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);
    }
    return value;
  }
  if (!value) {
    return new ArrayBufferViewCtor(0);
  }
  if (typeof value === "string") {
    value = utf8_1$7.encodeUtf8(value);
  }
  if (value instanceof ArrayBuffer) {
    return new ArrayBufferViewCtor(value);
  }
  if (value instanceof SharedArrayBuf) {
    return new ArrayBufferViewCtor(value);
  }
  if (value instanceof ByteBuffer$2) {
    return toArrayBufferView(ArrayBufferViewCtor, value.bytes());
  }
  return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0) : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);
}
buffer$1.toArrayBufferView = toArrayBufferView;
buffer$1.toInt8Array = function(input) {
  return toArrayBufferView(Int8Array, input);
};
buffer$1.toInt16Array = function(input) {
  return toArrayBufferView(Int16Array, input);
};
buffer$1.toInt32Array = function(input) {
  return toArrayBufferView(Int32Array, input);
};
buffer$1.toBigInt64Array = function(input) {
  return toArrayBufferView(compat_1$b.BigInt64Array, input);
};
buffer$1.toUint8Array = function(input) {
  return toArrayBufferView(Uint8Array, input);
};
buffer$1.toUint16Array = function(input) {
  return toArrayBufferView(Uint16Array, input);
};
buffer$1.toUint32Array = function(input) {
  return toArrayBufferView(Uint32Array, input);
};
buffer$1.toBigUint64Array = function(input) {
  return toArrayBufferView(compat_1$b.BigUint64Array, input);
};
buffer$1.toFloat32Array = function(input) {
  return toArrayBufferView(Float32Array, input);
};
buffer$1.toFloat64Array = function(input) {
  return toArrayBufferView(Float64Array, input);
};
buffer$1.toUint8ClampedArray = function(input) {
  return toArrayBufferView(Uint8ClampedArray, input);
};
var pump$1 = function(iterator2) {
  iterator2.next();
  return iterator2;
};
function toArrayBufferViewIterator(ArrayCtor, source) {
  var wrap2, buffers;
  return tslib_1$1e.__generator(this, function(_a) {
    switch (_a.label) {
      case 0:
        wrap2 = function(x) {
          return tslib_1$1e.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                return [4, x];
              case 1:
                _a2.sent();
                return [2];
            }
          });
        };
        buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf ? wrap2(source) : !compat_1$b.isIterable(source) ? wrap2(source) : source;
        return [5, tslib_1$1e.__values(pump$1(function(it) {
          var r, _a2, _b;
          return tslib_1$1e.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                r = null;
                _c.label = 1;
              case 1:
                _b = (_a2 = it).next;
                return [4, toArrayBufferView(ArrayCtor, r)];
              case 2:
                r = _b.apply(_a2, [_c.sent()]);
                _c.label = 3;
              case 3:
                if (!r.done)
                  return [3, 1];
                _c.label = 4;
              case 4:
                return [2];
            }
          });
        }(buffers[Symbol.iterator]())))];
      case 1:
        _a.sent();
        return [2, new ArrayCtor()];
    }
  });
}
buffer$1.toArrayBufferViewIterator = toArrayBufferViewIterator;
buffer$1.toInt8ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Int8Array, input);
};
buffer$1.toInt16ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Int16Array, input);
};
buffer$1.toInt32ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Int32Array, input);
};
buffer$1.toUint8ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Uint8Array, input);
};
buffer$1.toUint16ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Uint16Array, input);
};
buffer$1.toUint32ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Uint32Array, input);
};
buffer$1.toFloat32ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Float32Array, input);
};
buffer$1.toFloat64ArrayIterator = function(input) {
  return toArrayBufferViewIterator(Float64Array, input);
};
buffer$1.toUint8ClampedArrayIterator = function(input) {
  return toArrayBufferViewIterator(Uint8ClampedArray, input);
};
function toArrayBufferViewAsyncIterator(ArrayCtor, source) {
  return tslib_1$1e.__asyncGenerator(this, arguments, function toArrayBufferViewAsyncIterator_1() {
    var _a, _b, wrap2, emit, buffers;
    return tslib_1$1e.__generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          if (!compat_1$b.isPromise(source))
            return [3, 5];
          _a = toArrayBufferViewAsyncIterator;
          _b = [ArrayCtor];
          return [4, tslib_1$1e.__await(source)];
        case 1:
          return [5, tslib_1$1e.__values(tslib_1$1e.__asyncDelegator.apply(void 0, [tslib_1$1e.__asyncValues.apply(void 0, [_a.apply(void 0, _b.concat([_c.sent()]))])]))];
        case 2:
          return [4, tslib_1$1e.__await.apply(void 0, [_c.sent()])];
        case 3:
          return [4, tslib_1$1e.__await.apply(void 0, [_c.sent()])];
        case 4:
          return [2, _c.sent()];
        case 5:
          wrap2 = function(x) {
            return tslib_1$1e.__asyncGenerator(this, arguments, function() {
              return tslib_1$1e.__generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, tslib_1$1e.__await(x)];
                  case 1:
                    return [4, tslib_1$1e.__await.apply(void 0, [_a2.sent()])];
                  case 2:
                    return [4, _a2.sent()];
                  case 3:
                    _a2.sent();
                    return [2];
                }
              });
            });
          };
          emit = function(source2) {
            return tslib_1$1e.__asyncGenerator(this, arguments, function() {
              return tslib_1$1e.__generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [5, tslib_1$1e.__values(tslib_1$1e.__asyncDelegator(tslib_1$1e.__asyncValues(pump$1(function(it) {
                      var r, _a3, _b2;
                      return tslib_1$1e.__generator(this, function(_c2) {
                        switch (_c2.label) {
                          case 0:
                            r = null;
                            _c2.label = 1;
                          case 1:
                            _b2 = (_a3 = it).next;
                            return [4, r === null || r === void 0 ? void 0 : r.value];
                          case 2:
                            r = _b2.apply(_a3, [_c2.sent()]);
                            _c2.label = 3;
                          case 3:
                            if (!r.done)
                              return [3, 1];
                            _c2.label = 4;
                          case 4:
                            return [2];
                        }
                      });
                    }(source2[Symbol.iterator]())))))];
                  case 1:
                    return [4, tslib_1$1e.__await.apply(void 0, [_a2.sent()])];
                  case 2:
                    _a2.sent();
                    return [2];
                }
              });
            });
          };
          buffers = typeof source === "string" ? wrap2(source) : ArrayBuffer.isView(source) ? wrap2(source) : source instanceof ArrayBuffer ? wrap2(source) : source instanceof SharedArrayBuf ? wrap2(source) : compat_1$b.isIterable(source) ? emit(source) : !compat_1$b.isAsyncIterable(source) ? wrap2(source) : source;
          return [
            5,
            tslib_1$1e.__values(tslib_1$1e.__asyncDelegator(tslib_1$1e.__asyncValues(pump$1(function(it) {
              return tslib_1$1e.__asyncGenerator(this, arguments, function() {
                var r, _a2, _b2;
                return tslib_1$1e.__generator(this, function(_c2) {
                  switch (_c2.label) {
                    case 0:
                      r = null;
                      _c2.label = 1;
                    case 1:
                      _b2 = (_a2 = it).next;
                      return [4, tslib_1$1e.__await(toArrayBufferView(ArrayCtor, r))];
                    case 2:
                      return [4, _c2.sent()];
                    case 3:
                      return [4, tslib_1$1e.__await.apply(void 0, [_b2.apply(_a2, [_c2.sent()])])];
                    case 4:
                      r = _c2.sent();
                      _c2.label = 5;
                    case 5:
                      if (!r.done)
                        return [3, 1];
                      _c2.label = 6;
                    case 6:
                      return [2];
                  }
                });
              });
            }(buffers[Symbol.asyncIterator]())))))
          ];
        case 6:
          return [4, tslib_1$1e.__await.apply(void 0, [
            _c.sent()
          ])];
        case 7:
          _c.sent();
          return [4, tslib_1$1e.__await(new ArrayCtor())];
        case 8:
          return [2, _c.sent()];
      }
    });
  });
}
buffer$1.toArrayBufferViewAsyncIterator = toArrayBufferViewAsyncIterator;
buffer$1.toInt8ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Int8Array, input);
};
buffer$1.toInt16ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Int16Array, input);
};
buffer$1.toInt32ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Int32Array, input);
};
buffer$1.toUint8ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Uint8Array, input);
};
buffer$1.toUint16ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Uint16Array, input);
};
buffer$1.toUint32ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Uint32Array, input);
};
buffer$1.toFloat32ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Float32Array, input);
};
buffer$1.toFloat64ArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Float64Array, input);
};
buffer$1.toUint8ClampedArrayAsyncIterator = function(input) {
  return toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);
};
function rebaseValueOffsets(offset, length, valueOffsets) {
  if (offset !== 0) {
    valueOffsets = valueOffsets.slice(0, length + 1);
    for (var i = -1; ++i <= length; ) {
      valueOffsets[i] += offset;
    }
  }
  return valueOffsets;
}
buffer$1.rebaseValueOffsets = rebaseValueOffsets;
function compareArrayLike(a, b) {
  var i = 0;
  var n = a.length;
  if (n !== b.length) {
    return false;
  }
  if (n > 0) {
    do {
      if (a[i] !== b[i]) {
        return false;
      }
    } while (++i < n);
  }
  return true;
}
buffer$1.compareArrayLike = compareArrayLike;
Object.defineProperty(adapters, "__esModule", { value: true });
var tslib_1$1d = tslib.exports;
var buffer_1$j = buffer$1;
adapters.default = {
  fromIterable: function(source) {
    return pump(fromIterable(source));
  },
  fromAsyncIterable: function(source) {
    return pump(fromAsyncIterable(source));
  },
  fromDOMStream: function(source) {
    return pump(fromDOMStream(source));
  },
  fromNodeStream: function(stream2) {
    return pump(fromNodeStream(stream2));
  },
  toDOMStream: function(source, options) {
    throw new Error('"toDOMStream" not available in this environment');
  },
  toNodeStream: function(source, options) {
    throw new Error('"toNodeStream" not available in this environment');
  }
};
var pump = function(iterator2) {
  iterator2.next();
  return iterator2;
};
function fromIterable(source) {
  function byteRange() {
    var _a2;
    if (cmd === "peek") {
      return buffer_1$j.joinUint8Arrays(buffers, size)[0];
    }
    _a2 = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer2 = _a2[0], buffers = _a2[1], bufferLength = _a2[2];
    return buffer2;
  }
  var done, threw, buffers, buffer2, cmd, size, bufferLength, it, e_1;
  var _a, _b, _c;
  return tslib_1$1d.__generator(this, function(_d) {
    switch (_d.label) {
      case 0:
        threw = false;
        buffers = [];
        bufferLength = 0;
        return [4, null];
      case 1:
        _a = _d.sent(), cmd = _a.cmd, size = _a.size;
        it = buffer_1$j.toUint8ArrayIterator(source)[Symbol.iterator]();
        _d.label = 2;
      case 2:
        _d.trys.push([2, 9, 10, 11]);
        _d.label = 3;
      case 3:
        _b = isNaN(size - bufferLength) ? it.next(void 0) : it.next(size - bufferLength), done = _b.done, buffer2 = _b.value;
        if (!done && buffer2.byteLength > 0) {
          buffers.push(buffer2);
          bufferLength += buffer2.byteLength;
        }
        if (!(done || size <= bufferLength))
          return [3, 7];
        _d.label = 4;
      case 4:
        return [4, byteRange()];
      case 5:
        _c = _d.sent(), cmd = _c.cmd, size = _c.size;
        _d.label = 6;
      case 6:
        if (size < bufferLength)
          return [3, 4];
        _d.label = 7;
      case 7:
        if (!done)
          return [3, 3];
        _d.label = 8;
      case 8:
        return [3, 11];
      case 9:
        e_1 = _d.sent();
        (threw = true) && typeof it.throw === "function" && it.throw(e_1);
        return [3, 11];
      case 10:
        threw === false && typeof it.return === "function" && it.return(null);
        return [7];
      case 11:
        return [2, null];
    }
  });
}
function fromAsyncIterable(source) {
  return tslib_1$1d.__asyncGenerator(this, arguments, function fromAsyncIterable_1() {
    function byteRange() {
      var _a2;
      if (cmd === "peek") {
        return buffer_1$j.joinUint8Arrays(buffers, size)[0];
      }
      _a2 = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer2 = _a2[0], buffers = _a2[1], bufferLength = _a2[2];
      return buffer2;
    }
    var done, threw, buffers, buffer2, cmd, size, bufferLength, it, _a, e_2, _b, _c;
    var _d, _e, _f;
    return tslib_1$1d.__generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          threw = false;
          buffers = [];
          bufferLength = 0;
          return [4, tslib_1$1d.__await(null)];
        case 1:
          return [4, _g.sent()];
        case 2:
          _d = _g.sent(), cmd = _d.cmd, size = _d.size;
          it = buffer_1$j.toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();
          _g.label = 3;
        case 3:
          _g.trys.push([3, 15, 18, 21]);
          _g.label = 4;
        case 4:
          if (!isNaN(size - bufferLength))
            return [3, 6];
          return [4, tslib_1$1d.__await(it.next(void 0))];
        case 5:
          _a = _g.sent();
          return [3, 8];
        case 6:
          return [4, tslib_1$1d.__await(it.next(size - bufferLength))];
        case 7:
          _a = _g.sent();
          _g.label = 8;
        case 8:
          _e = _a, done = _e.done, buffer2 = _e.value;
          if (!done && buffer2.byteLength > 0) {
            buffers.push(buffer2);
            bufferLength += buffer2.byteLength;
          }
          if (!(done || size <= bufferLength))
            return [3, 13];
          _g.label = 9;
        case 9:
          return [4, tslib_1$1d.__await(byteRange())];
        case 10:
          return [4, _g.sent()];
        case 11:
          _f = _g.sent(), cmd = _f.cmd, size = _f.size;
          _g.label = 12;
        case 12:
          if (size < bufferLength)
            return [3, 9];
          _g.label = 13;
        case 13:
          if (!done)
            return [3, 4];
          _g.label = 14;
        case 14:
          return [3, 21];
        case 15:
          e_2 = _g.sent();
          _b = (threw = true) && typeof it.throw === "function";
          if (!_b)
            return [3, 17];
          return [4, tslib_1$1d.__await(it.throw(e_2))];
        case 16:
          _b = _g.sent();
          _g.label = 17;
        case 17:
          return [3, 21];
        case 18:
          _c = threw === false && typeof it.return === "function";
          if (!_c)
            return [3, 20];
          return [4, tslib_1$1d.__await(it.return(new Uint8Array(0)))];
        case 19:
          _c = _g.sent();
          _g.label = 20;
        case 20:
          return [7];
        case 21:
          return [4, tslib_1$1d.__await(null)];
        case 22:
          return [2, _g.sent()];
      }
    });
  });
}
function fromDOMStream(source) {
  return tslib_1$1d.__asyncGenerator(this, arguments, function fromDOMStream_1() {
    function byteRange() {
      var _a2;
      if (cmd === "peek") {
        return buffer_1$j.joinUint8Arrays(buffers, size)[0];
      }
      _a2 = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer2 = _a2[0], buffers = _a2[1], bufferLength = _a2[2];
      return buffer2;
    }
    var done, threw, buffers, buffer2, cmd, size, bufferLength, it, _a, e_3, _b;
    var _d, _e, _f;
    return tslib_1$1d.__generator(this, function(_g) {
      switch (_g.label) {
        case 0:
          done = false, threw = false;
          buffers = [];
          bufferLength = 0;
          return [4, tslib_1$1d.__await(null)];
        case 1:
          return [4, _g.sent()];
        case 2:
          _d = _g.sent(), cmd = _d.cmd, size = _d.size;
          it = new AdaptiveByteReader(source);
          _g.label = 3;
        case 3:
          _g.trys.push([3, 15, 18, 22]);
          _g.label = 4;
        case 4:
          if (!isNaN(size - bufferLength))
            return [3, 6];
          return [4, tslib_1$1d.__await(it["read"](void 0))];
        case 5:
          _a = _g.sent();
          return [3, 8];
        case 6:
          return [4, tslib_1$1d.__await(it["read"](size - bufferLength))];
        case 7:
          _a = _g.sent();
          _g.label = 8;
        case 8:
          _e = _a, done = _e.done, buffer2 = _e.value;
          if (!done && buffer2.byteLength > 0) {
            buffers.push(buffer_1$j.toUint8Array(buffer2));
            bufferLength += buffer2.byteLength;
          }
          if (!(done || size <= bufferLength))
            return [3, 13];
          _g.label = 9;
        case 9:
          return [4, tslib_1$1d.__await(byteRange())];
        case 10:
          return [4, _g.sent()];
        case 11:
          _f = _g.sent(), cmd = _f.cmd, size = _f.size;
          _g.label = 12;
        case 12:
          if (size < bufferLength)
            return [3, 9];
          _g.label = 13;
        case 13:
          if (!done)
            return [3, 4];
          _g.label = 14;
        case 14:
          return [3, 22];
        case 15:
          e_3 = _g.sent();
          _b = threw = true;
          if (!_b)
            return [3, 17];
          return [4, tslib_1$1d.__await(it["cancel"](e_3))];
        case 16:
          _b = _g.sent();
          _g.label = 17;
        case 17:
          return [3, 22];
        case 18:
          if (!(threw === false))
            return [3, 20];
          return [4, tslib_1$1d.__await(it["cancel"]())];
        case 19:
          _g.sent();
          return [3, 21];
        case 20:
          source["locked"] && it.releaseLock();
          _g.label = 21;
        case 21:
          return [7];
        case 22:
          return [4, tslib_1$1d.__await(null)];
        case 23:
          return [2, _g.sent()];
      }
    });
  });
}
var AdaptiveByteReader = function() {
  function AdaptiveByteReader2(source) {
    this.source = source;
    this.byobReader = null;
    this.defaultReader = null;
    try {
      this.supportsBYOB = !!(this.reader = this.getBYOBReader());
    } catch (e) {
      this.supportsBYOB = !(this.reader = this.getDefaultReader());
    }
  }
  Object.defineProperty(AdaptiveByteReader2.prototype, "closed", {
    get: function() {
      return this.reader ? this.reader["closed"].catch(function() {
      }) : Promise.resolve();
    },
    enumerable: false,
    configurable: true
  });
  AdaptiveByteReader2.prototype.releaseLock = function() {
    if (this.reader) {
      this.reader.releaseLock();
    }
    this.reader = this.byobReader = this.defaultReader = null;
  };
  AdaptiveByteReader2.prototype.cancel = function(reason) {
    return tslib_1$1d.__awaiter(this, void 0, void 0, function() {
      var _a, reader2, source, _b;
      return tslib_1$1d.__generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            _a = this, reader2 = _a.reader, source = _a.source;
            _b = reader2;
            if (!_b)
              return [3, 2];
            return [4, reader2["cancel"](reason).catch(function() {
            })];
          case 1:
            _b = _c.sent();
            _c.label = 2;
          case 2:
            source && (source["locked"] && this.releaseLock());
            return [2];
        }
      });
    });
  };
  AdaptiveByteReader2.prototype.read = function(size) {
    return tslib_1$1d.__awaiter(this, void 0, void 0, function() {
      var result, _a;
      return tslib_1$1d.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (size === 0) {
              return [2, { done: this.reader == null, value: new Uint8Array(0) }];
            }
            if (!(!this.supportsBYOB || typeof size !== "number"))
              return [3, 2];
            return [4, this.getDefaultReader().read()];
          case 1:
            _a = _b.sent();
            return [3, 4];
          case 2:
            return [4, this.readFromBYOBReader(size)];
          case 3:
            _a = _b.sent();
            _b.label = 4;
          case 4:
            result = _a;
            !result.done && (result.value = buffer_1$j.toUint8Array(result));
            return [2, result];
        }
      });
    });
  };
  AdaptiveByteReader2.prototype.getDefaultReader = function() {
    if (this.byobReader) {
      this.releaseLock();
    }
    if (!this.defaultReader) {
      this.defaultReader = this.source["getReader"]();
      this.defaultReader["closed"].catch(function() {
      });
    }
    return this.reader = this.defaultReader;
  };
  AdaptiveByteReader2.prototype.getBYOBReader = function() {
    if (this.defaultReader) {
      this.releaseLock();
    }
    if (!this.byobReader) {
      this.byobReader = this.source["getReader"]({ mode: "byob" });
      this.byobReader["closed"].catch(function() {
      });
    }
    return this.reader = this.byobReader;
  };
  AdaptiveByteReader2.prototype.readFromBYOBReader = function(size) {
    return tslib_1$1d.__awaiter(this, void 0, void 0, function() {
      return tslib_1$1d.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  return AdaptiveByteReader2;
}();
function readInto(reader2, buffer2, offset, size) {
  return tslib_1$1d.__awaiter(this, void 0, void 0, function() {
    var _a, done, value;
    return tslib_1$1d.__generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (offset >= size) {
            return [2, { done: false, value: new Uint8Array(buffer2, 0, size) }];
          }
          return [4, reader2.read(new Uint8Array(buffer2, offset, size - offset))];
        case 1:
          _a = _b.sent(), done = _a.done, value = _a.value;
          if (!((offset += value.byteLength) < size && !done))
            return [3, 3];
          return [4, readInto(reader2, value.buffer, offset, size)];
        case 2:
          return [2, _b.sent()];
        case 3:
          return [2, { done, value: new Uint8Array(value.buffer, 0, offset) }];
      }
    });
  });
}
var onEvent = function(stream2, event) {
  var handler = function(_) {
    return resolve([event, _]);
  };
  var resolve;
  return [event, handler, new Promise(function(r) {
    return (resolve = r) && stream2["once"](event, handler);
  })];
};
function fromNodeStream(stream2) {
  return tslib_1$1d.__asyncGenerator(this, arguments, function fromNodeStream_1() {
    function byteRange() {
      var _a2;
      if (cmd === "peek") {
        return buffer_1$j.joinUint8Arrays(buffers, size)[0];
      }
      _a2 = tslib_1$1d.__read(buffer_1$j.joinUint8Arrays(buffers, size), 3), buffer2 = _a2[0], buffers = _a2[1], bufferLength = _a2[2];
      return buffer2;
    }
    function cleanup(events2, err2) {
      buffer2 = buffers = null;
      return new Promise(function(resolve, reject) {
        var e_4, _a2;
        try {
          for (var events_1 = tslib_1$1d.__values(events2), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
            var _b2 = tslib_1$1d.__read(events_1_1.value, 2), evt = _b2[0], fn2 = _b2[1];
            stream2["off"](evt, fn2);
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (events_1_1 && !events_1_1.done && (_a2 = events_1.return))
              _a2.call(events_1);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        try {
          var destroy = stream2["destroy"];
          destroy && destroy.call(stream2, err2);
          err2 = void 0;
        } catch (e) {
          err2 = e || err2;
        } finally {
          err2 != null ? reject(err2) : resolve();
        }
      });
    }
    var events, event, done, err, cmd, size, bufferLength, buffers, buffer2;
    var _a, _b, _c;
    return tslib_1$1d.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          events = [];
          event = "error";
          done = false, err = null;
          bufferLength = 0;
          buffers = [];
          return [4, tslib_1$1d.__await(null)];
        case 1:
          return [4, _d.sent()];
        case 2:
          _a = _d.sent(), cmd = _a.cmd, size = _a.size;
          if (!stream2["isTTY"])
            return [3, 6];
          return [4, tslib_1$1d.__await(new Uint8Array(0))];
        case 3:
          return [4, _d.sent()];
        case 4:
          _d.sent();
          return [4, tslib_1$1d.__await(null)];
        case 5:
          return [2, _d.sent()];
        case 6:
          _d.trys.push([6, , 15, 17]);
          events[0] = onEvent(stream2, "end");
          events[1] = onEvent(stream2, "error");
          _d.label = 7;
        case 7:
          events[2] = onEvent(stream2, "readable");
          return [4, tslib_1$1d.__await(Promise.race(events.map(function(x) {
            return x[2];
          })))];
        case 8:
          _b = tslib_1$1d.__read.apply(void 0, [_d.sent(), 2]), event = _b[0], err = _b[1];
          if (event === "error") {
            return [3, 14];
          }
          if (!(done = event === "end")) {
            if (!isFinite(size - bufferLength)) {
              buffer2 = buffer_1$j.toUint8Array(stream2["read"](void 0));
            } else {
              buffer2 = buffer_1$j.toUint8Array(stream2["read"](size - bufferLength));
              if (buffer2.byteLength < size - bufferLength) {
                buffer2 = buffer_1$j.toUint8Array(stream2["read"](void 0));
              }
            }
            if (buffer2.byteLength > 0) {
              buffers.push(buffer2);
              bufferLength += buffer2.byteLength;
            }
          }
          if (!(done || size <= bufferLength))
            return [3, 13];
          _d.label = 9;
        case 9:
          return [4, tslib_1$1d.__await(byteRange())];
        case 10:
          return [4, _d.sent()];
        case 11:
          _c = _d.sent(), cmd = _c.cmd, size = _c.size;
          _d.label = 12;
        case 12:
          if (size < bufferLength)
            return [3, 9];
          _d.label = 13;
        case 13:
          if (!done)
            return [3, 7];
          _d.label = 14;
        case 14:
          return [3, 17];
        case 15:
          return [4, tslib_1$1d.__await(cleanup(events, event === "error" ? err : null))];
        case 16:
          _d.sent();
          return [7];
        case 17:
          return [4, tslib_1$1d.__await(null)];
        case 18:
          return [2, _d.sent()];
      }
    });
  });
}
var builder$2 = {};
var builder$1 = {};
var vector$2 = {};
Object.defineProperty(vector$2, "__esModule", { value: true });
vector$2.Vector = vector$2.AbstractVector = void 0;
var AbstractVector = function() {
  function AbstractVector2() {
  }
  return AbstractVector2;
}();
vector$2.AbstractVector = AbstractVector;
vector$2.Vector = AbstractVector;
AbstractVector.prototype.data = null;
var _enum = {};
var Schema$1 = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Schema = exports.Buffer = exports.Field = exports.DictionaryEncoding = exports.KeyValue = exports.Duration = exports.Interval = exports.Timestamp = exports.Time = exports.Date = exports.Decimal = exports.Bool = exports.FixedSizeBinary = exports.LargeBinary = exports.LargeUtf8 = exports.Binary = exports.Utf8 = exports.FloatingPoint = exports.Int = exports.Union = exports.Map = exports.FixedSizeList = exports.LargeList = exports.List = exports.Struct_ = exports.Null = exports.Endianness = exports.DictionaryKind = exports.Type = exports.IntervalUnit = exports.TimeUnit = exports.DateUnit = exports.Precision = exports.UnionMode = exports.Feature = exports.MetadataVersion = void 0;
  var flatbuffers_12 = require$$2;
  (function(MetadataVersion) {
    MetadataVersion[MetadataVersion["V1"] = 0] = "V1";
    MetadataVersion[MetadataVersion["V2"] = 1] = "V2";
    MetadataVersion[MetadataVersion["V3"] = 2] = "V3";
    MetadataVersion[MetadataVersion["V4"] = 3] = "V4";
    MetadataVersion[MetadataVersion["V5"] = 4] = "V5";
  })(exports.MetadataVersion || (exports.MetadataVersion = {}));
  (function(Feature) {
    Feature[Feature["UNUSED"] = 0] = "UNUSED";
    Feature[Feature["DICTIONARY_REPLACEMENT"] = 1] = "DICTIONARY_REPLACEMENT";
    Feature[Feature["COMPRESSED_BODY"] = 2] = "COMPRESSED_BODY";
  })(exports.Feature || (exports.Feature = {}));
  var UnionMode;
  (function(UnionMode2) {
    UnionMode2[UnionMode2["Sparse"] = 0] = "Sparse";
    UnionMode2[UnionMode2["Dense"] = 1] = "Dense";
  })(UnionMode = exports.UnionMode || (exports.UnionMode = {}));
  var Precision;
  (function(Precision2) {
    Precision2[Precision2["HALF"] = 0] = "HALF";
    Precision2[Precision2["SINGLE"] = 1] = "SINGLE";
    Precision2[Precision2["DOUBLE"] = 2] = "DOUBLE";
  })(Precision = exports.Precision || (exports.Precision = {}));
  var DateUnit;
  (function(DateUnit2) {
    DateUnit2[DateUnit2["DAY"] = 0] = "DAY";
    DateUnit2[DateUnit2["MILLISECOND"] = 1] = "MILLISECOND";
  })(DateUnit = exports.DateUnit || (exports.DateUnit = {}));
  var TimeUnit;
  (function(TimeUnit2) {
    TimeUnit2[TimeUnit2["SECOND"] = 0] = "SECOND";
    TimeUnit2[TimeUnit2["MILLISECOND"] = 1] = "MILLISECOND";
    TimeUnit2[TimeUnit2["MICROSECOND"] = 2] = "MICROSECOND";
    TimeUnit2[TimeUnit2["NANOSECOND"] = 3] = "NANOSECOND";
  })(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));
  var IntervalUnit;
  (function(IntervalUnit2) {
    IntervalUnit2[IntervalUnit2["YEAR_MONTH"] = 0] = "YEAR_MONTH";
    IntervalUnit2[IntervalUnit2["DAY_TIME"] = 1] = "DAY_TIME";
  })(IntervalUnit = exports.IntervalUnit || (exports.IntervalUnit = {}));
  var Type;
  (function(Type2) {
    Type2[Type2["NONE"] = 0] = "NONE";
    Type2[Type2["Null"] = 1] = "Null";
    Type2[Type2["Int"] = 2] = "Int";
    Type2[Type2["FloatingPoint"] = 3] = "FloatingPoint";
    Type2[Type2["Binary"] = 4] = "Binary";
    Type2[Type2["Utf8"] = 5] = "Utf8";
    Type2[Type2["Bool"] = 6] = "Bool";
    Type2[Type2["Decimal"] = 7] = "Decimal";
    Type2[Type2["Date"] = 8] = "Date";
    Type2[Type2["Time"] = 9] = "Time";
    Type2[Type2["Timestamp"] = 10] = "Timestamp";
    Type2[Type2["Interval"] = 11] = "Interval";
    Type2[Type2["List"] = 12] = "List";
    Type2[Type2["Struct_"] = 13] = "Struct_";
    Type2[Type2["Union"] = 14] = "Union";
    Type2[Type2["FixedSizeBinary"] = 15] = "FixedSizeBinary";
    Type2[Type2["FixedSizeList"] = 16] = "FixedSizeList";
    Type2[Type2["Map"] = 17] = "Map";
    Type2[Type2["Duration"] = 18] = "Duration";
    Type2[Type2["LargeBinary"] = 19] = "LargeBinary";
    Type2[Type2["LargeUtf8"] = 20] = "LargeUtf8";
    Type2[Type2["LargeList"] = 21] = "LargeList";
  })(Type = exports.Type || (exports.Type = {}));
  var DictionaryKind;
  (function(DictionaryKind2) {
    DictionaryKind2[DictionaryKind2["DenseArray"] = 0] = "DenseArray";
  })(DictionaryKind = exports.DictionaryKind || (exports.DictionaryKind = {}));
  var Endianness;
  (function(Endianness2) {
    Endianness2[Endianness2["Little"] = 0] = "Little";
    Endianness2[Endianness2["Big"] = 1] = "Big";
  })(Endianness = exports.Endianness || (exports.Endianness = {}));
  var Null2 = function() {
    function Null3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Null3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Null3.getRootAsNull = function(bb, obj) {
      return (obj || new Null3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Null3.getSizePrefixedRootAsNull = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Null3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Null3.startNull = function(builder2) {
      builder2.startObject(0);
    };
    Null3.endNull = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Null3.createNull = function(builder2) {
      Null3.startNull(builder2);
      return Null3.endNull(builder2);
    };
    return Null3;
  }();
  exports.Null = Null2;
  var Struct_ = function() {
    function Struct_2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Struct_2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Struct_2.getRootAsStruct_ = function(bb, obj) {
      return (obj || new Struct_2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Struct_2.getSizePrefixedRootAsStruct_ = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Struct_2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Struct_2.startStruct_ = function(builder2) {
      builder2.startObject(0);
    };
    Struct_2.endStruct_ = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Struct_2.createStruct_ = function(builder2) {
      Struct_2.startStruct_(builder2);
      return Struct_2.endStruct_(builder2);
    };
    return Struct_2;
  }();
  exports.Struct_ = Struct_;
  var List2 = function() {
    function List3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    List3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    List3.getRootAsList = function(bb, obj) {
      return (obj || new List3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    List3.getSizePrefixedRootAsList = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new List3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    List3.startList = function(builder2) {
      builder2.startObject(0);
    };
    List3.endList = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    List3.createList = function(builder2) {
      List3.startList(builder2);
      return List3.endList(builder2);
    };
    return List3;
  }();
  exports.List = List2;
  var LargeList = function() {
    function LargeList2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    LargeList2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    LargeList2.getRootAsLargeList = function(bb, obj) {
      return (obj || new LargeList2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeList2.getSizePrefixedRootAsLargeList = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new LargeList2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeList2.startLargeList = function(builder2) {
      builder2.startObject(0);
    };
    LargeList2.endLargeList = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    LargeList2.createLargeList = function(builder2) {
      LargeList2.startLargeList(builder2);
      return LargeList2.endLargeList(builder2);
    };
    return LargeList2;
  }();
  exports.LargeList = LargeList;
  var FixedSizeList2 = function() {
    function FixedSizeList3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    FixedSizeList3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    FixedSizeList3.getRootAsFixedSizeList = function(bb, obj) {
      return (obj || new FixedSizeList3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FixedSizeList3.getSizePrefixedRootAsFixedSizeList = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new FixedSizeList3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FixedSizeList3.prototype.listSize = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    FixedSizeList3.startFixedSizeList = function(builder2) {
      builder2.startObject(1);
    };
    FixedSizeList3.addListSize = function(builder2, listSize) {
      builder2.addFieldInt32(0, listSize, 0);
    };
    FixedSizeList3.endFixedSizeList = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    FixedSizeList3.createFixedSizeList = function(builder2, listSize) {
      FixedSizeList3.startFixedSizeList(builder2);
      FixedSizeList3.addListSize(builder2, listSize);
      return FixedSizeList3.endFixedSizeList(builder2);
    };
    return FixedSizeList3;
  }();
  exports.FixedSizeList = FixedSizeList2;
  var Map2 = function() {
    function Map3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Map3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Map3.getRootAsMap = function(bb, obj) {
      return (obj || new Map3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Map3.getSizePrefixedRootAsMap = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Map3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Map3.prototype.keysSorted = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Map3.startMap = function(builder2) {
      builder2.startObject(1);
    };
    Map3.addKeysSorted = function(builder2, keysSorted) {
      builder2.addFieldInt8(0, +keysSorted, 0);
    };
    Map3.endMap = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Map3.createMap = function(builder2, keysSorted) {
      Map3.startMap(builder2);
      Map3.addKeysSorted(builder2, keysSorted);
      return Map3.endMap(builder2);
    };
    return Map3;
  }();
  exports.Map = Map2;
  var Union = function() {
    function Union2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Union2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Union2.getRootAsUnion = function(bb, obj) {
      return (obj || new Union2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Union2.getSizePrefixedRootAsUnion = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Union2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Union2.prototype.mode = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : UnionMode.Sparse;
    };
    Union2.prototype.typeIds = function(index) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;
    };
    Union2.prototype.typeIdsLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Union2.prototype.typeIdsArray = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
    };
    Union2.startUnion = function(builder2) {
      builder2.startObject(2);
    };
    Union2.addMode = function(builder2, mode) {
      builder2.addFieldInt16(0, mode, UnionMode.Sparse);
    };
    Union2.addTypeIds = function(builder2, typeIdsOffset) {
      builder2.addFieldOffset(1, typeIdsOffset, 0);
    };
    Union2.createTypeIdsVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addInt32(data2[i]);
      }
      return builder2.endVector();
    };
    Union2.startTypeIdsVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Union2.endUnion = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Union2.createUnion = function(builder2, mode, typeIdsOffset) {
      Union2.startUnion(builder2);
      Union2.addMode(builder2, mode);
      Union2.addTypeIds(builder2, typeIdsOffset);
      return Union2.endUnion(builder2);
    };
    return Union2;
  }();
  exports.Union = Union;
  var Int = function() {
    function Int2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Int2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Int2.getRootAsInt = function(bb, obj) {
      return (obj || new Int2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int2.getSizePrefixedRootAsInt = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Int2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Int2.prototype.bitWidth = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Int2.prototype.isSigned = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Int2.startInt = function(builder2) {
      builder2.startObject(2);
    };
    Int2.addBitWidth = function(builder2, bitWidth) {
      builder2.addFieldInt32(0, bitWidth, 0);
    };
    Int2.addIsSigned = function(builder2, isSigned) {
      builder2.addFieldInt8(1, +isSigned, 0);
    };
    Int2.endInt = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Int2.createInt = function(builder2, bitWidth, isSigned) {
      Int2.startInt(builder2);
      Int2.addBitWidth(builder2, bitWidth);
      Int2.addIsSigned(builder2, isSigned);
      return Int2.endInt(builder2);
    };
    return Int2;
  }();
  exports.Int = Int;
  var FloatingPoint = function() {
    function FloatingPoint2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    FloatingPoint2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    FloatingPoint2.getRootAsFloatingPoint = function(bb, obj) {
      return (obj || new FloatingPoint2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloatingPoint2.getSizePrefixedRootAsFloatingPoint = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new FloatingPoint2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FloatingPoint2.prototype.precision = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : Precision.HALF;
    };
    FloatingPoint2.startFloatingPoint = function(builder2) {
      builder2.startObject(1);
    };
    FloatingPoint2.addPrecision = function(builder2, precision) {
      builder2.addFieldInt16(0, precision, Precision.HALF);
    };
    FloatingPoint2.endFloatingPoint = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    FloatingPoint2.createFloatingPoint = function(builder2, precision) {
      FloatingPoint2.startFloatingPoint(builder2);
      FloatingPoint2.addPrecision(builder2, precision);
      return FloatingPoint2.endFloatingPoint(builder2);
    };
    return FloatingPoint2;
  }();
  exports.FloatingPoint = FloatingPoint;
  var Utf82 = function() {
    function Utf83() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Utf83.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Utf83.getRootAsUtf8 = function(bb, obj) {
      return (obj || new Utf83()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Utf83.getSizePrefixedRootAsUtf8 = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Utf83()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Utf83.startUtf8 = function(builder2) {
      builder2.startObject(0);
    };
    Utf83.endUtf8 = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Utf83.createUtf8 = function(builder2) {
      Utf83.startUtf8(builder2);
      return Utf83.endUtf8(builder2);
    };
    return Utf83;
  }();
  exports.Utf8 = Utf82;
  var Binary2 = function() {
    function Binary3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Binary3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Binary3.getRootAsBinary = function(bb, obj) {
      return (obj || new Binary3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Binary3.getSizePrefixedRootAsBinary = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Binary3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Binary3.startBinary = function(builder2) {
      builder2.startObject(0);
    };
    Binary3.endBinary = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Binary3.createBinary = function(builder2) {
      Binary3.startBinary(builder2);
      return Binary3.endBinary(builder2);
    };
    return Binary3;
  }();
  exports.Binary = Binary2;
  var LargeUtf8 = function() {
    function LargeUtf82() {
      this.bb = null;
      this.bb_pos = 0;
    }
    LargeUtf82.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    LargeUtf82.getRootAsLargeUtf8 = function(bb, obj) {
      return (obj || new LargeUtf82()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeUtf82.getSizePrefixedRootAsLargeUtf8 = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new LargeUtf82()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeUtf82.startLargeUtf8 = function(builder2) {
      builder2.startObject(0);
    };
    LargeUtf82.endLargeUtf8 = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    LargeUtf82.createLargeUtf8 = function(builder2) {
      LargeUtf82.startLargeUtf8(builder2);
      return LargeUtf82.endLargeUtf8(builder2);
    };
    return LargeUtf82;
  }();
  exports.LargeUtf8 = LargeUtf8;
  var LargeBinary = function() {
    function LargeBinary2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    LargeBinary2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    LargeBinary2.getRootAsLargeBinary = function(bb, obj) {
      return (obj || new LargeBinary2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeBinary2.getSizePrefixedRootAsLargeBinary = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new LargeBinary2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    LargeBinary2.startLargeBinary = function(builder2) {
      builder2.startObject(0);
    };
    LargeBinary2.endLargeBinary = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    LargeBinary2.createLargeBinary = function(builder2) {
      LargeBinary2.startLargeBinary(builder2);
      return LargeBinary2.endLargeBinary(builder2);
    };
    return LargeBinary2;
  }();
  exports.LargeBinary = LargeBinary;
  var FixedSizeBinary2 = function() {
    function FixedSizeBinary3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    FixedSizeBinary3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    FixedSizeBinary3.getRootAsFixedSizeBinary = function(bb, obj) {
      return (obj || new FixedSizeBinary3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FixedSizeBinary3.getSizePrefixedRootAsFixedSizeBinary = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new FixedSizeBinary3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    FixedSizeBinary3.prototype.byteWidth = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    FixedSizeBinary3.startFixedSizeBinary = function(builder2) {
      builder2.startObject(1);
    };
    FixedSizeBinary3.addByteWidth = function(builder2, byteWidth) {
      builder2.addFieldInt32(0, byteWidth, 0);
    };
    FixedSizeBinary3.endFixedSizeBinary = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    FixedSizeBinary3.createFixedSizeBinary = function(builder2, byteWidth) {
      FixedSizeBinary3.startFixedSizeBinary(builder2);
      FixedSizeBinary3.addByteWidth(builder2, byteWidth);
      return FixedSizeBinary3.endFixedSizeBinary(builder2);
    };
    return FixedSizeBinary3;
  }();
  exports.FixedSizeBinary = FixedSizeBinary2;
  var Bool2 = function() {
    function Bool3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Bool3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Bool3.getRootAsBool = function(bb, obj) {
      return (obj || new Bool3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Bool3.getSizePrefixedRootAsBool = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Bool3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Bool3.startBool = function(builder2) {
      builder2.startObject(0);
    };
    Bool3.endBool = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Bool3.createBool = function(builder2) {
      Bool3.startBool(builder2);
      return Bool3.endBool(builder2);
    };
    return Bool3;
  }();
  exports.Bool = Bool2;
  var Decimal2 = function() {
    function Decimal3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Decimal3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Decimal3.getRootAsDecimal = function(bb, obj) {
      return (obj || new Decimal3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Decimal3.getSizePrefixedRootAsDecimal = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Decimal3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Decimal3.prototype.precision = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Decimal3.prototype.scale = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
    };
    Decimal3.prototype.bitWidth = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 128;
    };
    Decimal3.startDecimal = function(builder2) {
      builder2.startObject(3);
    };
    Decimal3.addPrecision = function(builder2, precision) {
      builder2.addFieldInt32(0, precision, 0);
    };
    Decimal3.addScale = function(builder2, scale) {
      builder2.addFieldInt32(1, scale, 0);
    };
    Decimal3.addBitWidth = function(builder2, bitWidth) {
      builder2.addFieldInt32(2, bitWidth, 128);
    };
    Decimal3.endDecimal = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Decimal3.createDecimal = function(builder2, precision, scale, bitWidth) {
      Decimal3.startDecimal(builder2);
      Decimal3.addPrecision(builder2, precision);
      Decimal3.addScale(builder2, scale);
      Decimal3.addBitWidth(builder2, bitWidth);
      return Decimal3.endDecimal(builder2);
    };
    return Decimal3;
  }();
  exports.Decimal = Decimal2;
  var Date2 = function() {
    function Date3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Date3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Date3.getRootAsDate = function(bb, obj) {
      return (obj || new Date3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Date3.getSizePrefixedRootAsDate = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Date3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Date3.prototype.unit = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : DateUnit.MILLISECOND;
    };
    Date3.startDate = function(builder2) {
      builder2.startObject(1);
    };
    Date3.addUnit = function(builder2, unit2) {
      builder2.addFieldInt16(0, unit2, DateUnit.MILLISECOND);
    };
    Date3.endDate = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Date3.createDate = function(builder2, unit2) {
      Date3.startDate(builder2);
      Date3.addUnit(builder2, unit2);
      return Date3.endDate(builder2);
    };
    return Date3;
  }();
  exports.Date = Date2;
  var Time = function() {
    function Time2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Time2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Time2.getRootAsTime = function(bb, obj) {
      return (obj || new Time2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Time2.getSizePrefixedRootAsTime = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Time2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Time2.prototype.unit = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;
    };
    Time2.prototype.bitWidth = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;
    };
    Time2.startTime = function(builder2) {
      builder2.startObject(2);
    };
    Time2.addUnit = function(builder2, unit2) {
      builder2.addFieldInt16(0, unit2, TimeUnit.MILLISECOND);
    };
    Time2.addBitWidth = function(builder2, bitWidth) {
      builder2.addFieldInt32(1, bitWidth, 32);
    };
    Time2.endTime = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Time2.createTime = function(builder2, unit2, bitWidth) {
      Time2.startTime(builder2);
      Time2.addUnit(builder2, unit2);
      Time2.addBitWidth(builder2, bitWidth);
      return Time2.endTime(builder2);
    };
    return Time2;
  }();
  exports.Time = Time;
  var Timestamp = function() {
    function Timestamp2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Timestamp2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Timestamp2.getRootAsTimestamp = function(bb, obj) {
      return (obj || new Timestamp2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Timestamp2.getSizePrefixedRootAsTimestamp = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Timestamp2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Timestamp2.prototype.unit = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.SECOND;
    };
    Timestamp2.prototype.timezone = function(optionalEncoding) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Timestamp2.startTimestamp = function(builder2) {
      builder2.startObject(2);
    };
    Timestamp2.addUnit = function(builder2, unit2) {
      builder2.addFieldInt16(0, unit2, TimeUnit.SECOND);
    };
    Timestamp2.addTimezone = function(builder2, timezoneOffset) {
      builder2.addFieldOffset(1, timezoneOffset, 0);
    };
    Timestamp2.endTimestamp = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Timestamp2.createTimestamp = function(builder2, unit2, timezoneOffset) {
      Timestamp2.startTimestamp(builder2);
      Timestamp2.addUnit(builder2, unit2);
      Timestamp2.addTimezone(builder2, timezoneOffset);
      return Timestamp2.endTimestamp(builder2);
    };
    return Timestamp2;
  }();
  exports.Timestamp = Timestamp;
  var Interval = function() {
    function Interval2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Interval2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Interval2.getRootAsInterval = function(bb, obj) {
      return (obj || new Interval2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Interval2.getSizePrefixedRootAsInterval = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Interval2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Interval2.prototype.unit = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : IntervalUnit.YEAR_MONTH;
    };
    Interval2.startInterval = function(builder2) {
      builder2.startObject(1);
    };
    Interval2.addUnit = function(builder2, unit2) {
      builder2.addFieldInt16(0, unit2, IntervalUnit.YEAR_MONTH);
    };
    Interval2.endInterval = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Interval2.createInterval = function(builder2, unit2) {
      Interval2.startInterval(builder2);
      Interval2.addUnit(builder2, unit2);
      return Interval2.endInterval(builder2);
    };
    return Interval2;
  }();
  exports.Interval = Interval;
  var Duration = function() {
    function Duration2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Duration2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Duration2.getRootAsDuration = function(bb, obj) {
      return (obj || new Duration2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Duration2.getSizePrefixedRootAsDuration = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Duration2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Duration2.prototype.unit = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : TimeUnit.MILLISECOND;
    };
    Duration2.startDuration = function(builder2) {
      builder2.startObject(1);
    };
    Duration2.addUnit = function(builder2, unit2) {
      builder2.addFieldInt16(0, unit2, TimeUnit.MILLISECOND);
    };
    Duration2.endDuration = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Duration2.createDuration = function(builder2, unit2) {
      Duration2.startDuration(builder2);
      Duration2.addUnit(builder2, unit2);
      return Duration2.endDuration(builder2);
    };
    return Duration2;
  }();
  exports.Duration = Duration;
  var KeyValue = function() {
    function KeyValue2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    KeyValue2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    KeyValue2.getRootAsKeyValue = function(bb, obj) {
      return (obj || new KeyValue2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    KeyValue2.getSizePrefixedRootAsKeyValue = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new KeyValue2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    KeyValue2.prototype.key = function(optionalEncoding) {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    KeyValue2.prototype.value = function(optionalEncoding) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    KeyValue2.startKeyValue = function(builder2) {
      builder2.startObject(2);
    };
    KeyValue2.addKey = function(builder2, keyOffset) {
      builder2.addFieldOffset(0, keyOffset, 0);
    };
    KeyValue2.addValue = function(builder2, valueOffset) {
      builder2.addFieldOffset(1, valueOffset, 0);
    };
    KeyValue2.endKeyValue = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    KeyValue2.createKeyValue = function(builder2, keyOffset, valueOffset) {
      KeyValue2.startKeyValue(builder2);
      KeyValue2.addKey(builder2, keyOffset);
      KeyValue2.addValue(builder2, valueOffset);
      return KeyValue2.endKeyValue(builder2);
    };
    return KeyValue2;
  }();
  exports.KeyValue = KeyValue;
  var DictionaryEncoding = function() {
    function DictionaryEncoding2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    DictionaryEncoding2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    DictionaryEncoding2.getRootAsDictionaryEncoding = function(bb, obj) {
      return (obj || new DictionaryEncoding2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DictionaryEncoding2.getSizePrefixedRootAsDictionaryEncoding = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new DictionaryEncoding2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DictionaryEncoding2.prototype.id = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    DictionaryEncoding2.prototype.indexType = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? (obj || new Int()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    DictionaryEncoding2.prototype.isOrdered = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    DictionaryEncoding2.prototype.dictionaryKind = function() {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : DictionaryKind.DenseArray;
    };
    DictionaryEncoding2.startDictionaryEncoding = function(builder2) {
      builder2.startObject(4);
    };
    DictionaryEncoding2.addId = function(builder2, id2) {
      builder2.addFieldInt64(0, id2, builder2.createLong(0, 0));
    };
    DictionaryEncoding2.addIndexType = function(builder2, indexTypeOffset) {
      builder2.addFieldOffset(1, indexTypeOffset, 0);
    };
    DictionaryEncoding2.addIsOrdered = function(builder2, isOrdered) {
      builder2.addFieldInt8(2, +isOrdered, 0);
    };
    DictionaryEncoding2.addDictionaryKind = function(builder2, dictionaryKind) {
      builder2.addFieldInt16(3, dictionaryKind, DictionaryKind.DenseArray);
    };
    DictionaryEncoding2.endDictionaryEncoding = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    DictionaryEncoding2.createDictionaryEncoding = function(builder2, id2, indexTypeOffset, isOrdered, dictionaryKind) {
      DictionaryEncoding2.startDictionaryEncoding(builder2);
      DictionaryEncoding2.addId(builder2, id2);
      DictionaryEncoding2.addIndexType(builder2, indexTypeOffset);
      DictionaryEncoding2.addIsOrdered(builder2, isOrdered);
      DictionaryEncoding2.addDictionaryKind(builder2, dictionaryKind);
      return DictionaryEncoding2.endDictionaryEncoding(builder2);
    };
    return DictionaryEncoding2;
  }();
  exports.DictionaryEncoding = DictionaryEncoding;
  var Field2 = function() {
    function Field3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Field3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Field3.getRootAsField = function(bb, obj) {
      return (obj || new Field3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Field3.getSizePrefixedRootAsField = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Field3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Field3.prototype.name = function(optionalEncoding) {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    };
    Field3.prototype.nullable = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    Field3.prototype.typeType = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? this.bb.readUint8(this.bb_pos + offset) : Type.NONE;
    };
    Field3.prototype.type = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    Field3.prototype.dictionary = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 12);
      return offset ? (obj || new DictionaryEncoding()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    Field3.prototype.children = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 14);
      return offset ? (obj || new Field3()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Field3.prototype.childrenLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 14);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Field3.prototype.customMetadata = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 16);
      return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Field3.prototype.customMetadataLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 16);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Field3.startField = function(builder2) {
      builder2.startObject(7);
    };
    Field3.addName = function(builder2, nameOffset) {
      builder2.addFieldOffset(0, nameOffset, 0);
    };
    Field3.addNullable = function(builder2, nullable) {
      builder2.addFieldInt8(1, +nullable, 0);
    };
    Field3.addTypeType = function(builder2, typeType) {
      builder2.addFieldInt8(2, typeType, Type.NONE);
    };
    Field3.addType = function(builder2, typeOffset) {
      builder2.addFieldOffset(3, typeOffset, 0);
    };
    Field3.addDictionary = function(builder2, dictionaryOffset) {
      builder2.addFieldOffset(4, dictionaryOffset, 0);
    };
    Field3.addChildren = function(builder2, childrenOffset) {
      builder2.addFieldOffset(5, childrenOffset, 0);
    };
    Field3.createChildrenVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addOffset(data2[i]);
      }
      return builder2.endVector();
    };
    Field3.startChildrenVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Field3.addCustomMetadata = function(builder2, customMetadataOffset) {
      builder2.addFieldOffset(6, customMetadataOffset, 0);
    };
    Field3.createCustomMetadataVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addOffset(data2[i]);
      }
      return builder2.endVector();
    };
    Field3.startCustomMetadataVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Field3.endField = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Field3.createField = function(builder2, nameOffset, nullable, typeType, typeOffset, dictionaryOffset, childrenOffset, customMetadataOffset) {
      Field3.startField(builder2);
      Field3.addName(builder2, nameOffset);
      Field3.addNullable(builder2, nullable);
      Field3.addTypeType(builder2, typeType);
      Field3.addType(builder2, typeOffset);
      Field3.addDictionary(builder2, dictionaryOffset);
      Field3.addChildren(builder2, childrenOffset);
      Field3.addCustomMetadata(builder2, customMetadataOffset);
      return Field3.endField(builder2);
    };
    return Field3;
  }();
  exports.Field = Field2;
  var Buffer = function() {
    function Buffer2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Buffer2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Buffer2.prototype.offset = function() {
      return this.bb.readInt64(this.bb_pos);
    };
    Buffer2.prototype.length = function() {
      return this.bb.readInt64(this.bb_pos + 8);
    };
    Buffer2.createBuffer = function(builder2, offset, length) {
      builder2.prep(8, 16);
      builder2.writeInt64(length);
      builder2.writeInt64(offset);
      return builder2.offset();
    };
    return Buffer2;
  }();
  exports.Buffer = Buffer;
  var Schema2 = function() {
    function Schema3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Schema3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Schema3.getRootAsSchema = function(bb, obj) {
      return (obj || new Schema3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Schema3.getSizePrefixedRootAsSchema = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Schema3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Schema3.prototype.endianness = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : Endianness.Little;
    };
    Schema3.prototype.fields = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? (obj || new Field2()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Schema3.prototype.fieldsLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Schema3.prototype.customMetadata = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? (obj || new KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Schema3.prototype.customMetadataLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Schema3.prototype.features = function(index) {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
    };
    Schema3.prototype.featuresLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Schema3.startSchema = function(builder2) {
      builder2.startObject(4);
    };
    Schema3.addEndianness = function(builder2, endianness) {
      builder2.addFieldInt16(0, endianness, Endianness.Little);
    };
    Schema3.addFields = function(builder2, fieldsOffset) {
      builder2.addFieldOffset(1, fieldsOffset, 0);
    };
    Schema3.createFieldsVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addOffset(data2[i]);
      }
      return builder2.endVector();
    };
    Schema3.startFieldsVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Schema3.addCustomMetadata = function(builder2, customMetadataOffset) {
      builder2.addFieldOffset(2, customMetadataOffset, 0);
    };
    Schema3.createCustomMetadataVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addOffset(data2[i]);
      }
      return builder2.endVector();
    };
    Schema3.startCustomMetadataVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Schema3.addFeatures = function(builder2, featuresOffset) {
      builder2.addFieldOffset(3, featuresOffset, 0);
    };
    Schema3.createFeaturesVector = function(builder2, data2) {
      builder2.startVector(8, data2.length, 8);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addInt64(data2[i]);
      }
      return builder2.endVector();
    };
    Schema3.startFeaturesVector = function(builder2, numElems) {
      builder2.startVector(8, numElems, 8);
    };
    Schema3.endSchema = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Schema3.finishSchemaBuffer = function(builder2, offset) {
      builder2.finish(offset);
    };
    Schema3.finishSizePrefixedSchemaBuffer = function(builder2, offset) {
      builder2.finish(offset, void 0, true);
    };
    Schema3.createSchema = function(builder2, endianness, fieldsOffset, customMetadataOffset, featuresOffset) {
      Schema3.startSchema(builder2);
      Schema3.addEndianness(builder2, endianness);
      Schema3.addFields(builder2, fieldsOffset);
      Schema3.addCustomMetadata(builder2, customMetadataOffset);
      Schema3.addFeatures(builder2, featuresOffset);
      return Schema3.endSchema(builder2);
    };
    return Schema3;
  }();
  exports.Schema = Schema2;
})(Schema$1);
var Message$1 = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Message = exports.DictionaryBatch = exports.RecordBatch = exports.BodyCompression = exports.FieldNode = exports.MessageHeader = exports.BodyCompressionMethod = exports.CompressionType = void 0;
  var flatbuffers_12 = require$$2;
  var NS135969233449971478942 = Schema$1;
  var CompressionType;
  (function(CompressionType2) {
    CompressionType2[CompressionType2["LZ4_FRAME"] = 0] = "LZ4_FRAME";
    CompressionType2[CompressionType2["ZSTD"] = 1] = "ZSTD";
  })(CompressionType = exports.CompressionType || (exports.CompressionType = {}));
  var BodyCompressionMethod;
  (function(BodyCompressionMethod2) {
    BodyCompressionMethod2[BodyCompressionMethod2["BUFFER"] = 0] = "BUFFER";
  })(BodyCompressionMethod = exports.BodyCompressionMethod || (exports.BodyCompressionMethod = {}));
  var MessageHeader;
  (function(MessageHeader2) {
    MessageHeader2[MessageHeader2["NONE"] = 0] = "NONE";
    MessageHeader2[MessageHeader2["Schema"] = 1] = "Schema";
    MessageHeader2[MessageHeader2["DictionaryBatch"] = 2] = "DictionaryBatch";
    MessageHeader2[MessageHeader2["RecordBatch"] = 3] = "RecordBatch";
    MessageHeader2[MessageHeader2["Tensor"] = 4] = "Tensor";
    MessageHeader2[MessageHeader2["SparseTensor"] = 5] = "SparseTensor";
  })(MessageHeader = exports.MessageHeader || (exports.MessageHeader = {}));
  var FieldNode2 = function() {
    function FieldNode3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    FieldNode3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    FieldNode3.prototype.length = function() {
      return this.bb.readInt64(this.bb_pos);
    };
    FieldNode3.prototype.nullCount = function() {
      return this.bb.readInt64(this.bb_pos + 8);
    };
    FieldNode3.createFieldNode = function(builder2, length, null_count) {
      builder2.prep(8, 16);
      builder2.writeInt64(null_count);
      builder2.writeInt64(length);
      return builder2.offset();
    };
    return FieldNode3;
  }();
  exports.FieldNode = FieldNode2;
  var BodyCompression = function() {
    function BodyCompression2() {
      this.bb = null;
      this.bb_pos = 0;
    }
    BodyCompression2.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    BodyCompression2.getRootAsBodyCompression = function(bb, obj) {
      return (obj || new BodyCompression2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BodyCompression2.getSizePrefixedRootAsBodyCompression = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new BodyCompression2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    BodyCompression2.prototype.codec = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt8(this.bb_pos + offset) : CompressionType.LZ4_FRAME;
    };
    BodyCompression2.prototype.method = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.readInt8(this.bb_pos + offset) : BodyCompressionMethod.BUFFER;
    };
    BodyCompression2.startBodyCompression = function(builder2) {
      builder2.startObject(2);
    };
    BodyCompression2.addCodec = function(builder2, codec) {
      builder2.addFieldInt8(0, codec, CompressionType.LZ4_FRAME);
    };
    BodyCompression2.addMethod = function(builder2, method) {
      builder2.addFieldInt8(1, method, BodyCompressionMethod.BUFFER);
    };
    BodyCompression2.endBodyCompression = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    BodyCompression2.createBodyCompression = function(builder2, codec, method) {
      BodyCompression2.startBodyCompression(builder2);
      BodyCompression2.addCodec(builder2, codec);
      BodyCompression2.addMethod(builder2, method);
      return BodyCompression2.endBodyCompression(builder2);
    };
    return BodyCompression2;
  }();
  exports.BodyCompression = BodyCompression;
  var RecordBatch2 = function() {
    function RecordBatch3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    RecordBatch3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    RecordBatch3.getRootAsRecordBatch = function(bb, obj) {
      return (obj || new RecordBatch3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RecordBatch3.getSizePrefixedRootAsRecordBatch = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new RecordBatch3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    RecordBatch3.prototype.length = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    RecordBatch3.prototype.nodes = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? (obj || new FieldNode2()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
    };
    RecordBatch3.prototype.nodesLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RecordBatch3.prototype.buffers = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? (obj || new NS135969233449971478942.Buffer()).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;
    };
    RecordBatch3.prototype.buffersLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    RecordBatch3.prototype.compression = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? (obj || new BodyCompression()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    RecordBatch3.startRecordBatch = function(builder2) {
      builder2.startObject(4);
    };
    RecordBatch3.addLength = function(builder2, length) {
      builder2.addFieldInt64(0, length, builder2.createLong(0, 0));
    };
    RecordBatch3.addNodes = function(builder2, nodesOffset) {
      builder2.addFieldOffset(1, nodesOffset, 0);
    };
    RecordBatch3.startNodesVector = function(builder2, numElems) {
      builder2.startVector(16, numElems, 8);
    };
    RecordBatch3.addBuffers = function(builder2, buffersOffset) {
      builder2.addFieldOffset(2, buffersOffset, 0);
    };
    RecordBatch3.startBuffersVector = function(builder2, numElems) {
      builder2.startVector(16, numElems, 8);
    };
    RecordBatch3.addCompression = function(builder2, compressionOffset) {
      builder2.addFieldOffset(3, compressionOffset, 0);
    };
    RecordBatch3.endRecordBatch = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    RecordBatch3.createRecordBatch = function(builder2, length, nodesOffset, buffersOffset, compressionOffset) {
      RecordBatch3.startRecordBatch(builder2);
      RecordBatch3.addLength(builder2, length);
      RecordBatch3.addNodes(builder2, nodesOffset);
      RecordBatch3.addBuffers(builder2, buffersOffset);
      RecordBatch3.addCompression(builder2, compressionOffset);
      return RecordBatch3.endRecordBatch(builder2);
    };
    return RecordBatch3;
  }();
  exports.RecordBatch = RecordBatch2;
  var DictionaryBatch2 = function() {
    function DictionaryBatch3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    DictionaryBatch3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    DictionaryBatch3.getRootAsDictionaryBatch = function(bb, obj) {
      return (obj || new DictionaryBatch3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DictionaryBatch3.getSizePrefixedRootAsDictionaryBatch = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new DictionaryBatch3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    DictionaryBatch3.prototype.id = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    DictionaryBatch3.prototype.data = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? (obj || new RecordBatch2()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
    };
    DictionaryBatch3.prototype.isDelta = function() {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    };
    DictionaryBatch3.startDictionaryBatch = function(builder2) {
      builder2.startObject(3);
    };
    DictionaryBatch3.addId = function(builder2, id2) {
      builder2.addFieldInt64(0, id2, builder2.createLong(0, 0));
    };
    DictionaryBatch3.addData = function(builder2, dataOffset) {
      builder2.addFieldOffset(1, dataOffset, 0);
    };
    DictionaryBatch3.addIsDelta = function(builder2, isDelta) {
      builder2.addFieldInt8(2, +isDelta, 0);
    };
    DictionaryBatch3.endDictionaryBatch = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    DictionaryBatch3.createDictionaryBatch = function(builder2, id2, dataOffset, isDelta) {
      DictionaryBatch3.startDictionaryBatch(builder2);
      DictionaryBatch3.addId(builder2, id2);
      DictionaryBatch3.addData(builder2, dataOffset);
      DictionaryBatch3.addIsDelta(builder2, isDelta);
      return DictionaryBatch3.endDictionaryBatch(builder2);
    };
    return DictionaryBatch3;
  }();
  exports.DictionaryBatch = DictionaryBatch2;
  var Message2 = function() {
    function Message3() {
      this.bb = null;
      this.bb_pos = 0;
    }
    Message3.prototype.__init = function(i, bb) {
      this.bb_pos = i;
      this.bb = bb;
      return this;
    };
    Message3.getRootAsMessage = function(bb, obj) {
      return (obj || new Message3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Message3.getSizePrefixedRootAsMessage = function(bb, obj) {
      bb.setPosition(bb.position() + flatbuffers_12.flatbuffers.SIZE_PREFIX_LENGTH);
      return (obj || new Message3()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    };
    Message3.prototype.version = function() {
      var offset = this.bb.__offset(this.bb_pos, 4);
      return offset ? this.bb.readInt16(this.bb_pos + offset) : NS135969233449971478942.MetadataVersion.V1;
    };
    Message3.prototype.headerType = function() {
      var offset = this.bb.__offset(this.bb_pos, 6);
      return offset ? this.bb.readUint8(this.bb_pos + offset) : MessageHeader.NONE;
    };
    Message3.prototype.header = function(obj) {
      var offset = this.bb.__offset(this.bb_pos, 8);
      return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
    };
    Message3.prototype.bodyLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 10);
      return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
    };
    Message3.prototype.customMetadata = function(index, obj) {
      var offset = this.bb.__offset(this.bb_pos, 12);
      return offset ? (obj || new NS135969233449971478942.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
    };
    Message3.prototype.customMetadataLength = function() {
      var offset = this.bb.__offset(this.bb_pos, 12);
      return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
    };
    Message3.startMessage = function(builder2) {
      builder2.startObject(5);
    };
    Message3.addVersion = function(builder2, version) {
      builder2.addFieldInt16(0, version, NS135969233449971478942.MetadataVersion.V1);
    };
    Message3.addHeaderType = function(builder2, headerType) {
      builder2.addFieldInt8(1, headerType, MessageHeader.NONE);
    };
    Message3.addHeader = function(builder2, headerOffset) {
      builder2.addFieldOffset(2, headerOffset, 0);
    };
    Message3.addBodyLength = function(builder2, bodyLength) {
      builder2.addFieldInt64(3, bodyLength, builder2.createLong(0, 0));
    };
    Message3.addCustomMetadata = function(builder2, customMetadataOffset) {
      builder2.addFieldOffset(4, customMetadataOffset, 0);
    };
    Message3.createCustomMetadataVector = function(builder2, data2) {
      builder2.startVector(4, data2.length, 4);
      for (var i = data2.length - 1; i >= 0; i--) {
        builder2.addOffset(data2[i]);
      }
      return builder2.endVector();
    };
    Message3.startCustomMetadataVector = function(builder2, numElems) {
      builder2.startVector(4, numElems, 4);
    };
    Message3.endMessage = function(builder2) {
      var offset = builder2.endObject();
      return offset;
    };
    Message3.finishMessageBuffer = function(builder2, offset) {
      builder2.finish(offset);
    };
    Message3.finishSizePrefixedMessageBuffer = function(builder2, offset) {
      builder2.finish(offset, void 0, true);
    };
    Message3.createMessage = function(builder2, version, headerType, headerOffset, bodyLength, customMetadataOffset) {
      Message3.startMessage(builder2);
      Message3.addVersion(builder2, version);
      Message3.addHeaderType(builder2, headerType);
      Message3.addHeader(builder2, headerOffset);
      Message3.addBodyLength(builder2, bodyLength);
      Message3.addCustomMetadata(builder2, customMetadataOffset);
      return Message3.endMessage(builder2);
    };
    return Message3;
  }();
  exports.Message = Message2;
})(Message$1);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BufferType = exports.Type = exports.MessageHeader = exports.MetadataVersion = exports.IntervalUnit = exports.UnionMode = exports.Precision = exports.TimeUnit = exports.DateUnit = void 0;
  var Schema_12 = Schema$1;
  Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function() {
    return Schema_12.DateUnit;
  } });
  Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function() {
    return Schema_12.TimeUnit;
  } });
  Object.defineProperty(exports, "Precision", { enumerable: true, get: function() {
    return Schema_12.Precision;
  } });
  Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function() {
    return Schema_12.UnionMode;
  } });
  Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function() {
    return Schema_12.IntervalUnit;
  } });
  Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function() {
    return Schema_12.MetadataVersion;
  } });
  var Message_12 = Message$1;
  Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function() {
    return Message_12.MessageHeader;
  } });
  (function(Type) {
    Type[Type["NONE"] = 0] = "NONE";
    Type[Type["Null"] = 1] = "Null";
    Type[Type["Int"] = 2] = "Int";
    Type[Type["Float"] = 3] = "Float";
    Type[Type["Binary"] = 4] = "Binary";
    Type[Type["Utf8"] = 5] = "Utf8";
    Type[Type["Bool"] = 6] = "Bool";
    Type[Type["Decimal"] = 7] = "Decimal";
    Type[Type["Date"] = 8] = "Date";
    Type[Type["Time"] = 9] = "Time";
    Type[Type["Timestamp"] = 10] = "Timestamp";
    Type[Type["Interval"] = 11] = "Interval";
    Type[Type["List"] = 12] = "List";
    Type[Type["Struct"] = 13] = "Struct";
    Type[Type["Union"] = 14] = "Union";
    Type[Type["FixedSizeBinary"] = 15] = "FixedSizeBinary";
    Type[Type["FixedSizeList"] = 16] = "FixedSizeList";
    Type[Type["Map"] = 17] = "Map";
    Type[Type["Dictionary"] = -1] = "Dictionary";
    Type[Type["Int8"] = -2] = "Int8";
    Type[Type["Int16"] = -3] = "Int16";
    Type[Type["Int32"] = -4] = "Int32";
    Type[Type["Int64"] = -5] = "Int64";
    Type[Type["Uint8"] = -6] = "Uint8";
    Type[Type["Uint16"] = -7] = "Uint16";
    Type[Type["Uint32"] = -8] = "Uint32";
    Type[Type["Uint64"] = -9] = "Uint64";
    Type[Type["Float16"] = -10] = "Float16";
    Type[Type["Float32"] = -11] = "Float32";
    Type[Type["Float64"] = -12] = "Float64";
    Type[Type["DateDay"] = -13] = "DateDay";
    Type[Type["DateMillisecond"] = -14] = "DateMillisecond";
    Type[Type["TimestampSecond"] = -15] = "TimestampSecond";
    Type[Type["TimestampMillisecond"] = -16] = "TimestampMillisecond";
    Type[Type["TimestampMicrosecond"] = -17] = "TimestampMicrosecond";
    Type[Type["TimestampNanosecond"] = -18] = "TimestampNanosecond";
    Type[Type["TimeSecond"] = -19] = "TimeSecond";
    Type[Type["TimeMillisecond"] = -20] = "TimeMillisecond";
    Type[Type["TimeMicrosecond"] = -21] = "TimeMicrosecond";
    Type[Type["TimeNanosecond"] = -22] = "TimeNanosecond";
    Type[Type["DenseUnion"] = -23] = "DenseUnion";
    Type[Type["SparseUnion"] = -24] = "SparseUnion";
    Type[Type["IntervalDayTime"] = -25] = "IntervalDayTime";
    Type[Type["IntervalYearMonth"] = -26] = "IntervalYearMonth";
  })(exports.Type || (exports.Type = {}));
  (function(BufferType) {
    BufferType[BufferType["OFFSET"] = 0] = "OFFSET";
    BufferType[BufferType["DATA"] = 1] = "DATA";
    BufferType[BufferType["VALIDITY"] = 2] = "VALIDITY";
    BufferType[BufferType["TYPE"] = 3] = "TYPE";
  })(exports.BufferType || (exports.BufferType = {}));
})(_enum);
var data = {};
var bit = {};
Object.defineProperty(bit, "__esModule", { value: true });
bit.popcnt_uint32 = bit.popcnt_array = bit.popcnt_bit_range = bit.BitIterator = bit.packBools = bit.truncateBitmap = bit.setBool = bit.getBit = bit.getBool = void 0;
var tslib_1$1c = tslib.exports;
function getBool$1(_data, _index, byte, bit2) {
  return (byte & 1 << bit2) !== 0;
}
bit.getBool = getBool$1;
function getBit(_data, _index, byte, bit2) {
  return (byte & 1 << bit2) >> bit2;
}
bit.getBit = getBit;
function setBool$1(bytes, index, value) {
  return value ? !!(bytes[index >> 3] |= 1 << index % 8) || true : !(bytes[index >> 3] &= ~(1 << index % 8)) && false;
}
bit.setBool = setBool$1;
function truncateBitmap(offset, length, bitmap) {
  var alignedSize = bitmap.byteLength + 7 & ~7;
  if (offset > 0 || bitmap.byteLength < alignedSize) {
    var bytes = new Uint8Array(alignedSize);
    bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) : packBools(new BitIterator(bitmap, offset, length, null, getBool$1)).subarray(0, alignedSize));
    return bytes;
  }
  return bitmap;
}
bit.truncateBitmap = truncateBitmap;
function packBools(values) {
  var e_1, _a;
  var xs = [];
  var i = 0, bit2 = 0, byte = 0;
  try {
    for (var values_1 = tslib_1$1c.__values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
      var value = values_1_1.value;
      value && (byte |= 1 << bit2);
      if (++bit2 === 8) {
        xs[i++] = byte;
        byte = bit2 = 0;
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (values_1_1 && !values_1_1.done && (_a = values_1.return))
        _a.call(values_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  if (i === 0 || bit2 > 0) {
    xs[i++] = byte;
  }
  var b = new Uint8Array(xs.length + 7 & ~7);
  b.set(xs);
  return b;
}
bit.packBools = packBools;
var BitIterator = function() {
  function BitIterator2(bytes, begin, length, context, get2) {
    this.bytes = bytes;
    this.length = length;
    this.context = context;
    this.get = get2;
    this.bit = begin % 8;
    this.byteIndex = begin >> 3;
    this.byte = bytes[this.byteIndex++];
    this.index = 0;
  }
  BitIterator2.prototype.next = function() {
    if (this.index < this.length) {
      if (this.bit === 8) {
        this.bit = 0;
        this.byte = this.bytes[this.byteIndex++];
      }
      return {
        value: this.get(this.context, this.index++, this.byte, this.bit++)
      };
    }
    return { done: true, value: null };
  };
  BitIterator2.prototype[Symbol.iterator] = function() {
    return this;
  };
  return BitIterator2;
}();
bit.BitIterator = BitIterator;
function popcnt_bit_range(data2, lhs, rhs) {
  var e_2, _a;
  if (rhs - lhs <= 0) {
    return 0;
  }
  if (rhs - lhs < 8) {
    var sum2 = 0;
    try {
      for (var _b = tslib_1$1c.__values(new BitIterator(data2, lhs, rhs - lhs, data2, getBit)), _c = _b.next(); !_c.done; _c = _b.next()) {
        var bit2 = _c.value;
        sum2 += bit2;
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return sum2;
  }
  var rhsInside = rhs >> 3 << 3;
  var lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);
  return popcnt_bit_range(data2, lhs, lhsInside) + popcnt_bit_range(data2, rhsInside, rhs) + popcnt_array(data2, lhsInside >> 3, rhsInside - lhsInside >> 3);
}
bit.popcnt_bit_range = popcnt_bit_range;
function popcnt_array(arr, byteOffset, byteLength) {
  var cnt = 0, pos = byteOffset | 0;
  var view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
  var len = byteLength === void 0 ? arr.byteLength : pos + byteLength;
  while (len - pos >= 4) {
    cnt += popcnt_uint32(view.getUint32(pos));
    pos += 4;
  }
  while (len - pos >= 2) {
    cnt += popcnt_uint32(view.getUint16(pos));
    pos += 2;
  }
  while (len - pos >= 1) {
    cnt += popcnt_uint32(view.getUint8(pos));
    pos += 1;
  }
  return cnt;
}
bit.popcnt_array = popcnt_array;
function popcnt_uint32(uint32) {
  var i = uint32 | 0;
  i = i - (i >>> 1 & 1431655765);
  i = (i & 858993459) + (i >>> 2 & 858993459);
  return (i + (i >>> 4) & 252645135) * 16843009 >>> 24;
}
bit.popcnt_uint32 = popcnt_uint32;
var type = {};
Object.defineProperty(type, "__esModule", { value: true });
type.strideForType = type.Dictionary = type.Map_ = type.FixedSizeList = type.FixedSizeBinary = type.SparseUnion = type.DenseUnion = type.Union = type.Struct = type.List = type.IntervalYearMonth = type.IntervalDayTime = type.Interval = type.TimestampNanosecond = type.TimestampMicrosecond = type.TimestampMillisecond = type.TimestampSecond = type.Timestamp = type.TimeNanosecond = type.TimeMicrosecond = type.TimeMillisecond = type.TimeSecond = type.Time = type.DateMillisecond = type.DateDay = type.Date_ = type.Decimal = type.Bool = type.Utf8 = type.Binary = type.Float64 = type.Float32 = type.Float16 = type.Float = type.Uint64 = type.Uint32 = type.Uint16 = type.Uint8 = type.Int64 = type.Int32 = type.Int16 = type.Int8 = type.Int = type.Null = type.DataType = void 0;
var tslib_1$1b = tslib.exports;
var enum_1$i = _enum;
var DataType = function() {
  function DataType2() {
  }
  DataType2.isNull = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Null;
  };
  DataType2.isInt = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Int;
  };
  DataType2.isFloat = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Float;
  };
  DataType2.isBinary = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Binary;
  };
  DataType2.isUtf8 = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Utf8;
  };
  DataType2.isBool = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Bool;
  };
  DataType2.isDecimal = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Decimal;
  };
  DataType2.isDate = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Date;
  };
  DataType2.isTime = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Time;
  };
  DataType2.isTimestamp = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Timestamp;
  };
  DataType2.isInterval = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Interval;
  };
  DataType2.isList = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.List;
  };
  DataType2.isStruct = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Struct;
  };
  DataType2.isUnion = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Union;
  };
  DataType2.isFixedSizeBinary = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.FixedSizeBinary;
  };
  DataType2.isFixedSizeList = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.FixedSizeList;
  };
  DataType2.isMap = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Map;
  };
  DataType2.isDictionary = function(x) {
    return (x === null || x === void 0 ? void 0 : x.typeId) === enum_1$i.Type.Dictionary;
  };
  Object.defineProperty(DataType2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.NONE;
    },
    enumerable: false,
    configurable: true
  });
  DataType2[Symbol.toStringTag] = function(proto) {
    proto.children = null;
    proto.ArrayType = Array;
    return proto[Symbol.toStringTag] = "DataType";
  }(DataType2.prototype);
  return DataType2;
}();
type.DataType = DataType;
var Null = function(_super) {
  tslib_1$1b.__extends(Null2, _super);
  function Null2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Null2.prototype.toString = function() {
    return "Null";
  };
  Object.defineProperty(Null2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Null;
    },
    enumerable: false,
    configurable: true
  });
  Null2[Symbol.toStringTag] = function(proto) {
    return proto[Symbol.toStringTag] = "Null";
  }(Null2.prototype);
  return Null2;
}(DataType);
type.Null = Null;
var Int_ = function(_super) {
  tslib_1$1b.__extends(Int_2, _super);
  function Int_2(isSigned, bitWidth) {
    var _this = _super.call(this) || this;
    _this.isSigned = isSigned;
    _this.bitWidth = bitWidth;
    return _this;
  }
  Object.defineProperty(Int_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Int;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Int_2.prototype, "ArrayType", {
    get: function() {
      switch (this.bitWidth) {
        case 8:
          return this.isSigned ? Int8Array : Uint8Array;
        case 16:
          return this.isSigned ? Int16Array : Uint16Array;
        case 32:
          return this.isSigned ? Int32Array : Uint32Array;
        case 64:
          return this.isSigned ? Int32Array : Uint32Array;
      }
      throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
    },
    enumerable: false,
    configurable: true
  });
  Int_2.prototype.toString = function() {
    return (this.isSigned ? "I" : "Ui") + "nt" + this.bitWidth;
  };
  Int_2[Symbol.toStringTag] = function(proto) {
    proto.isSigned = null;
    proto.bitWidth = null;
    return proto[Symbol.toStringTag] = "Int";
  }(Int_2.prototype);
  return Int_2;
}(DataType);
type.Int = Int_;
var Int8 = function(_super) {
  tslib_1$1b.__extends(Int82, _super);
  function Int82() {
    return _super.call(this, true, 8) || this;
  }
  return Int82;
}(Int_);
type.Int8 = Int8;
var Int16 = function(_super) {
  tslib_1$1b.__extends(Int162, _super);
  function Int162() {
    return _super.call(this, true, 16) || this;
  }
  return Int162;
}(Int_);
type.Int16 = Int16;
var Int32 = function(_super) {
  tslib_1$1b.__extends(Int322, _super);
  function Int322() {
    return _super.call(this, true, 32) || this;
  }
  return Int322;
}(Int_);
type.Int32 = Int32;
var Int64$1 = function(_super) {
  tslib_1$1b.__extends(Int642, _super);
  function Int642() {
    return _super.call(this, true, 64) || this;
  }
  return Int642;
}(Int_);
type.Int64 = Int64$1;
var Uint8 = function(_super) {
  tslib_1$1b.__extends(Uint82, _super);
  function Uint82() {
    return _super.call(this, false, 8) || this;
  }
  return Uint82;
}(Int_);
type.Uint8 = Uint8;
var Uint16 = function(_super) {
  tslib_1$1b.__extends(Uint162, _super);
  function Uint162() {
    return _super.call(this, false, 16) || this;
  }
  return Uint162;
}(Int_);
type.Uint16 = Uint16;
var Uint32 = function(_super) {
  tslib_1$1b.__extends(Uint322, _super);
  function Uint322() {
    return _super.call(this, false, 32) || this;
  }
  return Uint322;
}(Int_);
type.Uint32 = Uint32;
var Uint64$1 = function(_super) {
  tslib_1$1b.__extends(Uint642, _super);
  function Uint642() {
    return _super.call(this, false, 64) || this;
  }
  return Uint642;
}(Int_);
type.Uint64 = Uint64$1;
Object.defineProperty(Int8.prototype, "ArrayType", { value: Int8Array });
Object.defineProperty(Int16.prototype, "ArrayType", { value: Int16Array });
Object.defineProperty(Int32.prototype, "ArrayType", { value: Int32Array });
Object.defineProperty(Int64$1.prototype, "ArrayType", { value: Int32Array });
Object.defineProperty(Uint8.prototype, "ArrayType", { value: Uint8Array });
Object.defineProperty(Uint16.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Uint32.prototype, "ArrayType", { value: Uint32Array });
Object.defineProperty(Uint64$1.prototype, "ArrayType", { value: Uint32Array });
var Float = function(_super) {
  tslib_1$1b.__extends(Float2, _super);
  function Float2(precision) {
    var _this = _super.call(this) || this;
    _this.precision = precision;
    return _this;
  }
  Object.defineProperty(Float2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Float;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Float2.prototype, "ArrayType", {
    get: function() {
      switch (this.precision) {
        case enum_1$i.Precision.HALF:
          return Uint16Array;
        case enum_1$i.Precision.SINGLE:
          return Float32Array;
        case enum_1$i.Precision.DOUBLE:
          return Float64Array;
      }
      throw new Error("Unrecognized " + this[Symbol.toStringTag] + " type");
    },
    enumerable: false,
    configurable: true
  });
  Float2.prototype.toString = function() {
    return "Float" + (this.precision << 5 || 16);
  };
  Float2[Symbol.toStringTag] = function(proto) {
    proto.precision = null;
    return proto[Symbol.toStringTag] = "Float";
  }(Float2.prototype);
  return Float2;
}(DataType);
type.Float = Float;
var Float16 = function(_super) {
  tslib_1$1b.__extends(Float162, _super);
  function Float162() {
    return _super.call(this, enum_1$i.Precision.HALF) || this;
  }
  return Float162;
}(Float);
type.Float16 = Float16;
var Float32 = function(_super) {
  tslib_1$1b.__extends(Float322, _super);
  function Float322() {
    return _super.call(this, enum_1$i.Precision.SINGLE) || this;
  }
  return Float322;
}(Float);
type.Float32 = Float32;
var Float64 = function(_super) {
  tslib_1$1b.__extends(Float642, _super);
  function Float642() {
    return _super.call(this, enum_1$i.Precision.DOUBLE) || this;
  }
  return Float642;
}(Float);
type.Float64 = Float64;
Object.defineProperty(Float16.prototype, "ArrayType", { value: Uint16Array });
Object.defineProperty(Float32.prototype, "ArrayType", { value: Float32Array });
Object.defineProperty(Float64.prototype, "ArrayType", { value: Float64Array });
var Binary = function(_super) {
  tslib_1$1b.__extends(Binary2, _super);
  function Binary2() {
    return _super.call(this) || this;
  }
  Object.defineProperty(Binary2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Binary;
    },
    enumerable: false,
    configurable: true
  });
  Binary2.prototype.toString = function() {
    return "Binary";
  };
  Binary2[Symbol.toStringTag] = function(proto) {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = "Binary";
  }(Binary2.prototype);
  return Binary2;
}(DataType);
type.Binary = Binary;
var Utf8 = function(_super) {
  tslib_1$1b.__extends(Utf82, _super);
  function Utf82() {
    return _super.call(this) || this;
  }
  Object.defineProperty(Utf82.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Utf8;
    },
    enumerable: false,
    configurable: true
  });
  Utf82.prototype.toString = function() {
    return "Utf8";
  };
  Utf82[Symbol.toStringTag] = function(proto) {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = "Utf8";
  }(Utf82.prototype);
  return Utf82;
}(DataType);
type.Utf8 = Utf8;
var Bool = function(_super) {
  tslib_1$1b.__extends(Bool2, _super);
  function Bool2() {
    return _super.call(this) || this;
  }
  Object.defineProperty(Bool2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Bool;
    },
    enumerable: false,
    configurable: true
  });
  Bool2.prototype.toString = function() {
    return "Bool";
  };
  Bool2[Symbol.toStringTag] = function(proto) {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = "Bool";
  }(Bool2.prototype);
  return Bool2;
}(DataType);
type.Bool = Bool;
var Decimal = function(_super) {
  tslib_1$1b.__extends(Decimal2, _super);
  function Decimal2(scale, precision) {
    var _this = _super.call(this) || this;
    _this.scale = scale;
    _this.precision = precision;
    return _this;
  }
  Object.defineProperty(Decimal2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Decimal;
    },
    enumerable: false,
    configurable: true
  });
  Decimal2.prototype.toString = function() {
    return "Decimal[" + this.precision + "e" + (this.scale > 0 ? "+" : "") + this.scale + "]";
  };
  Decimal2[Symbol.toStringTag] = function(proto) {
    proto.scale = null;
    proto.precision = null;
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = "Decimal";
  }(Decimal2.prototype);
  return Decimal2;
}(DataType);
type.Decimal = Decimal;
var Date_ = function(_super) {
  tslib_1$1b.__extends(Date_2, _super);
  function Date_2(unit2) {
    var _this = _super.call(this) || this;
    _this.unit = unit2;
    return _this;
  }
  Object.defineProperty(Date_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Date;
    },
    enumerable: false,
    configurable: true
  });
  Date_2.prototype.toString = function() {
    return "Date" + (this.unit + 1) * 32 + "<" + enum_1$i.DateUnit[this.unit] + ">";
  };
  Date_2[Symbol.toStringTag] = function(proto) {
    proto.unit = null;
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = "Date";
  }(Date_2.prototype);
  return Date_2;
}(DataType);
type.Date_ = Date_;
var DateDay = function(_super) {
  tslib_1$1b.__extends(DateDay2, _super);
  function DateDay2() {
    return _super.call(this, enum_1$i.DateUnit.DAY) || this;
  }
  return DateDay2;
}(Date_);
type.DateDay = DateDay;
var DateMillisecond = function(_super) {
  tslib_1$1b.__extends(DateMillisecond2, _super);
  function DateMillisecond2() {
    return _super.call(this, enum_1$i.DateUnit.MILLISECOND) || this;
  }
  return DateMillisecond2;
}(Date_);
type.DateMillisecond = DateMillisecond;
var Time_ = function(_super) {
  tslib_1$1b.__extends(Time_2, _super);
  function Time_2(unit2, bitWidth) {
    var _this = _super.call(this) || this;
    _this.unit = unit2;
    _this.bitWidth = bitWidth;
    return _this;
  }
  Object.defineProperty(Time_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Time;
    },
    enumerable: false,
    configurable: true
  });
  Time_2.prototype.toString = function() {
    return "Time" + this.bitWidth + "<" + enum_1$i.TimeUnit[this.unit] + ">";
  };
  Time_2[Symbol.toStringTag] = function(proto) {
    proto.unit = null;
    proto.bitWidth = null;
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = "Time";
  }(Time_2.prototype);
  return Time_2;
}(DataType);
type.Time = Time_;
var TimeSecond = function(_super) {
  tslib_1$1b.__extends(TimeSecond2, _super);
  function TimeSecond2() {
    return _super.call(this, enum_1$i.TimeUnit.SECOND, 32) || this;
  }
  return TimeSecond2;
}(Time_);
type.TimeSecond = TimeSecond;
var TimeMillisecond = function(_super) {
  tslib_1$1b.__extends(TimeMillisecond2, _super);
  function TimeMillisecond2() {
    return _super.call(this, enum_1$i.TimeUnit.MILLISECOND, 32) || this;
  }
  return TimeMillisecond2;
}(Time_);
type.TimeMillisecond = TimeMillisecond;
var TimeMicrosecond = function(_super) {
  tslib_1$1b.__extends(TimeMicrosecond2, _super);
  function TimeMicrosecond2() {
    return _super.call(this, enum_1$i.TimeUnit.MICROSECOND, 64) || this;
  }
  return TimeMicrosecond2;
}(Time_);
type.TimeMicrosecond = TimeMicrosecond;
var TimeNanosecond = function(_super) {
  tslib_1$1b.__extends(TimeNanosecond2, _super);
  function TimeNanosecond2() {
    return _super.call(this, enum_1$i.TimeUnit.NANOSECOND, 64) || this;
  }
  return TimeNanosecond2;
}(Time_);
type.TimeNanosecond = TimeNanosecond;
var Timestamp_ = function(_super) {
  tslib_1$1b.__extends(Timestamp_2, _super);
  function Timestamp_2(unit2, timezone) {
    var _this = _super.call(this) || this;
    _this.unit = unit2;
    _this.timezone = timezone;
    return _this;
  }
  Object.defineProperty(Timestamp_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Timestamp;
    },
    enumerable: false,
    configurable: true
  });
  Timestamp_2.prototype.toString = function() {
    return "Timestamp<" + enum_1$i.TimeUnit[this.unit] + (this.timezone ? ", " + this.timezone : "") + ">";
  };
  Timestamp_2[Symbol.toStringTag] = function(proto) {
    proto.unit = null;
    proto.timezone = null;
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = "Timestamp";
  }(Timestamp_2.prototype);
  return Timestamp_2;
}(DataType);
type.Timestamp = Timestamp_;
var TimestampSecond = function(_super) {
  tslib_1$1b.__extends(TimestampSecond2, _super);
  function TimestampSecond2(timezone) {
    return _super.call(this, enum_1$i.TimeUnit.SECOND, timezone) || this;
  }
  return TimestampSecond2;
}(Timestamp_);
type.TimestampSecond = TimestampSecond;
var TimestampMillisecond = function(_super) {
  tslib_1$1b.__extends(TimestampMillisecond2, _super);
  function TimestampMillisecond2(timezone) {
    return _super.call(this, enum_1$i.TimeUnit.MILLISECOND, timezone) || this;
  }
  return TimestampMillisecond2;
}(Timestamp_);
type.TimestampMillisecond = TimestampMillisecond;
var TimestampMicrosecond = function(_super) {
  tslib_1$1b.__extends(TimestampMicrosecond2, _super);
  function TimestampMicrosecond2(timezone) {
    return _super.call(this, enum_1$i.TimeUnit.MICROSECOND, timezone) || this;
  }
  return TimestampMicrosecond2;
}(Timestamp_);
type.TimestampMicrosecond = TimestampMicrosecond;
var TimestampNanosecond = function(_super) {
  tslib_1$1b.__extends(TimestampNanosecond2, _super);
  function TimestampNanosecond2(timezone) {
    return _super.call(this, enum_1$i.TimeUnit.NANOSECOND, timezone) || this;
  }
  return TimestampNanosecond2;
}(Timestamp_);
type.TimestampNanosecond = TimestampNanosecond;
var Interval_ = function(_super) {
  tslib_1$1b.__extends(Interval_2, _super);
  function Interval_2(unit2) {
    var _this = _super.call(this) || this;
    _this.unit = unit2;
    return _this;
  }
  Object.defineProperty(Interval_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Interval;
    },
    enumerable: false,
    configurable: true
  });
  Interval_2.prototype.toString = function() {
    return "Interval<" + enum_1$i.IntervalUnit[this.unit] + ">";
  };
  Interval_2[Symbol.toStringTag] = function(proto) {
    proto.unit = null;
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = "Interval";
  }(Interval_2.prototype);
  return Interval_2;
}(DataType);
type.Interval = Interval_;
var IntervalDayTime = function(_super) {
  tslib_1$1b.__extends(IntervalDayTime2, _super);
  function IntervalDayTime2() {
    return _super.call(this, enum_1$i.IntervalUnit.DAY_TIME) || this;
  }
  return IntervalDayTime2;
}(Interval_);
type.IntervalDayTime = IntervalDayTime;
var IntervalYearMonth = function(_super) {
  tslib_1$1b.__extends(IntervalYearMonth2, _super);
  function IntervalYearMonth2() {
    return _super.call(this, enum_1$i.IntervalUnit.YEAR_MONTH) || this;
  }
  return IntervalYearMonth2;
}(Interval_);
type.IntervalYearMonth = IntervalYearMonth;
var List = function(_super) {
  tslib_1$1b.__extends(List2, _super);
  function List2(child) {
    var _this = _super.call(this) || this;
    _this.children = [child];
    return _this;
  }
  Object.defineProperty(List2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.List;
    },
    enumerable: false,
    configurable: true
  });
  List2.prototype.toString = function() {
    return "List<" + this.valueType + ">";
  };
  Object.defineProperty(List2.prototype, "valueType", {
    get: function() {
      return this.children[0].type;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "valueField", {
    get: function() {
      return this.children[0];
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(List2.prototype, "ArrayType", {
    get: function() {
      return this.valueType.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  List2[Symbol.toStringTag] = function(proto) {
    proto.children = null;
    return proto[Symbol.toStringTag] = "List";
  }(List2.prototype);
  return List2;
}(DataType);
type.List = List;
var Struct = function(_super) {
  tslib_1$1b.__extends(Struct2, _super);
  function Struct2(children2) {
    var _this = _super.call(this) || this;
    _this.children = children2;
    return _this;
  }
  Object.defineProperty(Struct2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Struct;
    },
    enumerable: false,
    configurable: true
  });
  Struct2.prototype.toString = function() {
    return "Struct<{" + this.children.map(function(f) {
      return f.name + ":" + f.type;
    }).join(", ") + "}>";
  };
  Struct2[Symbol.toStringTag] = function(proto) {
    proto.children = null;
    return proto[Symbol.toStringTag] = "Struct";
  }(Struct2.prototype);
  return Struct2;
}(DataType);
type.Struct = Struct;
var Union_ = function(_super) {
  tslib_1$1b.__extends(Union_2, _super);
  function Union_2(mode, typeIds, children2) {
    var _this = _super.call(this) || this;
    _this.mode = mode;
    _this.children = children2;
    _this.typeIds = typeIds = Int32Array.from(typeIds);
    _this.typeIdToChildIndex = typeIds.reduce(function(typeIdToChildIndex, typeId, idx) {
      return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
    }, Object.create(null));
    return _this;
  }
  Object.defineProperty(Union_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Union;
    },
    enumerable: false,
    configurable: true
  });
  Union_2.prototype.toString = function() {
    return this[Symbol.toStringTag] + "<" + this.children.map(function(x) {
      return "" + x.type;
    }).join(" | ") + ">";
  };
  Union_2[Symbol.toStringTag] = function(proto) {
    proto.mode = null;
    proto.typeIds = null;
    proto.children = null;
    proto.typeIdToChildIndex = null;
    proto.ArrayType = Int8Array;
    return proto[Symbol.toStringTag] = "Union";
  }(Union_2.prototype);
  return Union_2;
}(DataType);
type.Union = Union_;
var DenseUnion = function(_super) {
  tslib_1$1b.__extends(DenseUnion2, _super);
  function DenseUnion2(typeIds, children2) {
    return _super.call(this, enum_1$i.UnionMode.Dense, typeIds, children2) || this;
  }
  return DenseUnion2;
}(Union_);
type.DenseUnion = DenseUnion;
var SparseUnion = function(_super) {
  tslib_1$1b.__extends(SparseUnion2, _super);
  function SparseUnion2(typeIds, children2) {
    return _super.call(this, enum_1$i.UnionMode.Sparse, typeIds, children2) || this;
  }
  return SparseUnion2;
}(Union_);
type.SparseUnion = SparseUnion;
var FixedSizeBinary = function(_super) {
  tslib_1$1b.__extends(FixedSizeBinary2, _super);
  function FixedSizeBinary2(byteWidth) {
    var _this = _super.call(this) || this;
    _this.byteWidth = byteWidth;
    return _this;
  }
  Object.defineProperty(FixedSizeBinary2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.FixedSizeBinary;
    },
    enumerable: false,
    configurable: true
  });
  FixedSizeBinary2.prototype.toString = function() {
    return "FixedSizeBinary[" + this.byteWidth + "]";
  };
  FixedSizeBinary2[Symbol.toStringTag] = function(proto) {
    proto.byteWidth = null;
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = "FixedSizeBinary";
  }(FixedSizeBinary2.prototype);
  return FixedSizeBinary2;
}(DataType);
type.FixedSizeBinary = FixedSizeBinary;
var FixedSizeList = function(_super) {
  tslib_1$1b.__extends(FixedSizeList2, _super);
  function FixedSizeList2(listSize, child) {
    var _this = _super.call(this) || this;
    _this.listSize = listSize;
    _this.children = [child];
    return _this;
  }
  Object.defineProperty(FixedSizeList2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.FixedSizeList;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FixedSizeList2.prototype, "valueType", {
    get: function() {
      return this.children[0].type;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FixedSizeList2.prototype, "valueField", {
    get: function() {
      return this.children[0];
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FixedSizeList2.prototype, "ArrayType", {
    get: function() {
      return this.valueType.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  FixedSizeList2.prototype.toString = function() {
    return "FixedSizeList[" + this.listSize + "]<" + this.valueType + ">";
  };
  FixedSizeList2[Symbol.toStringTag] = function(proto) {
    proto.children = null;
    proto.listSize = null;
    return proto[Symbol.toStringTag] = "FixedSizeList";
  }(FixedSizeList2.prototype);
  return FixedSizeList2;
}(DataType);
type.FixedSizeList = FixedSizeList;
var Map_ = function(_super) {
  tslib_1$1b.__extends(Map_2, _super);
  function Map_2(child, keysSorted) {
    if (keysSorted === void 0) {
      keysSorted = false;
    }
    var _this = _super.call(this) || this;
    _this.children = [child];
    _this.keysSorted = keysSorted;
    return _this;
  }
  Object.defineProperty(Map_2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Map;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Map_2.prototype, "keyType", {
    get: function() {
      return this.children[0].type.children[0].type;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Map_2.prototype, "valueType", {
    get: function() {
      return this.children[0].type.children[1].type;
    },
    enumerable: false,
    configurable: true
  });
  Map_2.prototype.toString = function() {
    return "Map<{" + this.children[0].type.children.map(function(f) {
      return f.name + ":" + f.type;
    }).join(", ") + "}>";
  };
  Map_2[Symbol.toStringTag] = function(proto) {
    proto.children = null;
    proto.keysSorted = null;
    return proto[Symbol.toStringTag] = "Map_";
  }(Map_2.prototype);
  return Map_2;
}(DataType);
type.Map_ = Map_;
var getId = function(atomicDictionaryId) {
  return function() {
    return ++atomicDictionaryId;
  };
}(-1);
var Dictionary = function(_super) {
  tslib_1$1b.__extends(Dictionary2, _super);
  function Dictionary2(dictionary2, indices, id2, isOrdered) {
    var _this = _super.call(this) || this;
    _this.indices = indices;
    _this.dictionary = dictionary2;
    _this.isOrdered = isOrdered || false;
    _this.id = id2 == null ? getId() : typeof id2 === "number" ? id2 : id2.low;
    return _this;
  }
  Object.defineProperty(Dictionary2.prototype, "typeId", {
    get: function() {
      return enum_1$i.Type.Dictionary;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Dictionary2.prototype, "children", {
    get: function() {
      return this.dictionary.children;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Dictionary2.prototype, "valueType", {
    get: function() {
      return this.dictionary;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Dictionary2.prototype, "ArrayType", {
    get: function() {
      return this.dictionary.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  Dictionary2.prototype.toString = function() {
    return "Dictionary<" + this.indices + ", " + this.dictionary + ">";
  };
  Dictionary2[Symbol.toStringTag] = function(proto) {
    proto.id = null;
    proto.indices = null;
    proto.isOrdered = null;
    proto.dictionary = null;
    return proto[Symbol.toStringTag] = "Dictionary";
  }(Dictionary2.prototype);
  return Dictionary2;
}(DataType);
type.Dictionary = Dictionary;
function strideForType(type2) {
  var t = type2;
  switch (type2.typeId) {
    case enum_1$i.Type.Decimal:
      return 4;
    case enum_1$i.Type.Timestamp:
      return 2;
    case enum_1$i.Type.Date:
      return 1 + t.unit;
    case enum_1$i.Type.Interval:
      return 1 + t.unit;
    case enum_1$i.Type.Int:
      return 1 + +(t.bitWidth > 32);
    case enum_1$i.Type.Time:
      return 1 + +(t.bitWidth > 32);
    case enum_1$i.Type.FixedSizeList:
      return t.listSize;
    case enum_1$i.Type.FixedSizeBinary:
      return t.byteWidth;
    default:
      return 1;
  }
}
type.strideForType = strideForType;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Data = exports.kUnknownNullCount = void 0;
  var bit_12 = bit;
  var bit_2 = bit;
  var enum_12 = _enum;
  var type_12 = type;
  var buffer_12 = buffer$1;
  exports.kUnknownNullCount = -1;
  var Data = function() {
    function Data2(type2, offset, length, nullCount, buffers, childData, dictionary2) {
      this.type = type2;
      this.dictionary = dictionary2;
      this.offset = Math.floor(Math.max(offset || 0, 0));
      this.length = Math.floor(Math.max(length || 0, 0));
      this._nullCount = Math.floor(Math.max(nullCount || 0, -1));
      this.childData = (childData || []).map(function(x) {
        return x instanceof Data2 ? x : x.data;
      });
      var buffer2;
      if (buffers instanceof Data2) {
        this.stride = buffers.stride;
        this.values = buffers.values;
        this.typeIds = buffers.typeIds;
        this.nullBitmap = buffers.nullBitmap;
        this.valueOffsets = buffers.valueOffsets;
      } else {
        this.stride = type_12.strideForType(type2);
        if (buffers) {
          (buffer2 = buffers[0]) && (this.valueOffsets = buffer2);
          (buffer2 = buffers[1]) && (this.values = buffer2);
          (buffer2 = buffers[2]) && (this.nullBitmap = buffer2);
          (buffer2 = buffers[3]) && (this.typeIds = buffer2);
        }
      }
    }
    Object.defineProperty(Data2.prototype, "typeId", {
      get: function() {
        return this.type.typeId;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Data2.prototype, "ArrayType", {
      get: function() {
        return this.type.ArrayType;
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Data2.prototype, "buffers", {
      get: function() {
        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds];
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Data2.prototype, "byteLength", {
      get: function() {
        var byteLength = 0;
        var _a = this, valueOffsets = _a.valueOffsets, values = _a.values, nullBitmap = _a.nullBitmap, typeIds = _a.typeIds;
        valueOffsets && (byteLength += valueOffsets.byteLength);
        values && (byteLength += values.byteLength);
        nullBitmap && (byteLength += nullBitmap.byteLength);
        typeIds && (byteLength += typeIds.byteLength);
        return this.childData.reduce(function(byteLength2, child) {
          return byteLength2 + child.byteLength;
        }, byteLength);
      },
      enumerable: false,
      configurable: true
    });
    Object.defineProperty(Data2.prototype, "nullCount", {
      get: function() {
        var nullCount = this._nullCount;
        var nullBitmap;
        if (nullCount <= exports.kUnknownNullCount && (nullBitmap = this.nullBitmap)) {
          this._nullCount = nullCount = this.length - bit_2.popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);
        }
        return nullCount;
      },
      enumerable: false,
      configurable: true
    });
    Data2.prototype.clone = function(type2, offset, length, nullCount, buffers, childData) {
      if (offset === void 0) {
        offset = this.offset;
      }
      if (length === void 0) {
        length = this.length;
      }
      if (nullCount === void 0) {
        nullCount = this._nullCount;
      }
      if (buffers === void 0) {
        buffers = this;
      }
      if (childData === void 0) {
        childData = this.childData;
      }
      return new Data2(type2, offset, length, nullCount, buffers, childData, this.dictionary);
    };
    Data2.prototype.slice = function(offset, length) {
      var _a = this, stride = _a.stride, typeId = _a.typeId, childData = _a.childData;
      var nullCount = +(this._nullCount === 0) - 1;
      var childStride = typeId === 16 ? stride : 1;
      var buffers = this._sliceBuffers(offset, length, stride, typeId);
      return this.clone(this.type, this.offset + offset, length, nullCount, buffers, !childData.length || this.valueOffsets ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));
    };
    Data2.prototype._changeLengthAndBackfillNullBitmap = function(newLength) {
      if (this.typeId === enum_12.Type.Null) {
        return this.clone(this.type, 0, newLength, 0);
      }
      var _a = this, length = _a.length, nullCount = _a.nullCount;
      var bitmap = new Uint8Array((newLength + 63 & ~63) >> 3).fill(255, 0, length >> 3);
      bitmap[length >> 3] = (1 << length - (length & ~7)) - 1;
      if (nullCount > 0) {
        bitmap.set(bit_12.truncateBitmap(this.offset, length, this.nullBitmap), 0);
      }
      var buffers = this.buffers;
      buffers[enum_12.BufferType.VALIDITY] = bitmap;
      return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);
    };
    Data2.prototype._sliceBuffers = function(offset, length, stride, typeId) {
      var arr;
      var buffers = this.buffers;
      (arr = buffers[enum_12.BufferType.TYPE]) && (buffers[enum_12.BufferType.TYPE] = arr.subarray(offset, offset + length));
      (arr = buffers[enum_12.BufferType.OFFSET]) && (buffers[enum_12.BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) || (arr = buffers[enum_12.BufferType.DATA]) && (buffers[enum_12.BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));
      return buffers;
    };
    Data2.prototype._sliceChildren = function(childData, offset, length) {
      return childData.map(function(child) {
        return child.slice(offset, length);
      });
    };
    Data2.new = function(type2, offset, length, nullCount, buffers, childData, dictionary2) {
      if (buffers instanceof Data2) {
        buffers = buffers.buffers;
      } else if (!buffers) {
        buffers = [];
      }
      switch (type2.typeId) {
        case enum_12.Type.Null:
          return Data2.Null(type2, offset, length);
        case enum_12.Type.Int:
          return Data2.Int(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Dictionary:
          return Data2.Dictionary(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || [], dictionary2);
        case enum_12.Type.Float:
          return Data2.Float(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Bool:
          return Data2.Bool(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Decimal:
          return Data2.Decimal(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Date:
          return Data2.Date(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Time:
          return Data2.Time(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Timestamp:
          return Data2.Timestamp(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Interval:
          return Data2.Interval(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.FixedSizeBinary:
          return Data2.FixedSizeBinary(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Binary:
          return Data2.Binary(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.OFFSET] || [], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.Utf8:
          return Data2.Utf8(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.OFFSET] || [], buffers[enum_12.BufferType.DATA] || []);
        case enum_12.Type.List:
          return Data2.List(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.OFFSET] || [], (childData || [])[0]);
        case enum_12.Type.FixedSizeList:
          return Data2.FixedSizeList(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], (childData || [])[0]);
        case enum_12.Type.Struct:
          return Data2.Struct(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], childData || []);
        case enum_12.Type.Map:
          return Data2.Map(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.OFFSET] || [], (childData || [])[0]);
        case enum_12.Type.Union:
          return Data2.Union(type2, offset, length, nullCount || 0, buffers[enum_12.BufferType.VALIDITY], buffers[enum_12.BufferType.TYPE] || [], buffers[enum_12.BufferType.OFFSET] || childData, childData);
      }
      throw new Error("Unrecognized typeId " + type2.typeId);
    };
    Data2.Null = function(type2, offset, length) {
      return new Data2(type2, offset, length, 0);
    };
    Data2.Int = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Dictionary = function(type2, offset, length, nullCount, nullBitmap, data2, dictionary2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.indices.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)], [], dictionary2);
    };
    Data2.Float = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Bool = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Decimal = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Date = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Time = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Timestamp = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Interval = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.FixedSizeBinary = function(type2, offset, length, nullCount, nullBitmap, data2) {
      return new Data2(type2, offset, length, nullCount, [void 0, buffer_12.toArrayBufferView(type2.ArrayType, data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Binary = function(type2, offset, length, nullCount, nullBitmap, valueOffsets, data2) {
      return new Data2(type2, offset, length, nullCount, [buffer_12.toInt32Array(valueOffsets), buffer_12.toUint8Array(data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.Utf8 = function(type2, offset, length, nullCount, nullBitmap, valueOffsets, data2) {
      return new Data2(type2, offset, length, nullCount, [buffer_12.toInt32Array(valueOffsets), buffer_12.toUint8Array(data2), buffer_12.toUint8Array(nullBitmap)]);
    };
    Data2.List = function(type2, offset, length, nullCount, nullBitmap, valueOffsets, child) {
      return new Data2(type2, offset, length, nullCount, [buffer_12.toInt32Array(valueOffsets), void 0, buffer_12.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    Data2.FixedSizeList = function(type2, offset, length, nullCount, nullBitmap, child) {
      return new Data2(type2, offset, length, nullCount, [void 0, void 0, buffer_12.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    Data2.Struct = function(type2, offset, length, nullCount, nullBitmap, children2) {
      return new Data2(type2, offset, length, nullCount, [void 0, void 0, buffer_12.toUint8Array(nullBitmap)], children2);
    };
    Data2.Map = function(type2, offset, length, nullCount, nullBitmap, valueOffsets, child) {
      return new Data2(type2, offset, length, nullCount, [buffer_12.toInt32Array(valueOffsets), void 0, buffer_12.toUint8Array(nullBitmap)], child ? [child] : []);
    };
    Data2.Union = function(type2, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildren, children2) {
      var buffers = [
        void 0,
        void 0,
        buffer_12.toUint8Array(nullBitmap),
        buffer_12.toArrayBufferView(type2.ArrayType, typeIds)
      ];
      if (type2.mode === enum_12.UnionMode.Sparse) {
        return new Data2(type2, offset, length, nullCount, buffers, valueOffsetsOrChildren);
      }
      buffers[enum_12.BufferType.OFFSET] = buffer_12.toInt32Array(valueOffsetsOrChildren);
      return new Data2(type2, offset, length, nullCount, buffers, children2);
    };
    return Data2;
  }();
  exports.Data = Data;
  Data.prototype.childData = Object.freeze([]);
})(data);
var valid = {};
var pretty = {};
Object.defineProperty(pretty, "__esModule", { value: true });
pretty.valueToString = void 0;
var undf = void 0;
function valueToString(x) {
  if (x === null) {
    return "null";
  }
  if (x === undf) {
    return "undefined";
  }
  switch (typeof x) {
    case "number":
      return "" + x;
    case "bigint":
      return "" + x;
    case "string":
      return '"' + x + '"';
  }
  if (typeof x[Symbol.toPrimitive] === "function") {
    return x[Symbol.toPrimitive]("string");
  }
  return ArrayBuffer.isView(x) ? "[" + x + "]" : JSON.stringify(x);
}
pretty.valueToString = valueToString;
Object.defineProperty(valid, "__esModule", { value: true });
valid.createIsValidFunction = void 0;
var pretty_1$1 = pretty;
var compat_1$a = compat;
function createIsValidFunction(nullValues) {
  if (!nullValues || nullValues.length <= 0) {
    return function isValid(value) {
      return true;
    };
  }
  var fnBody = "";
  var noNaNs = nullValues.filter(function(x) {
    return x === x;
  });
  if (noNaNs.length > 0) {
    fnBody = "\n    switch (x) {" + noNaNs.map(function(x) {
      return "\n        case " + valueToCase(x) + ":";
    }).join("") + "\n            return false;\n    }";
  }
  if (nullValues.length !== noNaNs.length) {
    fnBody = "if (x !== x) return false;\n" + fnBody;
  }
  return new Function("x", fnBody + "\nreturn true;");
}
valid.createIsValidFunction = createIsValidFunction;
function valueToCase(x) {
  if (typeof x !== "bigint") {
    return pretty_1$1.valueToString(x);
  } else if (compat_1$a.BigIntAvailable) {
    return pretty_1$1.valueToString(x) + "n";
  }
  return '"' + pretty_1$1.valueToString(x) + '"';
}
var buffer = {};
Object.defineProperty(buffer, "__esModule", { value: true });
buffer.WideBufferBuilder = buffer.OffsetsBufferBuilder = buffer.BitmapBufferBuilder = buffer.DataBufferBuilder = buffer.BufferBuilder = void 0;
var tslib_1$1a = tslib.exports;
var buffer_1$i = buffer$1;
var compat_1$9 = compat;
var roundLengthUpToNearest64Bytes = function(len, BPE) {
  return (len * BPE + 63 & ~63 || 64) / BPE;
};
var sliceOrExtendArray = function(arr, len) {
  if (len === void 0) {
    len = 0;
  }
  return arr.length >= len ? arr.subarray(0, len) : buffer_1$i.memcpy(new arr.constructor(len), arr, 0);
};
var BufferBuilder = function() {
  function BufferBuilder2(buffer2, stride) {
    if (stride === void 0) {
      stride = 1;
    }
    this.buffer = buffer2;
    this.stride = stride;
    this.BYTES_PER_ELEMENT = buffer2.BYTES_PER_ELEMENT;
    this.ArrayType = buffer2.constructor;
    this._resize(this.length = buffer2.length / stride | 0);
  }
  Object.defineProperty(BufferBuilder2.prototype, "byteLength", {
    get: function() {
      return this.length * this.stride * this.BYTES_PER_ELEMENT | 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BufferBuilder2.prototype, "reservedLength", {
    get: function() {
      return this.buffer.length / this.stride;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BufferBuilder2.prototype, "reservedByteLength", {
    get: function() {
      return this.buffer.byteLength;
    },
    enumerable: false,
    configurable: true
  });
  BufferBuilder2.prototype.set = function(index, value) {
    return this;
  };
  BufferBuilder2.prototype.append = function(value) {
    return this.set(this.length, value);
  };
  BufferBuilder2.prototype.reserve = function(extra) {
    if (extra > 0) {
      this.length += extra;
      var stride = this.stride;
      var length_1 = this.length * stride;
      var reserved = this.buffer.length;
      if (length_1 >= reserved) {
        this._resize(reserved === 0 ? roundLengthUpToNearest64Bytes(length_1 * 1, this.BYTES_PER_ELEMENT) : roundLengthUpToNearest64Bytes(length_1 * 2, this.BYTES_PER_ELEMENT));
      }
    }
    return this;
  };
  BufferBuilder2.prototype.flush = function(length) {
    if (length === void 0) {
      length = this.length;
    }
    length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);
    var array2 = sliceOrExtendArray(this.buffer, length);
    this.clear();
    return array2;
  };
  BufferBuilder2.prototype.clear = function() {
    this.length = 0;
    this._resize(0);
    return this;
  };
  BufferBuilder2.prototype._resize = function(newLength) {
    return this.buffer = buffer_1$i.memcpy(new this.ArrayType(newLength), this.buffer);
  };
  return BufferBuilder2;
}();
buffer.BufferBuilder = BufferBuilder;
BufferBuilder.prototype.offset = 0;
var DataBufferBuilder = function(_super) {
  tslib_1$1a.__extends(DataBufferBuilder2, _super);
  function DataBufferBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DataBufferBuilder2.prototype.last = function() {
    return this.get(this.length - 1);
  };
  DataBufferBuilder2.prototype.get = function(index) {
    return this.buffer[index];
  };
  DataBufferBuilder2.prototype.set = function(index, value) {
    this.reserve(index - this.length + 1);
    this.buffer[index * this.stride] = value;
    return this;
  };
  return DataBufferBuilder2;
}(BufferBuilder);
buffer.DataBufferBuilder = DataBufferBuilder;
var BitmapBufferBuilder = function(_super) {
  tslib_1$1a.__extends(BitmapBufferBuilder2, _super);
  function BitmapBufferBuilder2(data2) {
    if (data2 === void 0) {
      data2 = new Uint8Array(0);
    }
    var _this = _super.call(this, data2, 1 / 8) || this;
    _this.numValid = 0;
    return _this;
  }
  Object.defineProperty(BitmapBufferBuilder2.prototype, "numInvalid", {
    get: function() {
      return this.length - this.numValid;
    },
    enumerable: false,
    configurable: true
  });
  BitmapBufferBuilder2.prototype.get = function(idx) {
    return this.buffer[idx >> 3] >> idx % 8 & 1;
  };
  BitmapBufferBuilder2.prototype.set = function(idx, val) {
    var buffer2 = this.reserve(idx - this.length + 1).buffer;
    var byte = idx >> 3, bit2 = idx % 8, cur = buffer2[byte] >> bit2 & 1;
    val ? cur === 0 && (buffer2[byte] |= 1 << bit2, ++this.numValid) : cur === 1 && (buffer2[byte] &= ~(1 << bit2), --this.numValid);
    return this;
  };
  BitmapBufferBuilder2.prototype.clear = function() {
    this.numValid = 0;
    return _super.prototype.clear.call(this);
  };
  return BitmapBufferBuilder2;
}(DataBufferBuilder);
buffer.BitmapBufferBuilder = BitmapBufferBuilder;
var OffsetsBufferBuilder = function(_super) {
  tslib_1$1a.__extends(OffsetsBufferBuilder2, _super);
  function OffsetsBufferBuilder2(data2) {
    if (data2 === void 0) {
      data2 = new Int32Array(1);
    }
    return _super.call(this, data2, 1) || this;
  }
  OffsetsBufferBuilder2.prototype.append = function(value) {
    return this.set(this.length - 1, value);
  };
  OffsetsBufferBuilder2.prototype.set = function(index, value) {
    var offset = this.length - 1;
    var buffer2 = this.reserve(index - offset + 1).buffer;
    if (offset < index++) {
      buffer2.fill(buffer2[offset], offset, index);
    }
    buffer2[index] = buffer2[index - 1] + value;
    return this;
  };
  OffsetsBufferBuilder2.prototype.flush = function(length) {
    if (length === void 0) {
      length = this.length - 1;
    }
    if (length > this.length) {
      this.set(length - 1, 0);
    }
    return _super.prototype.flush.call(this, length + 1);
  };
  return OffsetsBufferBuilder2;
}(DataBufferBuilder);
buffer.OffsetsBufferBuilder = OffsetsBufferBuilder;
var WideBufferBuilder = function(_super) {
  tslib_1$1a.__extends(WideBufferBuilder2, _super);
  function WideBufferBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(WideBufferBuilder2.prototype, "ArrayType64", {
    get: function() {
      return this._ArrayType64 || (this._ArrayType64 = this.buffer instanceof Int32Array ? compat_1$9.BigInt64Array : compat_1$9.BigUint64Array);
    },
    enumerable: false,
    configurable: true
  });
  WideBufferBuilder2.prototype.set = function(index, value) {
    this.reserve(index - this.length + 1);
    switch (typeof value) {
      case "bigint":
        this.buffer64[index] = value;
        break;
      case "number":
        this.buffer[index * this.stride] = value;
        break;
      default:
        this.buffer.set(value, index * this.stride);
    }
    return this;
  };
  WideBufferBuilder2.prototype._resize = function(newLength) {
    var data2 = _super.prototype._resize.call(this, newLength);
    var length = data2.byteLength / (this.BYTES_PER_ELEMENT * this.stride);
    if (compat_1$9.BigIntAvailable) {
      this.buffer64 = new this.ArrayType64(data2.buffer, data2.byteOffset, length);
    }
    return data2;
  };
  return WideBufferBuilder2;
}(BufferBuilder);
buffer.WideBufferBuilder = WideBufferBuilder;
Object.defineProperty(builder$1, "__esModule", { value: true });
builder$1.VariableWidthBuilder = builder$1.FixedWidthBuilder = builder$1.Builder = void 0;
var tslib_1$19 = tslib.exports;
var vector_1$i = vector$2;
var enum_1$h = _enum;
var data_1$8 = data;
var valid_1 = valid;
var buffer_1$h = buffer;
var type_1$r = type;
var Builder$2 = function() {
  function Builder2(_a) {
    var type2 = _a["type"], nulls = _a["nullValues"];
    this.length = 0;
    this.finished = false;
    this.type = type2;
    this.children = [];
    this.nullValues = nulls;
    this.stride = type_1$r.strideForType(type2);
    this._nulls = new buffer_1$h.BitmapBufferBuilder();
    if (nulls && nulls.length > 0) {
      this._isValid = valid_1.createIsValidFunction(nulls);
    }
  }
  Builder2.new = function(options) {
  };
  Builder2.throughNode = function(options) {
    throw new Error('"throughNode" not available in this environment');
  };
  Builder2.throughDOM = function(options) {
    throw new Error('"throughDOM" not available in this environment');
  };
  Builder2.throughIterable = function(options) {
    return throughIterable(options);
  };
  Builder2.throughAsyncIterable = function(options) {
    return throughAsyncIterable(options);
  };
  Builder2.prototype.toVector = function() {
    return vector_1$i.Vector.new(this.flush());
  };
  Object.defineProperty(Builder2.prototype, "ArrayType", {
    get: function() {
      return this.type.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "nullCount", {
    get: function() {
      return this._nulls.numInvalid;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "numChildren", {
    get: function() {
      return this.children.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "byteLength", {
    get: function() {
      var size = 0;
      this._offsets && (size += this._offsets.byteLength);
      this._values && (size += this._values.byteLength);
      this._nulls && (size += this._nulls.byteLength);
      this._typeIds && (size += this._typeIds.byteLength);
      return this.children.reduce(function(size2, child) {
        return size2 + child.byteLength;
      }, size);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "reservedLength", {
    get: function() {
      return this._nulls.reservedLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "reservedByteLength", {
    get: function() {
      var size = 0;
      this._offsets && (size += this._offsets.reservedByteLength);
      this._values && (size += this._values.reservedByteLength);
      this._nulls && (size += this._nulls.reservedByteLength);
      this._typeIds && (size += this._typeIds.reservedByteLength);
      return this.children.reduce(function(size2, child) {
        return size2 + child.reservedByteLength;
      }, size);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "valueOffsets", {
    get: function() {
      return this._offsets ? this._offsets.buffer : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "values", {
    get: function() {
      return this._values ? this._values.buffer : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "nullBitmap", {
    get: function() {
      return this._nulls ? this._nulls.buffer : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Builder2.prototype, "typeIds", {
    get: function() {
      return this._typeIds ? this._typeIds.buffer : null;
    },
    enumerable: false,
    configurable: true
  });
  Builder2.prototype.append = function(value) {
    return this.set(this.length, value);
  };
  Builder2.prototype.isValid = function(value) {
    return this._isValid(value);
  };
  Builder2.prototype.set = function(index, value) {
    if (this.setValid(index, this.isValid(value))) {
      this.setValue(index, value);
    }
    return this;
  };
  Builder2.prototype.setValue = function(index, value) {
    this._setValue(this, index, value);
  };
  Builder2.prototype.setValid = function(index, valid2) {
    this.length = this._nulls.set(index, +valid2).length;
    return valid2;
  };
  Builder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "" + this.numChildren;
    }
    throw new Error('Cannot append children to non-nested type "' + this.type + '"');
  };
  Builder2.prototype.getChildAt = function(index) {
    return this.children[index] || null;
  };
  Builder2.prototype.flush = function() {
    var buffers = [];
    var values = this._values;
    var offsets = this._offsets;
    var typeIds = this._typeIds;
    var _a = this, length = _a.length, nullCount = _a.nullCount;
    if (typeIds) {
      buffers[enum_1$h.BufferType.TYPE] = typeIds.flush(length);
      offsets && (buffers[enum_1$h.BufferType.OFFSET] = offsets.flush(length));
    } else if (offsets) {
      values && (buffers[enum_1$h.BufferType.DATA] = values.flush(offsets.last()));
      buffers[enum_1$h.BufferType.OFFSET] = offsets.flush(length);
    } else if (values) {
      buffers[enum_1$h.BufferType.DATA] = values.flush(length);
    }
    nullCount > 0 && (buffers[enum_1$h.BufferType.VALIDITY] = this._nulls.flush(length));
    var data2 = data_1$8.Data.new(this.type, 0, length, nullCount, buffers, this.children.map(function(child) {
      return child.flush();
    }));
    this.clear();
    return data2;
  };
  Builder2.prototype.finish = function() {
    this.finished = true;
    this.children.forEach(function(child) {
      return child.finish();
    });
    return this;
  };
  Builder2.prototype.clear = function() {
    this.length = 0;
    this._offsets && this._offsets.clear();
    this._values && this._values.clear();
    this._nulls && this._nulls.clear();
    this._typeIds && this._typeIds.clear();
    this.children.forEach(function(child) {
      return child.clear();
    });
    return this;
  };
  return Builder2;
}();
builder$1.Builder = Builder$2;
Builder$2.prototype.length = 1;
Builder$2.prototype.stride = 1;
Builder$2.prototype.children = null;
Builder$2.prototype.finished = false;
Builder$2.prototype.nullValues = null;
Builder$2.prototype._isValid = function() {
  return true;
};
var FixedWidthBuilder = function(_super) {
  tslib_1$19.__extends(FixedWidthBuilder2, _super);
  function FixedWidthBuilder2(opts) {
    var _this = _super.call(this, opts) || this;
    _this._values = new buffer_1$h.DataBufferBuilder(new _this.ArrayType(0), _this.stride);
    return _this;
  }
  FixedWidthBuilder2.prototype.setValue = function(index, value) {
    var values = this._values;
    values.reserve(index - values.length + 1);
    return _super.prototype.setValue.call(this, index, value);
  };
  return FixedWidthBuilder2;
}(Builder$2);
builder$1.FixedWidthBuilder = FixedWidthBuilder;
var VariableWidthBuilder = function(_super) {
  tslib_1$19.__extends(VariableWidthBuilder2, _super);
  function VariableWidthBuilder2(opts) {
    var _this = _super.call(this, opts) || this;
    _this._pendingLength = 0;
    _this._offsets = new buffer_1$h.OffsetsBufferBuilder();
    return _this;
  }
  VariableWidthBuilder2.prototype.setValue = function(index, value) {
    var pending = this._pending || (this._pending = new Map());
    var current = pending.get(index);
    current && (this._pendingLength -= current.length);
    this._pendingLength += value.length;
    pending.set(index, value);
  };
  VariableWidthBuilder2.prototype.setValid = function(index, isValid) {
    if (!_super.prototype.setValid.call(this, index, isValid)) {
      (this._pending || (this._pending = new Map())).set(index, void 0);
      return false;
    }
    return true;
  };
  VariableWidthBuilder2.prototype.clear = function() {
    this._pendingLength = 0;
    this._pending = void 0;
    return _super.prototype.clear.call(this);
  };
  VariableWidthBuilder2.prototype.flush = function() {
    this._flush();
    return _super.prototype.flush.call(this);
  };
  VariableWidthBuilder2.prototype.finish = function() {
    this._flush();
    return _super.prototype.finish.call(this);
  };
  VariableWidthBuilder2.prototype._flush = function() {
    var pending = this._pending;
    var pendingLength = this._pendingLength;
    this._pendingLength = 0;
    this._pending = void 0;
    if (pending && pending.size > 0) {
      this._flushPending(pending, pendingLength);
    }
    return this;
  };
  return VariableWidthBuilder2;
}(Builder$2);
builder$1.VariableWidthBuilder = VariableWidthBuilder;
function throughIterable(options) {
  var _a = options["queueingStrategy"], queueingStrategy = _a === void 0 ? "count" : _a;
  var _b = options["highWaterMark"], highWaterMark = _b === void 0 ? queueingStrategy !== "bytes" ? 1e3 : Math.pow(2, 14) : _b;
  var sizeProperty = queueingStrategy !== "bytes" ? "length" : "byteLength";
  return function(source) {
    var numChunks, builder2, source_1, source_1_1, value, _a2, e_1_1;
    var e_1, _b2;
    return tslib_1$19.__generator(this, function(_c) {
      switch (_c.label) {
        case 0:
          numChunks = 0;
          builder2 = Builder$2.new(options);
          _c.label = 1;
        case 1:
          _c.trys.push([1, 7, 8, 9]);
          source_1 = tslib_1$19.__values(source), source_1_1 = source_1.next();
          _c.label = 2;
        case 2:
          if (!!source_1_1.done)
            return [3, 6];
          value = source_1_1.value;
          if (!(builder2.append(value)[sizeProperty] >= highWaterMark))
            return [3, 5];
          _a2 = ++numChunks;
          if (!_a2)
            return [3, 4];
          return [4, builder2.toVector()];
        case 3:
          _a2 = _c.sent();
          _c.label = 4;
        case 4:
          _c.label = 5;
        case 5:
          source_1_1 = source_1.next();
          return [3, 2];
        case 6:
          return [3, 9];
        case 7:
          e_1_1 = _c.sent();
          e_1 = { error: e_1_1 };
          return [3, 9];
        case 8:
          try {
            if (source_1_1 && !source_1_1.done && (_b2 = source_1.return))
              _b2.call(source_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 9:
          if (!(builder2.finish().length > 0 || numChunks === 0))
            return [3, 11];
          return [4, builder2.toVector()];
        case 10:
          _c.sent();
          _c.label = 11;
        case 11:
          return [2];
      }
    });
  };
}
function throughAsyncIterable(options) {
  var _a = options["queueingStrategy"], queueingStrategy = _a === void 0 ? "count" : _a;
  var _b = options["highWaterMark"], highWaterMark = _b === void 0 ? queueingStrategy !== "bytes" ? 1e3 : Math.pow(2, 14) : _b;
  var sizeProperty = queueingStrategy !== "bytes" ? "length" : "byteLength";
  return function(source) {
    return tslib_1$19.__asyncGenerator(this, arguments, function() {
      var numChunks, builder2, source_2, source_2_1, value, _a2, e_2_1;
      var e_2, _b2;
      return tslib_1$19.__generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            numChunks = 0;
            builder2 = Builder$2.new(options);
            _c.label = 1;
          case 1:
            _c.trys.push([1, 9, 10, 15]);
            source_2 = tslib_1$19.__asyncValues(source);
            _c.label = 2;
          case 2:
            return [4, tslib_1$19.__await(source_2.next())];
          case 3:
            if (!(source_2_1 = _c.sent(), !source_2_1.done))
              return [3, 8];
            value = source_2_1.value;
            if (!(builder2.append(value)[sizeProperty] >= highWaterMark))
              return [3, 7];
            _a2 = ++numChunks;
            if (!_a2)
              return [3, 6];
            return [4, tslib_1$19.__await(builder2.toVector())];
          case 4:
            return [4, _c.sent()];
          case 5:
            _a2 = _c.sent();
            _c.label = 6;
          case 6:
            _c.label = 7;
          case 7:
            return [3, 2];
          case 8:
            return [3, 15];
          case 9:
            e_2_1 = _c.sent();
            e_2 = { error: e_2_1 };
            return [3, 15];
          case 10:
            _c.trys.push([10, , 13, 14]);
            if (!(source_2_1 && !source_2_1.done && (_b2 = source_2.return)))
              return [3, 12];
            return [4, tslib_1$19.__await(_b2.call(source_2))];
          case 11:
            _c.sent();
            _c.label = 12;
          case 12:
            return [3, 14];
          case 13:
            if (e_2)
              throw e_2.error;
            return [7];
          case 14:
            return [7];
          case 15:
            if (!(builder2.finish().length > 0 || numChunks === 0))
              return [3, 18];
            return [4, tslib_1$19.__await(builder2.toVector())];
          case 16:
            return [4, _c.sent()];
          case 17:
            _c.sent();
            _c.label = 18;
          case 18:
            return [2];
        }
      });
    });
  };
}
var bool$1 = {};
Object.defineProperty(bool$1, "__esModule", { value: true });
bool$1.BoolBuilder = void 0;
var tslib_1$18 = tslib.exports;
var buffer_1$g = buffer;
var builder_1$h = builder$1;
var BoolBuilder = function(_super) {
  tslib_1$18.__extends(BoolBuilder2, _super);
  function BoolBuilder2(options) {
    var _this = _super.call(this, options) || this;
    _this._values = new buffer_1$g.BitmapBufferBuilder();
    return _this;
  }
  BoolBuilder2.prototype.setValue = function(index, value) {
    this._values.set(index, +value);
  };
  return BoolBuilder2;
}(builder_1$h.Builder);
bool$1.BoolBuilder = BoolBuilder;
var _null$1 = {};
Object.defineProperty(_null$1, "__esModule", { value: true });
_null$1.NullBuilder = void 0;
var tslib_1$17 = tslib.exports;
var builder_1$g = builder$1;
var NullBuilder = function(_super) {
  tslib_1$17.__extends(NullBuilder2, _super);
  function NullBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  NullBuilder2.prototype.setValue = function(index, value) {
  };
  NullBuilder2.prototype.setValid = function(index, valid2) {
    this.length = Math.max(index + 1, this.length);
    return valid2;
  };
  return NullBuilder2;
}(builder_1$g.Builder);
_null$1.NullBuilder = NullBuilder;
var date$1 = {};
Object.defineProperty(date$1, "__esModule", { value: true });
date$1.DateMillisecondBuilder = date$1.DateDayBuilder = date$1.DateBuilder = void 0;
var tslib_1$16 = tslib.exports;
var builder_1$f = builder$1;
var DateBuilder = function(_super) {
  tslib_1$16.__extends(DateBuilder2, _super);
  function DateBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DateBuilder2;
}(builder_1$f.FixedWidthBuilder);
date$1.DateBuilder = DateBuilder;
var DateDayBuilder = function(_super) {
  tslib_1$16.__extends(DateDayBuilder2, _super);
  function DateDayBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DateDayBuilder2;
}(DateBuilder);
date$1.DateDayBuilder = DateDayBuilder;
var DateMillisecondBuilder = function(_super) {
  tslib_1$16.__extends(DateMillisecondBuilder2, _super);
  function DateMillisecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DateMillisecondBuilder2;
}(DateBuilder);
date$1.DateMillisecondBuilder = DateMillisecondBuilder;
var decimal$1 = {};
Object.defineProperty(decimal$1, "__esModule", { value: true });
decimal$1.DecimalBuilder = void 0;
var tslib_1$15 = tslib.exports;
var builder_1$e = builder$1;
var DecimalBuilder = function(_super) {
  tslib_1$15.__extends(DecimalBuilder2, _super);
  function DecimalBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DecimalBuilder2;
}(builder_1$e.FixedWidthBuilder);
decimal$1.DecimalBuilder = DecimalBuilder;
var dictionary$1 = {};
Object.defineProperty(dictionary$1, "__esModule", { value: true });
dictionary$1.DictionaryBuilder = void 0;
var tslib_1$14 = tslib.exports;
var type_1$q = type;
var builder_1$d = builder$1;
var DictionaryBuilder = function(_super) {
  tslib_1$14.__extends(DictionaryBuilder2, _super);
  function DictionaryBuilder2(_a) {
    var type2 = _a["type"], nulls = _a["nullValues"], hashFn = _a["dictionaryHashFunction"];
    var _this = _super.call(this, { type: new type_1$q.Dictionary(type2.dictionary, type2.indices, type2.id, type2.isOrdered) }) || this;
    _this._nulls = null;
    _this._dictionaryOffset = 0;
    _this._keysToIndices = Object.create(null);
    _this.indices = builder_1$d.Builder.new({ "type": _this.type.indices, "nullValues": nulls });
    _this.dictionary = builder_1$d.Builder.new({ "type": _this.type.dictionary, "nullValues": null });
    if (typeof hashFn === "function") {
      _this.valueToKey = hashFn;
    }
    return _this;
  }
  Object.defineProperty(DictionaryBuilder2.prototype, "values", {
    get: function() {
      return this.indices.values;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBuilder2.prototype, "nullCount", {
    get: function() {
      return this.indices.nullCount;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBuilder2.prototype, "nullBitmap", {
    get: function() {
      return this.indices.nullBitmap;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBuilder2.prototype, "byteLength", {
    get: function() {
      return this.indices.byteLength + this.dictionary.byteLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBuilder2.prototype, "reservedLength", {
    get: function() {
      return this.indices.reservedLength + this.dictionary.reservedLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBuilder2.prototype, "reservedByteLength", {
    get: function() {
      return this.indices.reservedByteLength + this.dictionary.reservedByteLength;
    },
    enumerable: false,
    configurable: true
  });
  DictionaryBuilder2.prototype.isValid = function(value) {
    return this.indices.isValid(value);
  };
  DictionaryBuilder2.prototype.setValid = function(index, valid2) {
    var indices = this.indices;
    valid2 = indices.setValid(index, valid2);
    this.length = indices.length;
    return valid2;
  };
  DictionaryBuilder2.prototype.setValue = function(index, value) {
    var keysToIndices = this._keysToIndices;
    var key = this.valueToKey(value);
    var idx = keysToIndices[key];
    if (idx === void 0) {
      keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;
    }
    return this.indices.setValue(index, idx);
  };
  DictionaryBuilder2.prototype.flush = function() {
    var type2 = this.type;
    var prev = this._dictionary;
    var curr = this.dictionary.toVector();
    var data2 = this.indices.flush().clone(type2);
    data2.dictionary = prev ? prev.concat(curr) : curr;
    this.finished || (this._dictionaryOffset += curr.length);
    this._dictionary = data2.dictionary;
    this.clear();
    return data2;
  };
  DictionaryBuilder2.prototype.finish = function() {
    this.indices.finish();
    this.dictionary.finish();
    this._dictionaryOffset = 0;
    this._keysToIndices = Object.create(null);
    return _super.prototype.finish.call(this);
  };
  DictionaryBuilder2.prototype.clear = function() {
    this.indices.clear();
    this.dictionary.clear();
    return _super.prototype.clear.call(this);
  };
  DictionaryBuilder2.prototype.valueToKey = function(val) {
    return typeof val === "string" ? val : "" + val;
  };
  return DictionaryBuilder2;
}(builder_1$d.Builder);
dictionary$1.DictionaryBuilder = DictionaryBuilder;
var fixedsizebinary$1 = {};
Object.defineProperty(fixedsizebinary$1, "__esModule", { value: true });
fixedsizebinary$1.FixedSizeBinaryBuilder = void 0;
var tslib_1$13 = tslib.exports;
var builder_1$c = builder$1;
var FixedSizeBinaryBuilder = function(_super) {
  tslib_1$13.__extends(FixedSizeBinaryBuilder2, _super);
  function FixedSizeBinaryBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return FixedSizeBinaryBuilder2;
}(builder_1$c.FixedWidthBuilder);
fixedsizebinary$1.FixedSizeBinaryBuilder = FixedSizeBinaryBuilder;
var float$1 = {};
var math = {};
Object.defineProperty(math, "__esModule", { value: true });
math.float64ToUint16 = math.uint16ToFloat64 = void 0;
var f64 = new Float64Array(1);
var u32 = new Uint32Array(f64.buffer);
function uint16ToFloat64(h) {
  var expo = (h & 31744) >> 10;
  var sigf = (h & 1023) / 1024;
  var sign = Math.pow(-1, (h & 32768) >> 15);
  switch (expo) {
    case 31:
      return sign * (sigf ? NaN : 1 / 0);
    case 0:
      return sign * (sigf ? 6103515625e-14 * sigf : 0);
  }
  return sign * Math.pow(2, expo - 15) * (1 + sigf);
}
math.uint16ToFloat64 = uint16ToFloat64;
function float64ToUint16(d) {
  if (d !== d) {
    return 32256;
  }
  f64[0] = d;
  var sign = (u32[1] & 2147483648) >> 16 & 65535;
  var expo = u32[1] & 2146435072, sigf = 0;
  if (expo >= 1089470464) {
    if (u32[0] > 0) {
      expo = 31744;
    } else {
      expo = (expo & 2080374784) >> 16;
      sigf = (u32[1] & 1048575) >> 10;
    }
  } else if (expo <= 1056964608) {
    sigf = 1048576 + (u32[1] & 1048575);
    sigf = 1048576 + (sigf << (expo >> 20) - 998) >> 21;
    expo = 0;
  } else {
    expo = expo - 1056964608 >> 10;
    sigf = (u32[1] & 1048575) + 512 >> 10;
  }
  return sign | expo | sigf & 65535;
}
math.float64ToUint16 = float64ToUint16;
Object.defineProperty(float$1, "__esModule", { value: true });
float$1.Float64Builder = float$1.Float32Builder = float$1.Float16Builder = float$1.FloatBuilder = void 0;
var tslib_1$12 = tslib.exports;
var math_1$2 = math;
var builder_1$b = builder$1;
var FloatBuilder = function(_super) {
  tslib_1$12.__extends(FloatBuilder2, _super);
  function FloatBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return FloatBuilder2;
}(builder_1$b.FixedWidthBuilder);
float$1.FloatBuilder = FloatBuilder;
var Float16Builder = function(_super) {
  tslib_1$12.__extends(Float16Builder2, _super);
  function Float16Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Float16Builder2.prototype.setValue = function(index, value) {
    this._values.set(index, math_1$2.float64ToUint16(value));
  };
  return Float16Builder2;
}(FloatBuilder);
float$1.Float16Builder = Float16Builder;
var Float32Builder = function(_super) {
  tslib_1$12.__extends(Float32Builder2, _super);
  function Float32Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Float32Builder2.prototype.setValue = function(index, value) {
    this._values.set(index, value);
  };
  return Float32Builder2;
}(FloatBuilder);
float$1.Float32Builder = Float32Builder;
var Float64Builder = function(_super) {
  tslib_1$12.__extends(Float64Builder2, _super);
  function Float64Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Float64Builder2.prototype.setValue = function(index, value) {
    this._values.set(index, value);
  };
  return Float64Builder2;
}(FloatBuilder);
float$1.Float64Builder = Float64Builder;
var int$2 = {};
var bn = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.BN = exports.bignumToBigInt = exports.bignumToString = exports.isArrowBigNumSymbol = void 0;
  var tslib_12 = tslib.exports;
  var buffer_12 = buffer$1;
  var compat_12 = compat;
  exports.isArrowBigNumSymbol = Symbol.for("isArrowBigNum");
  function BigNum(x) {
    var _a;
    var xs = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      xs[_i - 1] = arguments[_i];
    }
    if (xs.length === 0) {
      return Object.setPrototypeOf(buffer_12.toArrayBufferView(this["TypedArray"], x), this.constructor.prototype);
    }
    return Object.setPrototypeOf(new ((_a = this["TypedArray"]).bind.apply(_a, tslib_12.__spread([void 0, x], xs)))(), this.constructor.prototype);
  }
  BigNum.prototype[exports.isArrowBigNumSymbol] = true;
  BigNum.prototype.toJSON = function() {
    return '"' + exports.bignumToString(this) + '"';
  };
  BigNum.prototype.valueOf = function() {
    return bignumToNumber(this);
  };
  BigNum.prototype.toString = function() {
    return exports.bignumToString(this);
  };
  BigNum.prototype[Symbol.toPrimitive] = function(hint) {
    if (hint === void 0) {
      hint = "default";
    }
    switch (hint) {
      case "number":
        return bignumToNumber(this);
      case "string":
        return exports.bignumToString(this);
      case "default":
        return exports.bignumToBigInt(this);
    }
    return exports.bignumToString(this);
  };
  function SignedBigNum() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return BigNum.apply(this, args2);
  }
  function UnsignedBigNum() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return BigNum.apply(this, args2);
  }
  function DecimalBigNum() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return BigNum.apply(this, args2);
  }
  Object.setPrototypeOf(SignedBigNum.prototype, Object.create(Int32Array.prototype));
  Object.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));
  Object.setPrototypeOf(DecimalBigNum.prototype, Object.create(Uint32Array.prototype));
  Object.assign(SignedBigNum.prototype, BigNum.prototype, { "constructor": SignedBigNum, "signed": true, "TypedArray": Int32Array, "BigIntArray": compat_12.BigInt64Array });
  Object.assign(UnsignedBigNum.prototype, BigNum.prototype, { "constructor": UnsignedBigNum, "signed": false, "TypedArray": Uint32Array, "BigIntArray": compat_12.BigUint64Array });
  Object.assign(DecimalBigNum.prototype, BigNum.prototype, { "constructor": DecimalBigNum, "signed": true, "TypedArray": Uint32Array, "BigIntArray": compat_12.BigUint64Array });
  function bignumToNumber(bn2) {
    var buffer2 = bn2.buffer, byteOffset = bn2.byteOffset, length = bn2.length, signed = bn2["signed"];
    var words = new Int32Array(buffer2, byteOffset, length);
    var number2 = 0, i = 0;
    var n = words.length;
    var hi, lo;
    while (i < n) {
      lo = words[i++];
      hi = words[i++];
      signed || (hi = hi >>> 0);
      number2 += (lo >>> 0) + hi * Math.pow(i, 32);
    }
    return number2;
  }
  if (!compat_12.BigIntAvailable) {
    exports.bignumToString = decimalToString;
    exports.bignumToBigInt = exports.bignumToString;
  } else {
    exports.bignumToBigInt = function(a) {
      return a.byteLength === 8 ? new a["BigIntArray"](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);
    };
    exports.bignumToString = function(a) {
      return a.byteLength === 8 ? "" + new a["BigIntArray"](a.buffer, a.byteOffset, 1)[0] : decimalToString(a);
    };
  }
  function decimalToString(a) {
    var digits = "";
    var base64 = new Uint32Array(2);
    var base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);
    var checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);
    var i = -1;
    var n = base32.length - 1;
    do {
      for (base64[0] = base32[i = 0]; i < n; ) {
        base32[i++] = base64[1] = base64[0] / 10;
        base64[0] = (base64[0] - base64[1] * 10 << 16) + base32[i];
      }
      base32[i] = base64[1] = base64[0] / 10;
      base64[0] = base64[0] - base64[1] * 10;
      digits = "" + base64[0] + digits;
    } while (checks[0] || checks[1] || checks[2] || checks[3]);
    return digits ? digits : "0";
  }
  var BN = function() {
    function BN2(num, isSigned) {
      return BN2.new(num, isSigned);
    }
    BN2.new = function(num, isSigned) {
      switch (isSigned) {
        case true:
          return new SignedBigNum(num);
        case false:
          return new UnsignedBigNum(num);
      }
      switch (num.constructor) {
        case Int8Array:
        case Int16Array:
        case Int32Array:
        case compat_12.BigInt64Array:
          return new SignedBigNum(num);
      }
      if (num.byteLength === 16) {
        return new DecimalBigNum(num);
      }
      return new UnsignedBigNum(num);
    };
    BN2.signed = function(num) {
      return new SignedBigNum(num);
    };
    BN2.unsigned = function(num) {
      return new UnsignedBigNum(num);
    };
    BN2.decimal = function(num) {
      return new DecimalBigNum(num);
    };
    return BN2;
  }();
  exports.BN = BN;
})(bn);
Object.defineProperty(int$2, "__esModule", { value: true });
int$2.Uint64Builder = int$2.Uint32Builder = int$2.Uint16Builder = int$2.Uint8Builder = int$2.Int64Builder = int$2.Int32Builder = int$2.Int16Builder = int$2.Int8Builder = int$2.IntBuilder = void 0;
var tslib_1$11 = tslib.exports;
var bn_1$2 = bn;
var buffer_1$f = buffer;
var compat_1$8 = compat;
var builder_1$a = builder$1;
var IntBuilder = function(_super) {
  tslib_1$11.__extends(IntBuilder2, _super);
  function IntBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  IntBuilder2.prototype.setValue = function(index, value) {
    this._values.set(index, value);
  };
  return IntBuilder2;
}(builder_1$a.FixedWidthBuilder);
int$2.IntBuilder = IntBuilder;
var Int8Builder = function(_super) {
  tslib_1$11.__extends(Int8Builder2, _super);
  function Int8Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int8Builder2;
}(IntBuilder);
int$2.Int8Builder = Int8Builder;
var Int16Builder = function(_super) {
  tslib_1$11.__extends(Int16Builder2, _super);
  function Int16Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int16Builder2;
}(IntBuilder);
int$2.Int16Builder = Int16Builder;
var Int32Builder = function(_super) {
  tslib_1$11.__extends(Int32Builder2, _super);
  function Int32Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int32Builder2;
}(IntBuilder);
int$2.Int32Builder = Int32Builder;
var Int64Builder = function(_super) {
  tslib_1$11.__extends(Int64Builder2, _super);
  function Int64Builder2(options) {
    var _this = this;
    if (options["nullValues"]) {
      options["nullValues"] = options["nullValues"].map(toBigInt);
    }
    _this = _super.call(this, options) || this;
    _this._values = new buffer_1$f.WideBufferBuilder(new Int32Array(0), 2);
    return _this;
  }
  Object.defineProperty(Int64Builder2.prototype, "values64", {
    get: function() {
      return this._values.buffer64;
    },
    enumerable: false,
    configurable: true
  });
  Int64Builder2.prototype.isValid = function(value) {
    return _super.prototype.isValid.call(this, toBigInt(value));
  };
  return Int64Builder2;
}(IntBuilder);
int$2.Int64Builder = Int64Builder;
var Uint8Builder = function(_super) {
  tslib_1$11.__extends(Uint8Builder2, _super);
  function Uint8Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint8Builder2;
}(IntBuilder);
int$2.Uint8Builder = Uint8Builder;
var Uint16Builder = function(_super) {
  tslib_1$11.__extends(Uint16Builder2, _super);
  function Uint16Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint16Builder2;
}(IntBuilder);
int$2.Uint16Builder = Uint16Builder;
var Uint32Builder = function(_super) {
  tslib_1$11.__extends(Uint32Builder2, _super);
  function Uint32Builder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint32Builder2;
}(IntBuilder);
int$2.Uint32Builder = Uint32Builder;
var Uint64Builder = function(_super) {
  tslib_1$11.__extends(Uint64Builder2, _super);
  function Uint64Builder2(options) {
    var _this = this;
    if (options["nullValues"]) {
      options["nullValues"] = options["nullValues"].map(toBigInt);
    }
    _this = _super.call(this, options) || this;
    _this._values = new buffer_1$f.WideBufferBuilder(new Uint32Array(0), 2);
    return _this;
  }
  Object.defineProperty(Uint64Builder2.prototype, "values64", {
    get: function() {
      return this._values.buffer64;
    },
    enumerable: false,
    configurable: true
  });
  Uint64Builder2.prototype.isValid = function(value) {
    return _super.prototype.isValid.call(this, toBigInt(value));
  };
  return Uint64Builder2;
}(IntBuilder);
int$2.Uint64Builder = Uint64Builder;
var toBigInt = function(memo) {
  return function(value) {
    if (ArrayBuffer.isView(value)) {
      memo.buffer = value.buffer;
      memo.byteOffset = value.byteOffset;
      memo.byteLength = value.byteLength;
      value = bn_1$2.bignumToBigInt(memo);
      memo.buffer = null;
    }
    return value;
  };
}({ "BigIntArray": compat_1$8.BigInt64Array });
var time$1 = {};
Object.defineProperty(time$1, "__esModule", { value: true });
time$1.TimeNanosecondBuilder = time$1.TimeMicrosecondBuilder = time$1.TimeMillisecondBuilder = time$1.TimeSecondBuilder = time$1.TimeBuilder = void 0;
var tslib_1$10 = tslib.exports;
var builder_1$9 = builder$1;
var TimeBuilder = function(_super) {
  tslib_1$10.__extends(TimeBuilder2, _super);
  function TimeBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeBuilder2;
}(builder_1$9.FixedWidthBuilder);
time$1.TimeBuilder = TimeBuilder;
var TimeSecondBuilder = function(_super) {
  tslib_1$10.__extends(TimeSecondBuilder2, _super);
  function TimeSecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeSecondBuilder2;
}(TimeBuilder);
time$1.TimeSecondBuilder = TimeSecondBuilder;
var TimeMillisecondBuilder = function(_super) {
  tslib_1$10.__extends(TimeMillisecondBuilder2, _super);
  function TimeMillisecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeMillisecondBuilder2;
}(TimeBuilder);
time$1.TimeMillisecondBuilder = TimeMillisecondBuilder;
var TimeMicrosecondBuilder = function(_super) {
  tslib_1$10.__extends(TimeMicrosecondBuilder2, _super);
  function TimeMicrosecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeMicrosecondBuilder2;
}(TimeBuilder);
time$1.TimeMicrosecondBuilder = TimeMicrosecondBuilder;
var TimeNanosecondBuilder = function(_super) {
  tslib_1$10.__extends(TimeNanosecondBuilder2, _super);
  function TimeNanosecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeNanosecondBuilder2;
}(TimeBuilder);
time$1.TimeNanosecondBuilder = TimeNanosecondBuilder;
var timestamp$1 = {};
Object.defineProperty(timestamp$1, "__esModule", { value: true });
timestamp$1.TimestampNanosecondBuilder = timestamp$1.TimestampMicrosecondBuilder = timestamp$1.TimestampMillisecondBuilder = timestamp$1.TimestampSecondBuilder = timestamp$1.TimestampBuilder = void 0;
var tslib_1$$ = tslib.exports;
var builder_1$8 = builder$1;
var TimestampBuilder = function(_super) {
  tslib_1$$.__extends(TimestampBuilder2, _super);
  function TimestampBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampBuilder2;
}(builder_1$8.FixedWidthBuilder);
timestamp$1.TimestampBuilder = TimestampBuilder;
var TimestampSecondBuilder = function(_super) {
  tslib_1$$.__extends(TimestampSecondBuilder2, _super);
  function TimestampSecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampSecondBuilder2;
}(TimestampBuilder);
timestamp$1.TimestampSecondBuilder = TimestampSecondBuilder;
var TimestampMillisecondBuilder = function(_super) {
  tslib_1$$.__extends(TimestampMillisecondBuilder2, _super);
  function TimestampMillisecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampMillisecondBuilder2;
}(TimestampBuilder);
timestamp$1.TimestampMillisecondBuilder = TimestampMillisecondBuilder;
var TimestampMicrosecondBuilder = function(_super) {
  tslib_1$$.__extends(TimestampMicrosecondBuilder2, _super);
  function TimestampMicrosecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampMicrosecondBuilder2;
}(TimestampBuilder);
timestamp$1.TimestampMicrosecondBuilder = TimestampMicrosecondBuilder;
var TimestampNanosecondBuilder = function(_super) {
  tslib_1$$.__extends(TimestampNanosecondBuilder2, _super);
  function TimestampNanosecondBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampNanosecondBuilder2;
}(TimestampBuilder);
timestamp$1.TimestampNanosecondBuilder = TimestampNanosecondBuilder;
var interval$1 = {};
Object.defineProperty(interval$1, "__esModule", { value: true });
interval$1.IntervalYearMonthBuilder = interval$1.IntervalDayTimeBuilder = interval$1.IntervalBuilder = void 0;
var tslib_1$_ = tslib.exports;
var builder_1$7 = builder$1;
var IntervalBuilder = function(_super) {
  tslib_1$_.__extends(IntervalBuilder2, _super);
  function IntervalBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalBuilder2;
}(builder_1$7.FixedWidthBuilder);
interval$1.IntervalBuilder = IntervalBuilder;
var IntervalDayTimeBuilder = function(_super) {
  tslib_1$_.__extends(IntervalDayTimeBuilder2, _super);
  function IntervalDayTimeBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalDayTimeBuilder2;
}(IntervalBuilder);
interval$1.IntervalDayTimeBuilder = IntervalDayTimeBuilder;
var IntervalYearMonthBuilder = function(_super) {
  tslib_1$_.__extends(IntervalYearMonthBuilder2, _super);
  function IntervalYearMonthBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalYearMonthBuilder2;
}(IntervalBuilder);
interval$1.IntervalYearMonthBuilder = IntervalYearMonthBuilder;
var utf8$1 = {};
var binary$1 = {};
Object.defineProperty(binary$1, "__esModule", { value: true });
binary$1.BinaryBuilder = void 0;
var tslib_1$Z = tslib.exports;
var buffer_1$e = buffer$1;
var buffer_2 = buffer;
var builder_1$6 = builder$1;
var BinaryBuilder = function(_super) {
  tslib_1$Z.__extends(BinaryBuilder2, _super);
  function BinaryBuilder2(opts) {
    var _this = _super.call(this, opts) || this;
    _this._values = new buffer_2.BufferBuilder(new Uint8Array(0));
    return _this;
  }
  Object.defineProperty(BinaryBuilder2.prototype, "byteLength", {
    get: function() {
      var size = this._pendingLength + this.length * 4;
      this._offsets && (size += this._offsets.byteLength);
      this._values && (size += this._values.byteLength);
      this._nulls && (size += this._nulls.byteLength);
      return size;
    },
    enumerable: false,
    configurable: true
  });
  BinaryBuilder2.prototype.setValue = function(index, value) {
    return _super.prototype.setValue.call(this, index, buffer_1$e.toUint8Array(value));
  };
  BinaryBuilder2.prototype._flushPending = function(pending, pendingLength) {
    var e_1, _a, _b;
    var offsets = this._offsets;
    var data2 = this._values.reserve(pendingLength).buffer;
    var index = 0, length = 0, offset = 0, value;
    try {
      for (var pending_1 = tslib_1$Z.__values(pending), pending_1_1 = pending_1.next(); !pending_1_1.done; pending_1_1 = pending_1.next()) {
        _b = tslib_1$Z.__read(pending_1_1.value, 2), index = _b[0], value = _b[1];
        if (value === void 0) {
          offsets.set(index, 0);
        } else {
          length = value.length;
          data2.set(value, offset);
          offsets.set(index, length);
          offset += length;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (pending_1_1 && !pending_1_1.done && (_a = pending_1.return))
          _a.call(pending_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  return BinaryBuilder2;
}(builder_1$6.VariableWidthBuilder);
binary$1.BinaryBuilder = BinaryBuilder;
Object.defineProperty(utf8$1, "__esModule", { value: true });
utf8$1.Utf8Builder = void 0;
var tslib_1$Y = tslib.exports;
var utf8_1$6 = utf8$2;
var binary_1$2 = binary$1;
var buffer_1$d = buffer;
var builder_1$5 = builder$1;
var Utf8Builder = function(_super) {
  tslib_1$Y.__extends(Utf8Builder2, _super);
  function Utf8Builder2(opts) {
    var _this = _super.call(this, opts) || this;
    _this._values = new buffer_1$d.BufferBuilder(new Uint8Array(0));
    return _this;
  }
  Object.defineProperty(Utf8Builder2.prototype, "byteLength", {
    get: function() {
      var size = this._pendingLength + this.length * 4;
      this._offsets && (size += this._offsets.byteLength);
      this._values && (size += this._values.byteLength);
      this._nulls && (size += this._nulls.byteLength);
      return size;
    },
    enumerable: false,
    configurable: true
  });
  Utf8Builder2.prototype.setValue = function(index, value) {
    return _super.prototype.setValue.call(this, index, utf8_1$6.encodeUtf8(value));
  };
  Utf8Builder2.prototype._flushPending = function(pending, pendingLength) {
  };
  return Utf8Builder2;
}(builder_1$5.VariableWidthBuilder);
utf8$1.Utf8Builder = Utf8Builder;
Utf8Builder.prototype._flushPending = binary_1$2.BinaryBuilder.prototype._flushPending;
var list$1 = {};
var run = {};
Object.defineProperty(run, "__esModule", { value: true });
run.Run = void 0;
var vector_1$h = vector$2;
var Run = function() {
  function Run2() {
  }
  Object.defineProperty(Run2.prototype, "length", {
    get: function() {
      return this._values.length;
    },
    enumerable: false,
    configurable: true
  });
  Run2.prototype.get = function(index) {
    return this._values[index];
  };
  Run2.prototype.clear = function() {
    this._values = null;
    return this;
  };
  Run2.prototype.bind = function(values) {
    if (values instanceof vector_1$h.Vector) {
      return values;
    }
    this._values = values;
    return this;
  };
  return Run2;
}();
run.Run = Run;
var schema = {};
Object.defineProperty(schema, "__esModule", { value: true });
schema.Field = schema.Schema = void 0;
var tslib_1$X = tslib.exports;
var type_1$p = type;
var Schema = function() {
  function Schema2(fields, metadata2, dictionaries) {
    if (fields === void 0) {
      fields = [];
    }
    this.fields = fields || [];
    this.metadata = metadata2 || new Map();
    if (!dictionaries) {
      dictionaries = generateDictionaryMap(fields);
    }
    this.dictionaries = dictionaries;
  }
  Object.defineProperty(Schema2.prototype, Symbol.toStringTag, {
    get: function() {
      return "Schema";
    },
    enumerable: false,
    configurable: true
  });
  Schema2.prototype.toString = function() {
    return "Schema<{ " + this.fields.map(function(f, i) {
      return i + ": " + f;
    }).join(", ") + " }>";
  };
  Schema2.prototype.select = function() {
    var columnNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnNames[_i] = arguments[_i];
    }
    var names = columnNames.reduce(function(xs, x) {
      return (xs[x] = true) && xs;
    }, Object.create(null));
    return new Schema2(this.fields.filter(function(f) {
      return names[f.name];
    }), this.metadata);
  };
  Schema2.prototype.selectAt = function() {
    var _this = this;
    var columnIndices = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnIndices[_i] = arguments[_i];
    }
    return new Schema2(columnIndices.map(function(i) {
      return _this.fields[i];
    }).filter(Boolean), this.metadata);
  };
  Schema2.prototype.assign = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var other = args2[0] instanceof Schema2 ? args2[0] : Array.isArray(args2[0]) ? new Schema2(args2[0]) : new Schema2(args2);
    var curFields = tslib_1$X.__spread(this.fields);
    var metadata2 = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);
    var newFields = other.fields.filter(function(f2) {
      var i = curFields.findIndex(function(f) {
        return f.name === f2.name;
      });
      return ~i ? (curFields[i] = f2.clone({
        metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)
      })) && false : true;
    });
    var newDictionaries = generateDictionaryMap(newFields, new Map());
    return new Schema2(tslib_1$X.__spread(curFields, newFields), metadata2, new Map(tslib_1$X.__spread(this.dictionaries, newDictionaries)));
  };
  return Schema2;
}();
schema.Schema = Schema;
var Field = function() {
  function Field2(name, type2, nullable, metadata2) {
    if (nullable === void 0) {
      nullable = false;
    }
    this.name = name;
    this.type = type2;
    this.nullable = nullable;
    this.metadata = metadata2 || new Map();
  }
  Field2.new = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _a = tslib_1$X.__read(args2, 4), name = _a[0], type2 = _a[1], nullable = _a[2], metadata2 = _a[3];
    if (args2[0] && typeof args2[0] === "object") {
      name = args2[0].name;
      type2 === void 0 && (type2 = args2[0].type);
      nullable === void 0 && (nullable = args2[0].nullable);
      metadata2 === void 0 && (metadata2 = args2[0].metadata);
    }
    return new Field2("" + name, type2, nullable, metadata2);
  };
  Object.defineProperty(Field2.prototype, "typeId", {
    get: function() {
      return this.type.typeId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Field2.prototype, Symbol.toStringTag, {
    get: function() {
      return "Field";
    },
    enumerable: false,
    configurable: true
  });
  Field2.prototype.toString = function() {
    return this.name + ": " + this.type;
  };
  Field2.prototype.clone = function() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _l = tslib_1$X.__read(args2, 4), name = _l[0], type2 = _l[1], nullable = _l[2], metadata2 = _l[3];
    !args2[0] || typeof args2[0] !== "object" ? (_a = tslib_1$X.__read(args2, 4), _b = _a[0], name = _b === void 0 ? this.name : _b, _c = _a[1], type2 = _c === void 0 ? this.type : _c, _d = _a[2], nullable = _d === void 0 ? this.nullable : _d, _e = _a[3], metadata2 = _e === void 0 ? this.metadata : _e, args2) : (_f = args2[0], _g = _f.name, name = _g === void 0 ? this.name : _g, _h = _f.type, type2 = _h === void 0 ? this.type : _h, _j = _f.nullable, nullable = _j === void 0 ? this.nullable : _j, _k = _f.metadata, metadata2 = _k === void 0 ? this.metadata : _k, _f);
    return Field2.new(name, type2, nullable, metadata2);
  };
  return Field2;
}();
schema.Field = Field;
function mergeMaps(m1, m2) {
  return new Map(tslib_1$X.__spread(m1 || new Map(), m2 || new Map()));
}
function generateDictionaryMap(fields, dictionaries) {
  if (dictionaries === void 0) {
    dictionaries = new Map();
  }
  for (var i = -1, n = fields.length; ++i < n; ) {
    var field = fields[i];
    var type2 = field.type;
    if (type_1$p.DataType.isDictionary(type2)) {
      if (!dictionaries.has(type2.id)) {
        dictionaries.set(type2.id, type2.dictionary);
      } else if (dictionaries.get(type2.id) !== type2.dictionary) {
        throw new Error("Cannot create Schema containing two different dictionaries with the same Id");
      }
    }
    if (type2.children && type2.children.length > 0) {
      generateDictionaryMap(type2.children, dictionaries);
    }
  }
  return dictionaries;
}
Schema.prototype.fields = null;
Schema.prototype.metadata = null;
Schema.prototype.dictionaries = null;
Field.prototype.type = null;
Field.prototype.name = null;
Field.prototype.nullable = null;
Field.prototype.metadata = null;
Object.defineProperty(list$1, "__esModule", { value: true });
list$1.ListBuilder = void 0;
var tslib_1$W = tslib.exports;
var run_1$1 = run;
var schema_1$f = schema;
var type_1$o = type;
var buffer_1$c = buffer;
var builder_1$4 = builder$1;
var ListBuilder = function(_super) {
  tslib_1$W.__extends(ListBuilder2, _super);
  function ListBuilder2(opts) {
    var _this = _super.call(this, opts) || this;
    _this._run = new run_1$1.Run();
    _this._offsets = new buffer_1$c.OffsetsBufferBuilder();
    return _this;
  }
  ListBuilder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "0";
    }
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new type_1$o.List(new schema_1$f.Field(name, child.type, true));
    return this.numChildren - 1;
  };
  ListBuilder2.prototype.clear = function() {
    this._run.clear();
    return _super.prototype.clear.call(this);
  };
  ListBuilder2.prototype._flushPending = function(pending) {
    var e_1, _a, _b;
    var run2 = this._run;
    var offsets = this._offsets;
    var setValue = this._setValue;
    var index = 0, value;
    try {
      for (var pending_1 = tslib_1$W.__values(pending), pending_1_1 = pending_1.next(); !pending_1_1.done; pending_1_1 = pending_1.next()) {
        _b = tslib_1$W.__read(pending_1_1.value, 2), index = _b[0], value = _b[1];
        if (value === void 0) {
          offsets.set(index, 0);
        } else {
          offsets.set(index, value.length);
          setValue(this, index, run2.bind(value));
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (pending_1_1 && !pending_1_1.done && (_a = pending_1.return))
          _a.call(pending_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  return ListBuilder2;
}(builder_1$4.VariableWidthBuilder);
list$1.ListBuilder = ListBuilder;
var fixedsizelist$1 = {};
Object.defineProperty(fixedsizelist$1, "__esModule", { value: true });
fixedsizelist$1.FixedSizeListBuilder = void 0;
var tslib_1$V = tslib.exports;
var run_1 = run;
var schema_1$e = schema;
var builder_1$3 = builder$1;
var type_1$n = type;
var FixedSizeListBuilder = function(_super) {
  tslib_1$V.__extends(FixedSizeListBuilder2, _super);
  function FixedSizeListBuilder2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._run = new run_1.Run();
    return _this;
  }
  FixedSizeListBuilder2.prototype.setValue = function(index, value) {
    _super.prototype.setValue.call(this, index, this._run.bind(value));
  };
  FixedSizeListBuilder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "0";
    }
    if (this.numChildren > 0) {
      throw new Error("FixedSizeListBuilder can only have one child.");
    }
    var childIndex = this.children.push(child);
    this.type = new type_1$n.FixedSizeList(this.type.listSize, new schema_1$e.Field(name, child.type, true));
    return childIndex;
  };
  FixedSizeListBuilder2.prototype.clear = function() {
    this._run.clear();
    return _super.prototype.clear.call(this);
  };
  return FixedSizeListBuilder2;
}(builder_1$3.Builder);
fixedsizelist$1.FixedSizeListBuilder = FixedSizeListBuilder;
var map$1 = {};
Object.defineProperty(map$1, "__esModule", { value: true });
map$1.MapBuilder = void 0;
var tslib_1$U = tslib.exports;
var schema_1$d = schema;
var type_1$m = type;
var builder_1$2 = builder$1;
var MapBuilder = function(_super) {
  tslib_1$U.__extends(MapBuilder2, _super);
  function MapBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MapBuilder2.prototype.set = function(index, value) {
    return _super.prototype.set.call(this, index, value);
  };
  MapBuilder2.prototype.setValue = function(index, value) {
    value = value instanceof Map ? value : new Map(Object.entries(value));
    var pending = this._pending || (this._pending = new Map());
    var current = pending.get(index);
    current && (this._pendingLength -= current.size);
    this._pendingLength += value.size;
    pending.set(index, value);
  };
  MapBuilder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "" + this.numChildren;
    }
    if (this.numChildren > 0) {
      throw new Error("ListBuilder can only have one child.");
    }
    this.children[this.numChildren] = child;
    this.type = new type_1$m.Map_(new schema_1$d.Field(name, child.type, true), this.type.keysSorted);
    return this.numChildren - 1;
  };
  MapBuilder2.prototype._flushPending = function(pending) {
    var _this = this;
    var offsets = this._offsets;
    var setValue = this._setValue;
    pending.forEach(function(value, index) {
      if (value === void 0) {
        offsets.set(index, 0);
      } else {
        offsets.set(index, value.size);
        setValue(_this, index, value);
      }
    });
  };
  return MapBuilder2;
}(builder_1$2.VariableWidthBuilder);
map$1.MapBuilder = MapBuilder;
var struct$1 = {};
Object.defineProperty(struct$1, "__esModule", { value: true });
struct$1.StructBuilder = void 0;
var tslib_1$T = tslib.exports;
var schema_1$c = schema;
var builder_1$1 = builder$1;
var type_1$l = type;
var StructBuilder = function(_super) {
  tslib_1$T.__extends(StructBuilder2, _super);
  function StructBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StructBuilder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "" + this.numChildren;
    }
    var childIndex = this.children.push(child);
    this.type = new type_1$l.Struct(tslib_1$T.__spread(this.type.children, [new schema_1$c.Field(name, child.type, true)]));
    return childIndex;
  };
  return StructBuilder2;
}(builder_1$1.Builder);
struct$1.StructBuilder = StructBuilder;
var union$1 = {};
Object.defineProperty(union$1, "__esModule", { value: true });
union$1.DenseUnionBuilder = union$1.SparseUnionBuilder = union$1.UnionBuilder = void 0;
var tslib_1$S = tslib.exports;
var schema_1$b = schema;
var buffer_1$b = buffer;
var builder_1 = builder$1;
var type_1$k = type;
var UnionBuilder = function(_super) {
  tslib_1$S.__extends(UnionBuilder2, _super);
  function UnionBuilder2(options) {
    var _this = _super.call(this, options) || this;
    _this._typeIds = new buffer_1$b.DataBufferBuilder(new Int8Array(0), 1);
    if (typeof options["valueToChildTypeId"] === "function") {
      _this._valueToChildTypeId = options["valueToChildTypeId"];
    }
    return _this;
  }
  Object.defineProperty(UnionBuilder2.prototype, "typeIdToChildIndex", {
    get: function() {
      return this.type.typeIdToChildIndex;
    },
    enumerable: false,
    configurable: true
  });
  UnionBuilder2.prototype.append = function(value, childTypeId) {
    return this.set(this.length, value, childTypeId);
  };
  UnionBuilder2.prototype.set = function(index, value, childTypeId) {
    if (childTypeId === void 0) {
      childTypeId = this._valueToChildTypeId(this, value, index);
    }
    if (this.setValid(index, this.isValid(value))) {
      this.setValue(index, value, childTypeId);
    }
    return this;
  };
  UnionBuilder2.prototype.setValue = function(index, value, childTypeId) {
    this._typeIds.set(index, childTypeId);
    _super.prototype.setValue.call(this, index, value);
  };
  UnionBuilder2.prototype.addChild = function(child, name) {
    if (name === void 0) {
      name = "" + this.children.length;
    }
    var childTypeId = this.children.push(child);
    var _a = this.type, children2 = _a.children, mode = _a.mode, typeIds = _a.typeIds;
    var fields = tslib_1$S.__spread(children2, [new schema_1$b.Field(name, child.type)]);
    this.type = new type_1$k.Union(mode, tslib_1$S.__spread(typeIds, [childTypeId]), fields);
    return childTypeId;
  };
  UnionBuilder2.prototype._valueToChildTypeId = function(builder2, value, offset) {
    throw new Error("Cannot map UnionBuilder value to child typeId. Pass the `childTypeId` as the second argument to unionBuilder.append(), or supply a `valueToChildTypeId` function as part of the UnionBuilder constructor options.");
  };
  return UnionBuilder2;
}(builder_1.Builder);
union$1.UnionBuilder = UnionBuilder;
var SparseUnionBuilder = function(_super) {
  tslib_1$S.__extends(SparseUnionBuilder2, _super);
  function SparseUnionBuilder2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return SparseUnionBuilder2;
}(UnionBuilder);
union$1.SparseUnionBuilder = SparseUnionBuilder;
var DenseUnionBuilder = function(_super) {
  tslib_1$S.__extends(DenseUnionBuilder2, _super);
  function DenseUnionBuilder2(options) {
    var _this = _super.call(this, options) || this;
    _this._offsets = new buffer_1$b.DataBufferBuilder(new Int32Array(0));
    return _this;
  }
  DenseUnionBuilder2.prototype.setValue = function(index, value, childTypeId) {
    var childIndex = this.type.typeIdToChildIndex[childTypeId];
    this._offsets.set(index, this.getChildAt(childIndex).length);
    return _super.prototype.setValue.call(this, index, value, childTypeId);
  };
  return DenseUnionBuilder2;
}(UnionBuilder);
union$1.DenseUnionBuilder = DenseUnionBuilder;
var set = {};
var visitor = {};
Object.defineProperty(visitor, "__esModule", { value: true });
visitor.Visitor = void 0;
var tslib_1$R = tslib.exports;
var data_1$7 = data;
var vector_1$g = vector$2;
var enum_1$g = _enum;
var type_1$j = type;
var Visitor = function() {
  function Visitor2() {
  }
  Visitor2.prototype.visitMany = function(nodes) {
    var _this = this;
    var args2 = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args2[_i - 1] = arguments[_i];
    }
    return nodes.map(function(node, i) {
      return _this.visit.apply(_this, tslib_1$R.__spread([node], args2.map(function(x) {
        return x[i];
      })));
    });
  };
  Visitor2.prototype.visit = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return this.getVisitFn(args2[0], false).apply(this, args2);
  };
  Visitor2.prototype.getVisitFn = function(node, throwIfNotFound) {
    if (throwIfNotFound === void 0) {
      throwIfNotFound = true;
    }
    return getVisitFn(this, node, throwIfNotFound);
  };
  Visitor2.prototype.visitNull = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitBool = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitInt = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitFloat = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitUtf8 = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitBinary = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitFixedSizeBinary = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitDate = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitTimestamp = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitTime = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitDecimal = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitList = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitStruct = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitUnion = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitDictionary = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitInterval = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitFixedSizeList = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  Visitor2.prototype.visitMap = function(_node) {
    var _args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      _args[_i - 1] = arguments[_i];
    }
    return null;
  };
  return Visitor2;
}();
visitor.Visitor = Visitor;
function getVisitFn(visitor2, node, throwIfNotFound) {
  if (throwIfNotFound === void 0) {
    throwIfNotFound = true;
  }
  var fn2 = null;
  var dtype = enum_1$g.Type.NONE;
  if (node instanceof data_1$7.Data)
    dtype = inferDType(node.type);
  else if (node instanceof vector_1$g.Vector)
    dtype = inferDType(node.type);
  else if (node instanceof type_1$j.DataType)
    dtype = inferDType(node);
  else if (typeof (dtype = node) !== "number")
    dtype = enum_1$g.Type[node];
  switch (dtype) {
    case enum_1$g.Type.Null:
      fn2 = visitor2.visitNull;
      break;
    case enum_1$g.Type.Bool:
      fn2 = visitor2.visitBool;
      break;
    case enum_1$g.Type.Int:
      fn2 = visitor2.visitInt;
      break;
    case enum_1$g.Type.Int8:
      fn2 = visitor2.visitInt8 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Int16:
      fn2 = visitor2.visitInt16 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Int32:
      fn2 = visitor2.visitInt32 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Int64:
      fn2 = visitor2.visitInt64 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Uint8:
      fn2 = visitor2.visitUint8 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Uint16:
      fn2 = visitor2.visitUint16 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Uint32:
      fn2 = visitor2.visitUint32 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Uint64:
      fn2 = visitor2.visitUint64 || visitor2.visitInt;
      break;
    case enum_1$g.Type.Float:
      fn2 = visitor2.visitFloat;
      break;
    case enum_1$g.Type.Float16:
      fn2 = visitor2.visitFloat16 || visitor2.visitFloat;
      break;
    case enum_1$g.Type.Float32:
      fn2 = visitor2.visitFloat32 || visitor2.visitFloat;
      break;
    case enum_1$g.Type.Float64:
      fn2 = visitor2.visitFloat64 || visitor2.visitFloat;
      break;
    case enum_1$g.Type.Utf8:
      fn2 = visitor2.visitUtf8;
      break;
    case enum_1$g.Type.Binary:
      fn2 = visitor2.visitBinary;
      break;
    case enum_1$g.Type.FixedSizeBinary:
      fn2 = visitor2.visitFixedSizeBinary;
      break;
    case enum_1$g.Type.Date:
      fn2 = visitor2.visitDate;
      break;
    case enum_1$g.Type.DateDay:
      fn2 = visitor2.visitDateDay || visitor2.visitDate;
      break;
    case enum_1$g.Type.DateMillisecond:
      fn2 = visitor2.visitDateMillisecond || visitor2.visitDate;
      break;
    case enum_1$g.Type.Timestamp:
      fn2 = visitor2.visitTimestamp;
      break;
    case enum_1$g.Type.TimestampSecond:
      fn2 = visitor2.visitTimestampSecond || visitor2.visitTimestamp;
      break;
    case enum_1$g.Type.TimestampMillisecond:
      fn2 = visitor2.visitTimestampMillisecond || visitor2.visitTimestamp;
      break;
    case enum_1$g.Type.TimestampMicrosecond:
      fn2 = visitor2.visitTimestampMicrosecond || visitor2.visitTimestamp;
      break;
    case enum_1$g.Type.TimestampNanosecond:
      fn2 = visitor2.visitTimestampNanosecond || visitor2.visitTimestamp;
      break;
    case enum_1$g.Type.Time:
      fn2 = visitor2.visitTime;
      break;
    case enum_1$g.Type.TimeSecond:
      fn2 = visitor2.visitTimeSecond || visitor2.visitTime;
      break;
    case enum_1$g.Type.TimeMillisecond:
      fn2 = visitor2.visitTimeMillisecond || visitor2.visitTime;
      break;
    case enum_1$g.Type.TimeMicrosecond:
      fn2 = visitor2.visitTimeMicrosecond || visitor2.visitTime;
      break;
    case enum_1$g.Type.TimeNanosecond:
      fn2 = visitor2.visitTimeNanosecond || visitor2.visitTime;
      break;
    case enum_1$g.Type.Decimal:
      fn2 = visitor2.visitDecimal;
      break;
    case enum_1$g.Type.List:
      fn2 = visitor2.visitList;
      break;
    case enum_1$g.Type.Struct:
      fn2 = visitor2.visitStruct;
      break;
    case enum_1$g.Type.Union:
      fn2 = visitor2.visitUnion;
      break;
    case enum_1$g.Type.DenseUnion:
      fn2 = visitor2.visitDenseUnion || visitor2.visitUnion;
      break;
    case enum_1$g.Type.SparseUnion:
      fn2 = visitor2.visitSparseUnion || visitor2.visitUnion;
      break;
    case enum_1$g.Type.Dictionary:
      fn2 = visitor2.visitDictionary;
      break;
    case enum_1$g.Type.Interval:
      fn2 = visitor2.visitInterval;
      break;
    case enum_1$g.Type.IntervalDayTime:
      fn2 = visitor2.visitIntervalDayTime || visitor2.visitInterval;
      break;
    case enum_1$g.Type.IntervalYearMonth:
      fn2 = visitor2.visitIntervalYearMonth || visitor2.visitInterval;
      break;
    case enum_1$g.Type.FixedSizeList:
      fn2 = visitor2.visitFixedSizeList;
      break;
    case enum_1$g.Type.Map:
      fn2 = visitor2.visitMap;
      break;
  }
  if (typeof fn2 === "function")
    return fn2;
  if (!throwIfNotFound)
    return function() {
      return null;
    };
  throw new Error("Unrecognized type '" + enum_1$g.Type[dtype] + "'");
}
function inferDType(type2) {
  switch (type2.typeId) {
    case enum_1$g.Type.Null:
      return enum_1$g.Type.Null;
    case enum_1$g.Type.Int: {
      var _a = type2, bitWidth = _a.bitWidth, isSigned = _a.isSigned;
      switch (bitWidth) {
        case 8:
          return isSigned ? enum_1$g.Type.Int8 : enum_1$g.Type.Uint8;
        case 16:
          return isSigned ? enum_1$g.Type.Int16 : enum_1$g.Type.Uint16;
        case 32:
          return isSigned ? enum_1$g.Type.Int32 : enum_1$g.Type.Uint32;
        case 64:
          return isSigned ? enum_1$g.Type.Int64 : enum_1$g.Type.Uint64;
      }
      return enum_1$g.Type.Int;
    }
    case enum_1$g.Type.Float:
      switch (type2.precision) {
        case enum_1$g.Precision.HALF:
          return enum_1$g.Type.Float16;
        case enum_1$g.Precision.SINGLE:
          return enum_1$g.Type.Float32;
        case enum_1$g.Precision.DOUBLE:
          return enum_1$g.Type.Float64;
      }
      return enum_1$g.Type.Float;
    case enum_1$g.Type.Binary:
      return enum_1$g.Type.Binary;
    case enum_1$g.Type.Utf8:
      return enum_1$g.Type.Utf8;
    case enum_1$g.Type.Bool:
      return enum_1$g.Type.Bool;
    case enum_1$g.Type.Decimal:
      return enum_1$g.Type.Decimal;
    case enum_1$g.Type.Time:
      switch (type2.unit) {
        case enum_1$g.TimeUnit.SECOND:
          return enum_1$g.Type.TimeSecond;
        case enum_1$g.TimeUnit.MILLISECOND:
          return enum_1$g.Type.TimeMillisecond;
        case enum_1$g.TimeUnit.MICROSECOND:
          return enum_1$g.Type.TimeMicrosecond;
        case enum_1$g.TimeUnit.NANOSECOND:
          return enum_1$g.Type.TimeNanosecond;
      }
      return enum_1$g.Type.Time;
    case enum_1$g.Type.Timestamp:
      switch (type2.unit) {
        case enum_1$g.TimeUnit.SECOND:
          return enum_1$g.Type.TimestampSecond;
        case enum_1$g.TimeUnit.MILLISECOND:
          return enum_1$g.Type.TimestampMillisecond;
        case enum_1$g.TimeUnit.MICROSECOND:
          return enum_1$g.Type.TimestampMicrosecond;
        case enum_1$g.TimeUnit.NANOSECOND:
          return enum_1$g.Type.TimestampNanosecond;
      }
      return enum_1$g.Type.Timestamp;
    case enum_1$g.Type.Date:
      switch (type2.unit) {
        case enum_1$g.DateUnit.DAY:
          return enum_1$g.Type.DateDay;
        case enum_1$g.DateUnit.MILLISECOND:
          return enum_1$g.Type.DateMillisecond;
      }
      return enum_1$g.Type.Date;
    case enum_1$g.Type.Interval:
      switch (type2.unit) {
        case enum_1$g.IntervalUnit.DAY_TIME:
          return enum_1$g.Type.IntervalDayTime;
        case enum_1$g.IntervalUnit.YEAR_MONTH:
          return enum_1$g.Type.IntervalYearMonth;
      }
      return enum_1$g.Type.Interval;
    case enum_1$g.Type.Map:
      return enum_1$g.Type.Map;
    case enum_1$g.Type.List:
      return enum_1$g.Type.List;
    case enum_1$g.Type.Struct:
      return enum_1$g.Type.Struct;
    case enum_1$g.Type.Union:
      switch (type2.mode) {
        case enum_1$g.UnionMode.Dense:
          return enum_1$g.Type.DenseUnion;
        case enum_1$g.UnionMode.Sparse:
          return enum_1$g.Type.SparseUnion;
      }
      return enum_1$g.Type.Union;
    case enum_1$g.Type.FixedSizeBinary:
      return enum_1$g.Type.FixedSizeBinary;
    case enum_1$g.Type.FixedSizeList:
      return enum_1$g.Type.FixedSizeList;
    case enum_1$g.Type.Dictionary:
      return enum_1$g.Type.Dictionary;
  }
  throw new Error("Unrecognized type '" + enum_1$g.Type[type2.typeId] + "'");
}
Visitor.prototype.visitInt8 = null;
Visitor.prototype.visitInt16 = null;
Visitor.prototype.visitInt32 = null;
Visitor.prototype.visitInt64 = null;
Visitor.prototype.visitUint8 = null;
Visitor.prototype.visitUint16 = null;
Visitor.prototype.visitUint32 = null;
Visitor.prototype.visitUint64 = null;
Visitor.prototype.visitFloat16 = null;
Visitor.prototype.visitFloat32 = null;
Visitor.prototype.visitFloat64 = null;
Visitor.prototype.visitDateDay = null;
Visitor.prototype.visitDateMillisecond = null;
Visitor.prototype.visitTimestampSecond = null;
Visitor.prototype.visitTimestampMillisecond = null;
Visitor.prototype.visitTimestampMicrosecond = null;
Visitor.prototype.visitTimestampNanosecond = null;
Visitor.prototype.visitTimeSecond = null;
Visitor.prototype.visitTimeMillisecond = null;
Visitor.prototype.visitTimeMicrosecond = null;
Visitor.prototype.visitTimeNanosecond = null;
Visitor.prototype.visitDenseUnion = null;
Visitor.prototype.visitSparseUnion = null;
Visitor.prototype.visitIntervalDayTime = null;
Visitor.prototype.visitIntervalYearMonth = null;
Object.defineProperty(set, "__esModule", { value: true });
set.instance = set.SetVisitor = void 0;
var tslib_1$Q = tslib.exports;
var vector_1$f = vector$2;
var visitor_1$d = visitor;
var utf8_1$5 = utf8$2;
var math_1$1 = math;
var buffer_1$a = buffer$1;
var enum_1$f = _enum;
var SetVisitor = function(_super) {
  tslib_1$Q.__extends(SetVisitor2, _super);
  function SetVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return SetVisitor2;
}(visitor_1$d.Visitor);
set.SetVisitor = SetVisitor;
var setEpochMsToDays = function(data2, index, epochMs) {
  data2[index] = epochMs / 864e5 | 0;
};
var setEpochMsToMillisecondsLong = function(data2, index, epochMs) {
  data2[index] = epochMs % 4294967296 | 0;
  data2[index + 1] = epochMs / 4294967296 | 0;
};
var setEpochMsToMicrosecondsLong = function(data2, index, epochMs) {
  data2[index] = epochMs * 1e3 % 4294967296 | 0;
  data2[index + 1] = epochMs * 1e3 / 4294967296 | 0;
};
var setEpochMsToNanosecondsLong = function(data2, index, epochMs) {
  data2[index] = epochMs * 1e6 % 4294967296 | 0;
  data2[index + 1] = epochMs * 1e6 / 4294967296 | 0;
};
var setVariableWidthBytes = function(values, valueOffsets, index, value) {
  var _a = valueOffsets, _b = index, x = _a[_b], _c = index + 1, y = _a[_c];
  if (x != null && y != null) {
    values.set(value.subarray(0, y - x), x);
  }
};
var setBool = function(_a, index, val) {
  var offset = _a.offset, values = _a.values;
  var idx = offset + index;
  val ? values[idx >> 3] |= 1 << idx % 8 : values[idx >> 3] &= ~(1 << idx % 8);
};
var setDateDay = function(_a, index, value) {
  var values = _a.values;
  setEpochMsToDays(values, index, value.valueOf());
};
var setDateMillisecond = function(_a, index, value) {
  var values = _a.values;
  setEpochMsToMillisecondsLong(values, index * 2, value.valueOf());
};
var setNumeric = function(_a, index, value) {
  var stride = _a.stride, values = _a.values;
  values[stride * index] = value;
};
var setFloat16 = function(_a, index, value) {
  var stride = _a.stride, values = _a.values;
  values[stride * index] = math_1$1.float64ToUint16(value);
};
var setNumericX2 = function(vector2, index, value) {
  switch (typeof value) {
    case "bigint":
      vector2.values64[index] = value;
      break;
    case "number":
      vector2.values[index * vector2.stride] = value;
      break;
    default: {
      var val = value;
      var stride = vector2.stride, ArrayType = vector2.ArrayType;
      var long = buffer_1$a.toArrayBufferView(ArrayType, val);
      vector2.values.set(long.subarray(0, stride), stride * index);
    }
  }
};
var setFixedSizeBinary = function(_a, index, value) {
  var stride = _a.stride, values = _a.values;
  values.set(value.subarray(0, stride), stride * index);
};
var setBinary = function(_a, index, value) {
  var values = _a.values, valueOffsets = _a.valueOffsets;
  return setVariableWidthBytes(values, valueOffsets, index, value);
};
var setUtf8 = function(_a, index, value) {
  var values = _a.values, valueOffsets = _a.valueOffsets;
  setVariableWidthBytes(values, valueOffsets, index, utf8_1$5.encodeUtf8(value));
};
var setInt = function(vector2, index, value) {
  vector2.type.bitWidth < 64 ? setNumeric(vector2, index, value) : setNumericX2(vector2, index, value);
};
var setFloat = function(vector2, index, value) {
  vector2.type.precision !== enum_1$f.Precision.HALF ? setNumeric(vector2, index, value) : setFloat16(vector2, index, value);
};
var setDate = function(vector2, index, value) {
  vector2.type.unit === enum_1$f.DateUnit.DAY ? setDateDay(vector2, index, value) : setDateMillisecond(vector2, index, value);
};
var setTimestampSecond = function(_a, index, value) {
  var values = _a.values;
  return setEpochMsToMillisecondsLong(values, index * 2, value / 1e3);
};
var setTimestampMillisecond = function(_a, index, value) {
  var values = _a.values;
  return setEpochMsToMillisecondsLong(values, index * 2, value);
};
var setTimestampMicrosecond = function(_a, index, value) {
  var values = _a.values;
  return setEpochMsToMicrosecondsLong(values, index * 2, value);
};
var setTimestampNanosecond = function(_a, index, value) {
  var values = _a.values;
  return setEpochMsToNanosecondsLong(values, index * 2, value);
};
var setTimestamp = function(vector2, index, value) {
  switch (vector2.type.unit) {
    case enum_1$f.TimeUnit.SECOND:
      return setTimestampSecond(vector2, index, value);
    case enum_1$f.TimeUnit.MILLISECOND:
      return setTimestampMillisecond(vector2, index, value);
    case enum_1$f.TimeUnit.MICROSECOND:
      return setTimestampMicrosecond(vector2, index, value);
    case enum_1$f.TimeUnit.NANOSECOND:
      return setTimestampNanosecond(vector2, index, value);
  }
};
var setTimeSecond = function(_a, index, value) {
  var values = _a.values, stride = _a.stride;
  values[stride * index] = value;
};
var setTimeMillisecond = function(_a, index, value) {
  var values = _a.values, stride = _a.stride;
  values[stride * index] = value;
};
var setTimeMicrosecond = function(_a, index, value) {
  var values = _a.values;
  values.set(value.subarray(0, 2), 2 * index);
};
var setTimeNanosecond = function(_a, index, value) {
  var values = _a.values;
  values.set(value.subarray(0, 2), 2 * index);
};
var setTime = function(vector2, index, value) {
  switch (vector2.type.unit) {
    case enum_1$f.TimeUnit.SECOND:
      return setTimeSecond(vector2, index, value);
    case enum_1$f.TimeUnit.MILLISECOND:
      return setTimeMillisecond(vector2, index, value);
    case enum_1$f.TimeUnit.MICROSECOND:
      return setTimeMicrosecond(vector2, index, value);
    case enum_1$f.TimeUnit.NANOSECOND:
      return setTimeNanosecond(vector2, index, value);
  }
};
var setDecimal = function(_a, index, value) {
  var values = _a.values;
  values.set(value.subarray(0, 4), 4 * index);
};
var setList = function(vector2, index, value) {
  var values = vector2.getChildAt(0), valueOffsets = vector2.valueOffsets;
  for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end; ) {
    values.set(itr++, value.get(++idx));
  }
};
var setMap = function(vector2, index, value) {
  var values = vector2.getChildAt(0), valueOffsets = vector2.valueOffsets;
  var entries = value instanceof Map ? tslib_1$Q.__spread(value) : Object.entries(value);
  for (var idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end; ) {
    values.set(itr++, entries[++idx]);
  }
};
var _setStructArrayValue = function(o, v) {
  return function(c2, _, i) {
    return c2 === null || c2 === void 0 ? void 0 : c2.set(o, v[i]);
  };
};
var _setStructVectorValue = function(o, v) {
  return function(c2, _, i) {
    return c2 === null || c2 === void 0 ? void 0 : c2.set(o, v.get(i));
  };
};
var _setStructMapValue = function(o, v) {
  return function(c2, f, _) {
    return c2 === null || c2 === void 0 ? void 0 : c2.set(o, v.get(f.name));
  };
};
var _setStructObjectValue = function(o, v) {
  return function(c2, f, _) {
    return c2 === null || c2 === void 0 ? void 0 : c2.set(o, v[f.name]);
  };
};
var setStruct = function(vector2, index, value) {
  var setValue = value instanceof Map ? _setStructMapValue(index, value) : value instanceof vector_1$f.Vector ? _setStructVectorValue(index, value) : Array.isArray(value) ? _setStructArrayValue(index, value) : _setStructObjectValue(index, value);
  vector2.type.children.forEach(function(f, i) {
    return setValue(vector2.getChildAt(i), f, i);
  });
};
var setUnion = function(vector2, index, value) {
  vector2.type.mode === enum_1$f.UnionMode.Dense ? setDenseUnion(vector2, index, value) : setSparseUnion(vector2, index, value);
};
var setDenseUnion = function(vector2, index, value) {
  var childIndex = vector2.typeIdToChildIndex[vector2.typeIds[index]];
  var child = vector2.getChildAt(childIndex);
  child && child.set(vector2.valueOffsets[index], value);
};
var setSparseUnion = function(vector2, index, value) {
  var childIndex = vector2.typeIdToChildIndex[vector2.typeIds[index]];
  var child = vector2.getChildAt(childIndex);
  child && child.set(index, value);
};
var setDictionary = function(vector2, index, value) {
  var key = vector2.getKey(index);
  if (key !== null) {
    vector2.setValue(key, value);
  }
};
var setIntervalValue = function(vector2, index, value) {
  vector2.type.unit === enum_1$f.IntervalUnit.DAY_TIME ? setIntervalDayTime(vector2, index, value) : setIntervalYearMonth(vector2, index, value);
};
var setIntervalDayTime = function(_a, index, value) {
  var values = _a.values;
  values.set(value.subarray(0, 2), 2 * index);
};
var setIntervalYearMonth = function(_a, index, value) {
  var values = _a.values;
  values[index] = value[0] * 12 + value[1] % 12;
};
var setFixedSizeList = function(vector2, index, value) {
  var child = vector2.getChildAt(0), stride = vector2.stride;
  for (var idx = -1, offset = index * stride; ++idx < stride; ) {
    child.set(offset + idx, value.get(idx));
  }
};
SetVisitor.prototype.visitBool = setBool;
SetVisitor.prototype.visitInt = setInt;
SetVisitor.prototype.visitInt8 = setNumeric;
SetVisitor.prototype.visitInt16 = setNumeric;
SetVisitor.prototype.visitInt32 = setNumeric;
SetVisitor.prototype.visitInt64 = setNumericX2;
SetVisitor.prototype.visitUint8 = setNumeric;
SetVisitor.prototype.visitUint16 = setNumeric;
SetVisitor.prototype.visitUint32 = setNumeric;
SetVisitor.prototype.visitUint64 = setNumericX2;
SetVisitor.prototype.visitFloat = setFloat;
SetVisitor.prototype.visitFloat16 = setFloat16;
SetVisitor.prototype.visitFloat32 = setNumeric;
SetVisitor.prototype.visitFloat64 = setNumeric;
SetVisitor.prototype.visitUtf8 = setUtf8;
SetVisitor.prototype.visitBinary = setBinary;
SetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;
SetVisitor.prototype.visitDate = setDate;
SetVisitor.prototype.visitDateDay = setDateDay;
SetVisitor.prototype.visitDateMillisecond = setDateMillisecond;
SetVisitor.prototype.visitTimestamp = setTimestamp;
SetVisitor.prototype.visitTimestampSecond = setTimestampSecond;
SetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;
SetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;
SetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;
SetVisitor.prototype.visitTime = setTime;
SetVisitor.prototype.visitTimeSecond = setTimeSecond;
SetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;
SetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;
SetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;
SetVisitor.prototype.visitDecimal = setDecimal;
SetVisitor.prototype.visitList = setList;
SetVisitor.prototype.visitStruct = setStruct;
SetVisitor.prototype.visitUnion = setUnion;
SetVisitor.prototype.visitDenseUnion = setDenseUnion;
SetVisitor.prototype.visitSparseUnion = setSparseUnion;
SetVisitor.prototype.visitDictionary = setDictionary;
SetVisitor.prototype.visitInterval = setIntervalValue;
SetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;
SetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;
SetVisitor.prototype.visitFixedSizeList = setFixedSizeList;
SetVisitor.prototype.visitMap = setMap;
set.instance = new SetVisitor();
var builderctor = {};
Object.defineProperty(builderctor, "__esModule", { value: true });
builderctor.instance = builderctor.GetBuilderCtor = void 0;
var tslib_1$P = tslib.exports;
var visitor_1$c = visitor;
var binary_1$1 = binary$1;
var bool_1$1 = bool$1;
var date_1$1 = date$1;
var decimal_1$1 = decimal$1;
var dictionary_1$2 = dictionary$1;
var fixedsizebinary_1$1 = fixedsizebinary$1;
var fixedsizelist_1$1 = fixedsizelist$1;
var float_1$1 = float$1;
var interval_1$1 = interval$1;
var int_1$3 = int$2;
var list_1$1 = list$1;
var map_1$1 = map$1;
var null_1$1 = _null$1;
var struct_1$1 = struct$1;
var timestamp_1$1 = timestamp$1;
var time_1$1 = time$1;
var union_1$1 = union$1;
var utf8_1$4 = utf8$1;
var GetBuilderCtor = function(_super) {
  tslib_1$P.__extends(GetBuilderCtor2, _super);
  function GetBuilderCtor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GetBuilderCtor2.prototype.visitNull = function() {
    return null_1$1.NullBuilder;
  };
  GetBuilderCtor2.prototype.visitBool = function() {
    return bool_1$1.BoolBuilder;
  };
  GetBuilderCtor2.prototype.visitInt = function() {
    return int_1$3.IntBuilder;
  };
  GetBuilderCtor2.prototype.visitInt8 = function() {
    return int_1$3.Int8Builder;
  };
  GetBuilderCtor2.prototype.visitInt16 = function() {
    return int_1$3.Int16Builder;
  };
  GetBuilderCtor2.prototype.visitInt32 = function() {
    return int_1$3.Int32Builder;
  };
  GetBuilderCtor2.prototype.visitInt64 = function() {
    return int_1$3.Int64Builder;
  };
  GetBuilderCtor2.prototype.visitUint8 = function() {
    return int_1$3.Uint8Builder;
  };
  GetBuilderCtor2.prototype.visitUint16 = function() {
    return int_1$3.Uint16Builder;
  };
  GetBuilderCtor2.prototype.visitUint32 = function() {
    return int_1$3.Uint32Builder;
  };
  GetBuilderCtor2.prototype.visitUint64 = function() {
    return int_1$3.Uint64Builder;
  };
  GetBuilderCtor2.prototype.visitFloat = function() {
    return float_1$1.FloatBuilder;
  };
  GetBuilderCtor2.prototype.visitFloat16 = function() {
    return float_1$1.Float16Builder;
  };
  GetBuilderCtor2.prototype.visitFloat32 = function() {
    return float_1$1.Float32Builder;
  };
  GetBuilderCtor2.prototype.visitFloat64 = function() {
    return float_1$1.Float64Builder;
  };
  GetBuilderCtor2.prototype.visitUtf8 = function() {
    return utf8_1$4.Utf8Builder;
  };
  GetBuilderCtor2.prototype.visitBinary = function() {
    return binary_1$1.BinaryBuilder;
  };
  GetBuilderCtor2.prototype.visitFixedSizeBinary = function() {
    return fixedsizebinary_1$1.FixedSizeBinaryBuilder;
  };
  GetBuilderCtor2.prototype.visitDate = function() {
    return date_1$1.DateBuilder;
  };
  GetBuilderCtor2.prototype.visitDateDay = function() {
    return date_1$1.DateDayBuilder;
  };
  GetBuilderCtor2.prototype.visitDateMillisecond = function() {
    return date_1$1.DateMillisecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimestamp = function() {
    return timestamp_1$1.TimestampBuilder;
  };
  GetBuilderCtor2.prototype.visitTimestampSecond = function() {
    return timestamp_1$1.TimestampSecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimestampMillisecond = function() {
    return timestamp_1$1.TimestampMillisecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimestampMicrosecond = function() {
    return timestamp_1$1.TimestampMicrosecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimestampNanosecond = function() {
    return timestamp_1$1.TimestampNanosecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTime = function() {
    return time_1$1.TimeBuilder;
  };
  GetBuilderCtor2.prototype.visitTimeSecond = function() {
    return time_1$1.TimeSecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimeMillisecond = function() {
    return time_1$1.TimeMillisecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimeMicrosecond = function() {
    return time_1$1.TimeMicrosecondBuilder;
  };
  GetBuilderCtor2.prototype.visitTimeNanosecond = function() {
    return time_1$1.TimeNanosecondBuilder;
  };
  GetBuilderCtor2.prototype.visitDecimal = function() {
    return decimal_1$1.DecimalBuilder;
  };
  GetBuilderCtor2.prototype.visitList = function() {
    return list_1$1.ListBuilder;
  };
  GetBuilderCtor2.prototype.visitStruct = function() {
    return struct_1$1.StructBuilder;
  };
  GetBuilderCtor2.prototype.visitUnion = function() {
    return union_1$1.UnionBuilder;
  };
  GetBuilderCtor2.prototype.visitDenseUnion = function() {
    return union_1$1.DenseUnionBuilder;
  };
  GetBuilderCtor2.prototype.visitSparseUnion = function() {
    return union_1$1.SparseUnionBuilder;
  };
  GetBuilderCtor2.prototype.visitDictionary = function() {
    return dictionary_1$2.DictionaryBuilder;
  };
  GetBuilderCtor2.prototype.visitInterval = function() {
    return interval_1$1.IntervalBuilder;
  };
  GetBuilderCtor2.prototype.visitIntervalDayTime = function() {
    return interval_1$1.IntervalDayTimeBuilder;
  };
  GetBuilderCtor2.prototype.visitIntervalYearMonth = function() {
    return interval_1$1.IntervalYearMonthBuilder;
  };
  GetBuilderCtor2.prototype.visitFixedSizeList = function() {
    return fixedsizelist_1$1.FixedSizeListBuilder;
  };
  GetBuilderCtor2.prototype.visitMap = function() {
    return map_1$1.MapBuilder;
  };
  return GetBuilderCtor2;
}(visitor_1$c.Visitor);
builderctor.GetBuilderCtor = GetBuilderCtor;
builderctor.instance = new GetBuilderCtor();
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DenseUnionBuilder = exports.SparseUnionBuilder = exports.UnionBuilder = exports.StructBuilder = exports.MapBuilder = exports.FixedSizeListBuilder = exports.ListBuilder = exports.BinaryBuilder = exports.Utf8Builder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.NullBuilder = exports.BoolBuilder = exports.Builder = void 0;
  var tslib_12 = tslib.exports;
  var builder_12 = builder$1;
  Object.defineProperty(exports, "Builder", { enumerable: true, get: function() {
    return builder_12.Builder;
  } });
  var bool_12 = bool$1;
  Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function() {
    return bool_12.BoolBuilder;
  } });
  var null_12 = _null$1;
  Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function() {
    return null_12.NullBuilder;
  } });
  var date_12 = date$1;
  Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function() {
    return date_12.DateBuilder;
  } });
  Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function() {
    return date_12.DateDayBuilder;
  } });
  Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function() {
    return date_12.DateMillisecondBuilder;
  } });
  var decimal_12 = decimal$1;
  Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function() {
    return decimal_12.DecimalBuilder;
  } });
  var dictionary_12 = dictionary$1;
  Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function() {
    return dictionary_12.DictionaryBuilder;
  } });
  var fixedsizebinary_12 = fixedsizebinary$1;
  Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function() {
    return fixedsizebinary_12.FixedSizeBinaryBuilder;
  } });
  var float_12 = float$1;
  Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function() {
    return float_12.FloatBuilder;
  } });
  Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function() {
    return float_12.Float16Builder;
  } });
  Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function() {
    return float_12.Float32Builder;
  } });
  Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function() {
    return float_12.Float64Builder;
  } });
  var int_12 = int$2;
  Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function() {
    return int_12.IntBuilder;
  } });
  Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function() {
    return int_12.Int8Builder;
  } });
  Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function() {
    return int_12.Int16Builder;
  } });
  Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function() {
    return int_12.Int32Builder;
  } });
  Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function() {
    return int_12.Int64Builder;
  } });
  Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function() {
    return int_12.Uint8Builder;
  } });
  Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function() {
    return int_12.Uint16Builder;
  } });
  Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function() {
    return int_12.Uint32Builder;
  } });
  Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function() {
    return int_12.Uint64Builder;
  } });
  var time_12 = time$1;
  Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function() {
    return time_12.TimeBuilder;
  } });
  Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function() {
    return time_12.TimeSecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function() {
    return time_12.TimeMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function() {
    return time_12.TimeMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function() {
    return time_12.TimeNanosecondBuilder;
  } });
  var timestamp_12 = timestamp$1;
  Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function() {
    return timestamp_12.TimestampBuilder;
  } });
  Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function() {
    return timestamp_12.TimestampSecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function() {
    return timestamp_12.TimestampMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function() {
    return timestamp_12.TimestampMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function() {
    return timestamp_12.TimestampNanosecondBuilder;
  } });
  var interval_12 = interval$1;
  Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function() {
    return interval_12.IntervalBuilder;
  } });
  Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function() {
    return interval_12.IntervalDayTimeBuilder;
  } });
  Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function() {
    return interval_12.IntervalYearMonthBuilder;
  } });
  var utf8_12 = utf8$1;
  Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function() {
    return utf8_12.Utf8Builder;
  } });
  var binary_12 = binary$1;
  Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function() {
    return binary_12.BinaryBuilder;
  } });
  var list_12 = list$1;
  Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function() {
    return list_12.ListBuilder;
  } });
  var fixedsizelist_12 = fixedsizelist$1;
  Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function() {
    return fixedsizelist_12.FixedSizeListBuilder;
  } });
  var map_12 = map$1;
  Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function() {
    return map_12.MapBuilder;
  } });
  var struct_12 = struct$1;
  Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function() {
    return struct_12.StructBuilder;
  } });
  var union_12 = union$1;
  Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function() {
    return union_12.UnionBuilder;
  } });
  Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function() {
    return union_12.SparseUnionBuilder;
  } });
  Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function() {
    return union_12.DenseUnionBuilder;
  } });
  var enum_12 = _enum;
  var utf8_2 = utf8$1;
  var builder_2 = builder$1;
  var set_1 = set;
  var builderctor_1 = builderctor;
  builder_2.Builder.new = newBuilder;
  function newBuilder(options) {
    var type2 = options.type;
    var builder2 = new (builderctor_1.instance.getVisitFn(type2)())(options);
    if (type2.children && type2.children.length > 0) {
      var children_1 = options["children"] || [];
      var defaultOptions_1 = { "nullValues": options["nullValues"] };
      var getChildOptions_1 = Array.isArray(children_1) ? function(_, i) {
        return children_1[i] || defaultOptions_1;
      } : function(_a) {
        var name = _a.name;
        return children_1[name] || defaultOptions_1;
      };
      type2.children.forEach(function(field, index) {
        var type3 = field.type;
        var opts = getChildOptions_1(field, index);
        builder2.children.push(newBuilder(tslib_12.__assign(tslib_12.__assign({}, opts), { type: type3 })));
      });
    }
    return builder2;
  }
  Object.keys(enum_12.Type).map(function(T) {
    return enum_12.Type[T];
  }).filter(function(T) {
    return typeof T === "number" && T !== enum_12.Type.NONE;
  }).forEach(function(typeId) {
    var BuilderCtor = builderctor_1.instance.visit(typeId);
    BuilderCtor.prototype._setValue = set_1.instance.getVisitFn(typeId);
  });
  utf8_2.Utf8Builder.prototype._setValue = set_1.instance.visitBinary;
})(builder$2);
var reader$1 = {};
var file$1 = {};
var File = {};
Object.defineProperty(File, "__esModule", { value: true });
File.Block = File.Footer = void 0;
var flatbuffers_1$3 = require$$2;
var NS13596923344997147894 = Schema$1;
var Footer = function() {
  function Footer2() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Footer2.prototype.__init = function(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Footer2.getRootAsFooter = function(bb, obj) {
    return (obj || new Footer2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Footer2.getSizePrefixedRootAsFooter = function(bb, obj) {
    bb.setPosition(bb.position() + flatbuffers_1$3.flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Footer2()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  };
  Footer2.prototype.version = function() {
    var offset = this.bb.__offset(this.bb_pos, 4);
    return offset ? this.bb.readInt16(this.bb_pos + offset) : NS13596923344997147894.MetadataVersion.V1;
  };
  Footer2.prototype.schema = function(obj) {
    var offset = this.bb.__offset(this.bb_pos, 6);
    return offset ? (obj || new NS13596923344997147894.Schema()).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
  };
  Footer2.prototype.dictionaries = function(index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
  };
  Footer2.prototype.dictionariesLength = function() {
    var offset = this.bb.__offset(this.bb_pos, 8);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  Footer2.prototype.recordBatches = function(index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? (obj || new Block()).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;
  };
  Footer2.prototype.recordBatchesLength = function() {
    var offset = this.bb.__offset(this.bb_pos, 10);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  Footer2.prototype.customMetadata = function(index, obj) {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? (obj || new NS13596923344997147894.KeyValue()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
  };
  Footer2.prototype.customMetadataLength = function() {
    var offset = this.bb.__offset(this.bb_pos, 12);
    return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
  };
  Footer2.startFooter = function(builder2) {
    builder2.startObject(5);
  };
  Footer2.addVersion = function(builder2, version) {
    builder2.addFieldInt16(0, version, NS13596923344997147894.MetadataVersion.V1);
  };
  Footer2.addSchema = function(builder2, schemaOffset) {
    builder2.addFieldOffset(1, schemaOffset, 0);
  };
  Footer2.addDictionaries = function(builder2, dictionariesOffset) {
    builder2.addFieldOffset(2, dictionariesOffset, 0);
  };
  Footer2.startDictionariesVector = function(builder2, numElems) {
    builder2.startVector(24, numElems, 8);
  };
  Footer2.addRecordBatches = function(builder2, recordBatchesOffset) {
    builder2.addFieldOffset(3, recordBatchesOffset, 0);
  };
  Footer2.startRecordBatchesVector = function(builder2, numElems) {
    builder2.startVector(24, numElems, 8);
  };
  Footer2.addCustomMetadata = function(builder2, customMetadataOffset) {
    builder2.addFieldOffset(4, customMetadataOffset, 0);
  };
  Footer2.createCustomMetadataVector = function(builder2, data2) {
    builder2.startVector(4, data2.length, 4);
    for (var i = data2.length - 1; i >= 0; i--) {
      builder2.addOffset(data2[i]);
    }
    return builder2.endVector();
  };
  Footer2.startCustomMetadataVector = function(builder2, numElems) {
    builder2.startVector(4, numElems, 4);
  };
  Footer2.endFooter = function(builder2) {
    var offset = builder2.endObject();
    return offset;
  };
  Footer2.finishFooterBuffer = function(builder2, offset) {
    builder2.finish(offset);
  };
  Footer2.finishSizePrefixedFooterBuffer = function(builder2, offset) {
    builder2.finish(offset, void 0, true);
  };
  Footer2.createFooter = function(builder2, version, schemaOffset, dictionariesOffset, recordBatchesOffset, customMetadataOffset) {
    Footer2.startFooter(builder2);
    Footer2.addVersion(builder2, version);
    Footer2.addSchema(builder2, schemaOffset);
    Footer2.addDictionaries(builder2, dictionariesOffset);
    Footer2.addRecordBatches(builder2, recordBatchesOffset);
    Footer2.addCustomMetadata(builder2, customMetadataOffset);
    return Footer2.endFooter(builder2);
  };
  return Footer2;
}();
File.Footer = Footer;
var Block = function() {
  function Block2() {
    this.bb = null;
    this.bb_pos = 0;
  }
  Block2.prototype.__init = function(i, bb) {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  };
  Block2.prototype.offset = function() {
    return this.bb.readInt64(this.bb_pos);
  };
  Block2.prototype.metaDataLength = function() {
    return this.bb.readInt32(this.bb_pos + 8);
  };
  Block2.prototype.bodyLength = function() {
    return this.bb.readInt64(this.bb_pos + 16);
  };
  Block2.createBlock = function(builder2, offset, metaDataLength, bodyLength) {
    builder2.prep(8, 24);
    builder2.writeInt64(bodyLength);
    builder2.pad(4);
    builder2.writeInt32(metaDataLength);
    builder2.writeInt64(offset);
    return builder2.offset();
  };
  return Block2;
}();
File.Block = Block;
Object.defineProperty(file$1, "__esModule", { value: true });
file$1.FileBlock = file$1.Footer = void 0;
var tslib_1$O = tslib.exports;
var File_1 = File;
var flatbuffers_1$2 = require$$2;
var Long$2 = flatbuffers_1$2.flatbuffers.Long;
var Builder$1 = flatbuffers_1$2.flatbuffers.Builder;
var ByteBuffer$1 = flatbuffers_1$2.flatbuffers.ByteBuffer;
var schema_1$a = schema;
var enum_1$e = _enum;
var buffer_1$9 = buffer$1;
var Footer_ = function() {
  function Footer_2(schema2, version, recordBatches, dictionaryBatches) {
    if (version === void 0) {
      version = enum_1$e.MetadataVersion.V4;
    }
    this.schema = schema2;
    this.version = version;
    recordBatches && (this._recordBatches = recordBatches);
    dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);
  }
  Footer_2.decode = function(buf) {
    buf = new ByteBuffer$1(buffer_1$9.toUint8Array(buf));
    var footer = File_1.Footer.getRootAsFooter(buf);
    var schema2 = schema_1$a.Schema.decode(footer.schema());
    return new OffHeapFooter(schema2, footer);
  };
  Footer_2.encode = function(footer) {
    var b = new Builder$1();
    var schemaOffset = schema_1$a.Schema.encode(b, footer.schema);
    File_1.Footer.startRecordBatchesVector(b, footer.numRecordBatches);
    tslib_1$O.__spread(footer.recordBatches()).slice().reverse().forEach(function(rb) {
      return FileBlock.encode(b, rb);
    });
    var recordBatchesOffset = b.endVector();
    File_1.Footer.startDictionariesVector(b, footer.numDictionaries);
    tslib_1$O.__spread(footer.dictionaryBatches()).slice().reverse().forEach(function(db) {
      return FileBlock.encode(b, db);
    });
    var dictionaryBatchesOffset = b.endVector();
    File_1.Footer.startFooter(b);
    File_1.Footer.addSchema(b, schemaOffset);
    File_1.Footer.addVersion(b, enum_1$e.MetadataVersion.V4);
    File_1.Footer.addRecordBatches(b, recordBatchesOffset);
    File_1.Footer.addDictionaries(b, dictionaryBatchesOffset);
    File_1.Footer.finishFooterBuffer(b, File_1.Footer.endFooter(b));
    return b.asUint8Array();
  };
  Object.defineProperty(Footer_2.prototype, "numRecordBatches", {
    get: function() {
      return this._recordBatches.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Footer_2.prototype, "numDictionaries", {
    get: function() {
      return this._dictionaryBatches.length;
    },
    enumerable: false,
    configurable: true
  });
  Footer_2.prototype.recordBatches = function() {
    var block, i, n;
    return tslib_1$O.__generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          block = void 0, i = -1, n = this.numRecordBatches;
          _a.label = 1;
        case 1:
          if (!(++i < n))
            return [3, 4];
          if (!(block = this.getRecordBatch(i)))
            return [3, 3];
          return [4, block];
        case 2:
          _a.sent();
          _a.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [2];
      }
    });
  };
  Footer_2.prototype.dictionaryBatches = function() {
    var block, i, n;
    return tslib_1$O.__generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          block = void 0, i = -1, n = this.numDictionaries;
          _a.label = 1;
        case 1:
          if (!(++i < n))
            return [3, 4];
          if (!(block = this.getDictionaryBatch(i)))
            return [3, 3];
          return [4, block];
        case 2:
          _a.sent();
          _a.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [2];
      }
    });
  };
  Footer_2.prototype.getRecordBatch = function(index) {
    return index >= 0 && index < this.numRecordBatches && this._recordBatches[index] || null;
  };
  Footer_2.prototype.getDictionaryBatch = function(index) {
    return index >= 0 && index < this.numDictionaries && this._dictionaryBatches[index] || null;
  };
  return Footer_2;
}();
file$1.Footer = Footer_;
var OffHeapFooter = function(_super) {
  tslib_1$O.__extends(OffHeapFooter2, _super);
  function OffHeapFooter2(schema2, _footer) {
    var _this = _super.call(this, schema2, _footer.version()) || this;
    _this._footer = _footer;
    return _this;
  }
  Object.defineProperty(OffHeapFooter2.prototype, "numRecordBatches", {
    get: function() {
      return this._footer.recordBatchesLength();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(OffHeapFooter2.prototype, "numDictionaries", {
    get: function() {
      return this._footer.dictionariesLength();
    },
    enumerable: false,
    configurable: true
  });
  OffHeapFooter2.prototype.getRecordBatch = function(index) {
    if (index >= 0 && index < this.numRecordBatches) {
      var fileBlock = this._footer.recordBatches(index);
      if (fileBlock) {
        return FileBlock.decode(fileBlock);
      }
    }
    return null;
  };
  OffHeapFooter2.prototype.getDictionaryBatch = function(index) {
    if (index >= 0 && index < this.numDictionaries) {
      var fileBlock = this._footer.dictionaries(index);
      if (fileBlock) {
        return FileBlock.decode(fileBlock);
      }
    }
    return null;
  };
  return OffHeapFooter2;
}(Footer_);
var FileBlock = function() {
  function FileBlock2(metaDataLength, bodyLength, offset) {
    this.metaDataLength = metaDataLength;
    this.offset = typeof offset === "number" ? offset : offset.low;
    this.bodyLength = typeof bodyLength === "number" ? bodyLength : bodyLength.low;
  }
  FileBlock2.decode = function(block) {
    return new FileBlock2(block.metaDataLength(), block.bodyLength(), block.offset());
  };
  FileBlock2.encode = function(b, fileBlock) {
    var metaDataLength = fileBlock.metaDataLength;
    var offset = new Long$2(fileBlock.offset, 0);
    var bodyLength = new Long$2(fileBlock.bodyLength, 0);
    return File_1.Block.createBlock(b, offset, metaDataLength, bodyLength);
  };
  return FileBlock2;
}();
file$1.FileBlock = FileBlock;
var stream = {};
Object.defineProperty(stream, "__esModule", { value: true });
stream.AsyncByteStream = stream.ByteStream = stream.AsyncByteQueue = void 0;
var tslib_1$N = tslib.exports;
var adapters_1$1 = adapters;
var utf8_1$3 = utf8$2;
var interfaces_1$2 = interfaces;
var buffer_1$8 = buffer$1;
var compat_1$7 = compat;
var AsyncByteQueue = function(_super) {
  tslib_1$N.__extends(AsyncByteQueue2, _super);
  function AsyncByteQueue2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsyncByteQueue2.prototype.write = function(value) {
    if ((value = buffer_1$8.toUint8Array(value)).byteLength > 0) {
      return _super.prototype.write.call(this, value);
    }
  };
  AsyncByteQueue2.prototype.toString = function(sync) {
    if (sync === void 0) {
      sync = false;
    }
    return sync ? utf8_1$3.decodeUtf8(this.toUint8Array(true)) : this.toUint8Array(false).then(utf8_1$3.decodeUtf8);
  };
  AsyncByteQueue2.prototype.toUint8Array = function(sync) {
    var _this = this;
    if (sync === void 0) {
      sync = false;
    }
    return sync ? buffer_1$8.joinUint8Arrays(this._values)[0] : function() {
      return tslib_1$N.__awaiter(_this, void 0, void 0, function() {
        var buffers, byteLength, _a, _b, chunk, e_1_1;
        var e_1, _c;
        return tslib_1$N.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              buffers = [];
              byteLength = 0;
              _d.label = 1;
            case 1:
              _d.trys.push([1, 6, 7, 12]);
              _a = tslib_1$N.__asyncValues(this);
              _d.label = 2;
            case 2:
              return [4, _a.next()];
            case 3:
              if (!(_b = _d.sent(), !_b.done))
                return [3, 5];
              chunk = _b.value;
              buffers.push(chunk);
              byteLength += chunk.byteLength;
              _d.label = 4;
            case 4:
              return [3, 2];
            case 5:
              return [3, 12];
            case 6:
              e_1_1 = _d.sent();
              e_1 = { error: e_1_1 };
              return [3, 12];
            case 7:
              _d.trys.push([7, , 10, 11]);
              if (!(_b && !_b.done && (_c = _a.return)))
                return [3, 9];
              return [4, _c.call(_a)];
            case 8:
              _d.sent();
              _d.label = 9;
            case 9:
              return [3, 11];
            case 10:
              if (e_1)
                throw e_1.error;
              return [7];
            case 11:
              return [7];
            case 12:
              return [2, buffer_1$8.joinUint8Arrays(buffers, byteLength)[0]];
          }
        });
      });
    }();
  };
  return AsyncByteQueue2;
}(interfaces_1$2.AsyncQueue);
stream.AsyncByteQueue = AsyncByteQueue;
var ByteStream = function() {
  function ByteStream2(source) {
    if (source) {
      this.source = new ByteStreamSource(adapters_1$1.default.fromIterable(source));
    }
  }
  ByteStream2.prototype[Symbol.iterator] = function() {
    return this;
  };
  ByteStream2.prototype.next = function(value) {
    return this.source.next(value);
  };
  ByteStream2.prototype.throw = function(value) {
    return this.source.throw(value);
  };
  ByteStream2.prototype.return = function(value) {
    return this.source.return(value);
  };
  ByteStream2.prototype.peek = function(size) {
    return this.source.peek(size);
  };
  ByteStream2.prototype.read = function(size) {
    return this.source.read(size);
  };
  return ByteStream2;
}();
stream.ByteStream = ByteStream;
var AsyncByteStream = function() {
  function AsyncByteStream2(source) {
    if (source instanceof AsyncByteStream2) {
      this.source = source.source;
    } else if (source instanceof AsyncByteQueue) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
    } else if (compat_1$7.isReadableNodeStream(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromNodeStream(source));
    } else if (compat_1$7.isReadableDOMStream(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromDOMStream(source));
    } else if (compat_1$7.isFetchResponse(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromDOMStream(source.body));
    } else if (compat_1$7.isIterable(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromIterable(source));
    } else if (compat_1$7.isPromise(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
    } else if (compat_1$7.isAsyncIterable(source)) {
      this.source = new AsyncByteStreamSource(adapters_1$1.default.fromAsyncIterable(source));
    }
  }
  AsyncByteStream2.prototype[Symbol.asyncIterator] = function() {
    return this;
  };
  AsyncByteStream2.prototype.next = function(value) {
    return this.source.next(value);
  };
  AsyncByteStream2.prototype.throw = function(value) {
    return this.source.throw(value);
  };
  AsyncByteStream2.prototype.return = function(value) {
    return this.source.return(value);
  };
  Object.defineProperty(AsyncByteStream2.prototype, "closed", {
    get: function() {
      return this.source.closed;
    },
    enumerable: false,
    configurable: true
  });
  AsyncByteStream2.prototype.cancel = function(reason) {
    return this.source.cancel(reason);
  };
  AsyncByteStream2.prototype.peek = function(size) {
    return this.source.peek(size);
  };
  AsyncByteStream2.prototype.read = function(size) {
    return this.source.read(size);
  };
  return AsyncByteStream2;
}();
stream.AsyncByteStream = AsyncByteStream;
var ByteStreamSource = function() {
  function ByteStreamSource2(source) {
    this.source = source;
  }
  ByteStreamSource2.prototype.cancel = function(reason) {
    this.return(reason);
  };
  ByteStreamSource2.prototype.peek = function(size) {
    return this.next(size, "peek").value;
  };
  ByteStreamSource2.prototype.read = function(size) {
    return this.next(size, "read").value;
  };
  ByteStreamSource2.prototype.next = function(size, cmd) {
    if (cmd === void 0) {
      cmd = "read";
    }
    return this.source.next({ cmd, size });
  };
  ByteStreamSource2.prototype.throw = function(value) {
    return Object.create(this.source.throw && this.source.throw(value) || interfaces_1$2.ITERATOR_DONE);
  };
  ByteStreamSource2.prototype.return = function(value) {
    return Object.create(this.source.return && this.source.return(value) || interfaces_1$2.ITERATOR_DONE);
  };
  return ByteStreamSource2;
}();
var AsyncByteStreamSource = function() {
  function AsyncByteStreamSource2(source) {
    var _this = this;
    this.source = source;
    this._closedPromise = new Promise(function(r) {
      return _this._closedPromiseResolve = r;
    });
  }
  AsyncByteStreamSource2.prototype.cancel = function(reason) {
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      return tslib_1$N.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.return(reason)];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  Object.defineProperty(AsyncByteStreamSource2.prototype, "closed", {
    get: function() {
      return this._closedPromise;
    },
    enumerable: false,
    configurable: true
  });
  AsyncByteStreamSource2.prototype.read = function(size) {
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      return tslib_1$N.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.next(size, "read")];
          case 1:
            return [2, _a.sent().value];
        }
      });
    });
  };
  AsyncByteStreamSource2.prototype.peek = function(size) {
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      return tslib_1$N.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.next(size, "peek")];
          case 1:
            return [2, _a.sent().value];
        }
      });
    });
  };
  AsyncByteStreamSource2.prototype.next = function(size, cmd) {
    if (cmd === void 0) {
      cmd = "read";
    }
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      return tslib_1$N.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.source.next({ cmd, size })];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  AsyncByteStreamSource2.prototype.throw = function(value) {
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      var result, _a;
      return tslib_1$N.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = this.source.throw;
            if (!_a)
              return [3, 2];
            return [4, this.source.throw(value)];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            result = _a || interfaces_1$2.ITERATOR_DONE;
            this._closedPromiseResolve && this._closedPromiseResolve();
            this._closedPromiseResolve = void 0;
            return [2, Object.create(result)];
        }
      });
    });
  };
  AsyncByteStreamSource2.prototype.return = function(value) {
    return tslib_1$N.__awaiter(this, void 0, void 0, function() {
      var result, _a;
      return tslib_1$N.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = this.source.return;
            if (!_a)
              return [3, 2];
            return [4, this.source.return(value)];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            result = _a || interfaces_1$2.ITERATOR_DONE;
            this._closedPromiseResolve && this._closedPromiseResolve();
            this._closedPromiseResolve = void 0;
            return [2, Object.create(result)];
        }
      });
    });
  };
  return AsyncByteStreamSource2;
}();
var file = {};
Object.defineProperty(file, "__esModule", { value: true });
file.AsyncRandomAccessFile = file.RandomAccessFile = void 0;
var tslib_1$M = tslib.exports;
var stream_1$4 = stream;
var buffer_1$7 = buffer$1;
var RandomAccessFile = function(_super) {
  tslib_1$M.__extends(RandomAccessFile2, _super);
  function RandomAccessFile2(buffer2, byteLength) {
    var _this = _super.call(this) || this;
    _this.position = 0;
    _this.buffer = buffer_1$7.toUint8Array(buffer2);
    _this.size = typeof byteLength === "undefined" ? _this.buffer.byteLength : byteLength;
    return _this;
  }
  RandomAccessFile2.prototype.readInt32 = function(position) {
    var _a = this.readAt(position, 4), buffer2 = _a.buffer, byteOffset = _a.byteOffset;
    return new DataView(buffer2, byteOffset).getInt32(0, true);
  };
  RandomAccessFile2.prototype.seek = function(position) {
    this.position = Math.min(position, this.size);
    return position < this.size;
  };
  RandomAccessFile2.prototype.read = function(nBytes) {
    var _a = this, buffer2 = _a.buffer, size = _a.size, position = _a.position;
    if (buffer2 && position < size) {
      if (typeof nBytes !== "number") {
        nBytes = Infinity;
      }
      this.position = Math.min(size, position + Math.min(size - position, nBytes));
      return buffer2.subarray(position, this.position);
    }
    return null;
  };
  RandomAccessFile2.prototype.readAt = function(position, nBytes) {
    var buf = this.buffer;
    var end = Math.min(this.size, position + nBytes);
    return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);
  };
  RandomAccessFile2.prototype.close = function() {
    this.buffer && (this.buffer = null);
  };
  RandomAccessFile2.prototype.throw = function(value) {
    this.close();
    return { done: true, value };
  };
  RandomAccessFile2.prototype.return = function(value) {
    this.close();
    return { done: true, value };
  };
  return RandomAccessFile2;
}(stream_1$4.ByteStream);
file.RandomAccessFile = RandomAccessFile;
var AsyncRandomAccessFile = function(_super) {
  tslib_1$M.__extends(AsyncRandomAccessFile2, _super);
  function AsyncRandomAccessFile2(file2, byteLength) {
    var _this = _super.call(this) || this;
    _this.position = 0;
    _this._handle = file2;
    if (typeof byteLength === "number") {
      _this.size = byteLength;
    } else {
      _this._pending = function() {
        return tslib_1$M.__awaiter(_this, void 0, void 0, function() {
          var _a;
          return tslib_1$M.__generator(this, function(_b) {
            switch (_b.label) {
              case 0:
                _a = this;
                return [4, file2.stat()];
              case 1:
                _a.size = _b.sent().size;
                delete this._pending;
                return [2];
            }
          });
        });
      }();
    }
    return _this;
  }
  AsyncRandomAccessFile2.prototype.readInt32 = function(position) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      var _a, buffer2, byteOffset;
      return tslib_1$M.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, this.readAt(position, 4)];
          case 1:
            _a = _b.sent(), buffer2 = _a.buffer, byteOffset = _a.byteOffset;
            return [2, new DataView(buffer2, byteOffset).getInt32(0, true)];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.seek = function(position) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      var _a;
      return tslib_1$M.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = this._pending;
            if (!_a)
              return [3, 2];
            return [4, this._pending];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            this.position = Math.min(position, this.size);
            return [2, position < this.size];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.read = function(nBytes) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      var _a, _b, file2, size, position, pos, offset, bytesRead, end, buffer2;
      return tslib_1$M.__generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            _a = this._pending;
            if (!_a)
              return [3, 2];
            return [4, this._pending];
          case 1:
            _a = _c.sent();
            _c.label = 2;
          case 2:
            _b = this, file2 = _b._handle, size = _b.size, position = _b.position;
            if (!(file2 && position < size))
              return [3, 6];
            if (typeof nBytes !== "number") {
              nBytes = Infinity;
            }
            pos = position, offset = 0, bytesRead = 0;
            end = Math.min(size, pos + Math.min(size - pos, nBytes));
            buffer2 = new Uint8Array(Math.max(0, (this.position = end) - pos));
            _c.label = 3;
          case 3:
            if (!((pos += bytesRead) < end && (offset += bytesRead) < buffer2.byteLength))
              return [3, 5];
            return [4, file2.read(buffer2, offset, buffer2.byteLength - offset, pos)];
          case 4:
            bytesRead = _c.sent().bytesRead;
            return [3, 3];
          case 5:
            return [2, buffer2];
          case 6:
            return [2, null];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.readAt = function(position, nBytes) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      var _a, _b, file2, size, end, buffer2;
      return tslib_1$M.__generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            _a = this._pending;
            if (!_a)
              return [3, 2];
            return [4, this._pending];
          case 1:
            _a = _c.sent();
            _c.label = 2;
          case 2:
            _b = this, file2 = _b._handle, size = _b.size;
            if (!(file2 && position + nBytes < size))
              return [3, 4];
            end = Math.min(size, position + nBytes);
            buffer2 = new Uint8Array(end - position);
            return [4, file2.read(buffer2, 0, nBytes, position)];
          case 3:
            return [2, _c.sent().buffer];
          case 4:
            return [2, new Uint8Array(nBytes)];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.close = function() {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      var f, _a;
      return tslib_1$M.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            f = this._handle;
            this._handle = null;
            _a = f;
            if (!_a)
              return [3, 2];
            return [4, f.close()];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.throw = function(value) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      return tslib_1$M.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.close()];
          case 1:
            _a.sent();
            return [2, { done: true, value }];
        }
      });
    });
  };
  AsyncRandomAccessFile2.prototype.return = function(value) {
    return tslib_1$M.__awaiter(this, void 0, void 0, function() {
      return tslib_1$M.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this.close()];
          case 1:
            _a.sent();
            return [2, { done: true, value }];
        }
      });
    });
  };
  return AsyncRandomAccessFile2;
}(stream_1$4.AsyncByteStream);
file.AsyncRandomAccessFile = AsyncRandomAccessFile;
var vectorloader = {};
var int$1 = {};
Object.defineProperty(int$1, "__esModule", { value: true });
int$1.Int128 = int$1.Int64 = int$1.Uint64 = int$1.BaseInt64 = void 0;
var tslib_1$L = tslib.exports;
var carryBit16 = 1 << 16;
function intAsHex(value) {
  if (value < 0) {
    value = 4294967295 + value + 1;
  }
  return "0x" + value.toString(16);
}
var kInt32DecimalDigits = 8;
var kPowersOfTen = [
  1,
  10,
  100,
  1e3,
  1e4,
  1e5,
  1e6,
  1e7,
  1e8
];
var BaseInt64 = function() {
  function BaseInt642(buffer2) {
    this.buffer = buffer2;
  }
  BaseInt642.prototype.high = function() {
    return this.buffer[1];
  };
  BaseInt642.prototype.low = function() {
    return this.buffer[0];
  };
  BaseInt642.prototype._times = function(other) {
    var L = new Uint32Array([
      this.buffer[1] >>> 16,
      this.buffer[1] & 65535,
      this.buffer[0] >>> 16,
      this.buffer[0] & 65535
    ]);
    var R = new Uint32Array([
      other.buffer[1] >>> 16,
      other.buffer[1] & 65535,
      other.buffer[0] >>> 16,
      other.buffer[0] & 65535
    ]);
    var product = L[3] * R[3];
    this.buffer[0] = product & 65535;
    var sum2 = product >>> 16;
    product = L[2] * R[3];
    sum2 += product;
    product = L[3] * R[2] >>> 0;
    sum2 += product;
    this.buffer[0] += sum2 << 16;
    this.buffer[1] = sum2 >>> 0 < product ? carryBit16 : 0;
    this.buffer[1] += sum2 >>> 16;
    this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];
    this.buffer[1] += L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0] << 16;
    return this;
  };
  BaseInt642.prototype._plus = function(other) {
    var sum2 = this.buffer[0] + other.buffer[0] >>> 0;
    this.buffer[1] += other.buffer[1];
    if (sum2 < this.buffer[0] >>> 0) {
      ++this.buffer[1];
    }
    this.buffer[0] = sum2;
  };
  BaseInt642.prototype.lessThan = function(other) {
    return this.buffer[1] < other.buffer[1] || this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0];
  };
  BaseInt642.prototype.equals = function(other) {
    return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];
  };
  BaseInt642.prototype.greaterThan = function(other) {
    return other.lessThan(this);
  };
  BaseInt642.prototype.hex = function() {
    return intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
  };
  return BaseInt642;
}();
int$1.BaseInt64 = BaseInt64;
var Uint64 = function(_super) {
  tslib_1$L.__extends(Uint642, _super);
  function Uint642() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Uint642.prototype.times = function(other) {
    this._times(other);
    return this;
  };
  Uint642.prototype.plus = function(other) {
    this._plus(other);
    return this;
  };
  Uint642.from = function(val, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    return Uint642.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  };
  Uint642.fromNumber = function(num, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    return Uint642.fromString(num.toString(), out_buffer);
  };
  Uint642.fromString = function(str, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    var length = str.length;
    var out = new Uint642(out_buffer);
    for (var posn = 0; posn < length; ) {
      var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
      var chunk = new Uint642(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
      var multiple = new Uint642(new Uint32Array([kPowersOfTen[group], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group;
    }
    return out;
  };
  Uint642.convertArray = function(values) {
    var data2 = new Uint32Array(values.length * 2);
    for (var i = -1, n = values.length; ++i < n; ) {
      Uint642.from(values[i], new Uint32Array(data2.buffer, data2.byteOffset + 2 * i * 4, 2));
    }
    return data2;
  };
  Uint642.multiply = function(left, right) {
    var rtrn = new Uint642(new Uint32Array(left.buffer));
    return rtrn.times(right);
  };
  Uint642.add = function(left, right) {
    var rtrn = new Uint642(new Uint32Array(left.buffer));
    return rtrn.plus(right);
  };
  return Uint642;
}(BaseInt64);
int$1.Uint64 = Uint64;
var Int64 = function(_super) {
  tslib_1$L.__extends(Int642, _super);
  function Int642() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Int642.prototype.negate = function() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    return this;
  };
  Int642.prototype.times = function(other) {
    this._times(other);
    return this;
  };
  Int642.prototype.plus = function(other) {
    this._plus(other);
    return this;
  };
  Int642.prototype.lessThan = function(other) {
    var this_high = this.buffer[1] << 0;
    var other_high = other.buffer[1] << 0;
    return this_high < other_high || this_high === other_high && this.buffer[0] < other.buffer[0];
  };
  Int642.from = function(val, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    return Int642.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  };
  Int642.fromNumber = function(num, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    return Int642.fromString(num.toString(), out_buffer);
  };
  Int642.fromString = function(str, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(2);
    }
    var negate = str.startsWith("-");
    var length = str.length;
    var out = new Int642(out_buffer);
    for (var posn = negate ? 1 : 0; posn < length; ) {
      var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
      var chunk = new Int642(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));
      var multiple = new Int642(new Uint32Array([kPowersOfTen[group], 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group;
    }
    return negate ? out.negate() : out;
  };
  Int642.convertArray = function(values) {
    var data2 = new Uint32Array(values.length * 2);
    for (var i = -1, n = values.length; ++i < n; ) {
      Int642.from(values[i], new Uint32Array(data2.buffer, data2.byteOffset + 2 * i * 4, 2));
    }
    return data2;
  };
  Int642.multiply = function(left, right) {
    var rtrn = new Int642(new Uint32Array(left.buffer));
    return rtrn.times(right);
  };
  Int642.add = function(left, right) {
    var rtrn = new Int642(new Uint32Array(left.buffer));
    return rtrn.plus(right);
  };
  return Int642;
}(BaseInt64);
int$1.Int64 = Int64;
var Int128 = function() {
  function Int1282(buffer2) {
    this.buffer = buffer2;
  }
  Int1282.prototype.high = function() {
    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
  };
  Int1282.prototype.low = function() {
    return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));
  };
  Int1282.prototype.negate = function() {
    this.buffer[0] = ~this.buffer[0] + 1;
    this.buffer[1] = ~this.buffer[1];
    this.buffer[2] = ~this.buffer[2];
    this.buffer[3] = ~this.buffer[3];
    if (this.buffer[0] == 0) {
      ++this.buffer[1];
    }
    if (this.buffer[1] == 0) {
      ++this.buffer[2];
    }
    if (this.buffer[2] == 0) {
      ++this.buffer[3];
    }
    return this;
  };
  Int1282.prototype.times = function(other) {
    var L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));
    var L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));
    var L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));
    var L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));
    var R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));
    var R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));
    var R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));
    var R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));
    var product = Uint64.multiply(L3, R3);
    this.buffer[0] = product.low();
    var sum2 = new Uint64(new Uint32Array([product.high(), 0]));
    product = Uint64.multiply(L2, R3);
    sum2.plus(product);
    product = Uint64.multiply(L3, R2);
    sum2.plus(product);
    this.buffer[1] = sum2.low();
    this.buffer[3] = sum2.lessThan(product) ? 1 : 0;
    this.buffer[2] = sum2.high();
    var high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));
    high.plus(Uint64.multiply(L1, R3)).plus(Uint64.multiply(L2, R2)).plus(Uint64.multiply(L3, R1));
    this.buffer[3] += Uint64.multiply(L0, R3).plus(Uint64.multiply(L1, R2)).plus(Uint64.multiply(L2, R1)).plus(Uint64.multiply(L3, R0)).low();
    return this;
  };
  Int1282.prototype.plus = function(other) {
    var sums = new Uint32Array(4);
    sums[3] = this.buffer[3] + other.buffer[3] >>> 0;
    sums[2] = this.buffer[2] + other.buffer[2] >>> 0;
    sums[1] = this.buffer[1] + other.buffer[1] >>> 0;
    sums[0] = this.buffer[0] + other.buffer[0] >>> 0;
    if (sums[0] < this.buffer[0] >>> 0) {
      ++sums[1];
    }
    if (sums[1] < this.buffer[1] >>> 0) {
      ++sums[2];
    }
    if (sums[2] < this.buffer[2] >>> 0) {
      ++sums[3];
    }
    this.buffer[3] = sums[3];
    this.buffer[2] = sums[2];
    this.buffer[1] = sums[1];
    this.buffer[0] = sums[0];
    return this;
  };
  Int1282.prototype.hex = function() {
    return intAsHex(this.buffer[3]) + " " + intAsHex(this.buffer[2]) + " " + intAsHex(this.buffer[1]) + " " + intAsHex(this.buffer[0]);
  };
  Int1282.multiply = function(left, right) {
    var rtrn = new Int1282(new Uint32Array(left.buffer));
    return rtrn.times(right);
  };
  Int1282.add = function(left, right) {
    var rtrn = new Int1282(new Uint32Array(left.buffer));
    return rtrn.plus(right);
  };
  Int1282.from = function(val, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(4);
    }
    return Int1282.fromString(typeof val === "string" ? val : val.toString(), out_buffer);
  };
  Int1282.fromNumber = function(num, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(4);
    }
    return Int1282.fromString(num.toString(), out_buffer);
  };
  Int1282.fromString = function(str, out_buffer) {
    if (out_buffer === void 0) {
      out_buffer = new Uint32Array(4);
    }
    var negate = str.startsWith("-");
    var length = str.length;
    var out = new Int1282(out_buffer);
    for (var posn = negate ? 1 : 0; posn < length; ) {
      var group = kInt32DecimalDigits < length - posn ? kInt32DecimalDigits : length - posn;
      var chunk = new Int1282(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));
      var multiple = new Int1282(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));
      out.times(multiple);
      out.plus(chunk);
      posn += group;
    }
    return negate ? out.negate() : out;
  };
  Int1282.convertArray = function(values) {
    var data2 = new Uint32Array(values.length * 4);
    for (var i = -1, n = values.length; ++i < n; ) {
      Int1282.from(values[i], new Uint32Array(data2.buffer, data2.byteOffset + 4 * 4 * i, 4));
    }
    return data2;
  };
  return Int1282;
}();
int$1.Int128 = Int128;
Object.defineProperty(vectorloader, "__esModule", { value: true });
vectorloader.JSONVectorLoader = vectorloader.VectorLoader = void 0;
var tslib_1$K = tslib.exports;
var data_1$6 = data;
var schema_1$9 = schema;
var type_1$i = type;
var visitor_1$b = visitor;
var bit_1$4 = bit;
var utf8_1$2 = utf8$2;
var int_1$2 = int$1;
var enum_1$d = _enum;
var buffer_1$6 = buffer$1;
var VectorLoader = function(_super) {
  tslib_1$K.__extends(VectorLoader2, _super);
  function VectorLoader2(bytes, nodes, buffers, dictionaries) {
    var _this = _super.call(this) || this;
    _this.nodesIndex = -1;
    _this.buffersIndex = -1;
    _this.bytes = bytes;
    _this.nodes = nodes;
    _this.buffers = buffers;
    _this.dictionaries = dictionaries;
    return _this;
  }
  VectorLoader2.prototype.visit = function(node) {
    return _super.prototype.visit.call(this, node instanceof schema_1$9.Field ? node.type : node);
  };
  VectorLoader2.prototype.visitNull = function(type2, _a) {
    var length = (_a === void 0 ? this.nextFieldNode() : _a).length;
    return data_1$6.Data.Null(type2, 0, length);
  };
  VectorLoader2.prototype.visitBool = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Bool(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitInt = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Int(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitFloat = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Float(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitUtf8 = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Utf8(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readOffsets(type2), this.readData(type2));
  };
  VectorLoader2.prototype.visitBinary = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Binary(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readOffsets(type2), this.readData(type2));
  };
  VectorLoader2.prototype.visitFixedSizeBinary = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.FixedSizeBinary(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitDate = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Date(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitTimestamp = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Timestamp(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitTime = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Time(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitDecimal = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Decimal(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitList = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.List(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readOffsets(type2), this.visit(type2.children[0]));
  };
  VectorLoader2.prototype.visitStruct = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Struct(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.visitMany(type2.children));
  };
  VectorLoader2.prototype.visitUnion = function(type2) {
    return type2.mode === enum_1$d.UnionMode.Sparse ? this.visitSparseUnion(type2) : this.visitDenseUnion(type2);
  };
  VectorLoader2.prototype.visitDenseUnion = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Union(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readTypeIds(type2), this.readOffsets(type2), this.visitMany(type2.children));
  };
  VectorLoader2.prototype.visitSparseUnion = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Union(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readTypeIds(type2), this.visitMany(type2.children));
  };
  VectorLoader2.prototype.visitDictionary = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Dictionary(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2.indices), this.readDictionary(type2));
  };
  VectorLoader2.prototype.visitInterval = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Interval(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readData(type2));
  };
  VectorLoader2.prototype.visitFixedSizeList = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.FixedSizeList(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.visit(type2.children[0]));
  };
  VectorLoader2.prototype.visitMap = function(type2, _a) {
    var _b = _a === void 0 ? this.nextFieldNode() : _a, length = _b.length, nullCount = _b.nullCount;
    return data_1$6.Data.Map(type2, 0, length, nullCount, this.readNullBitmap(type2, nullCount), this.readOffsets(type2), this.visit(type2.children[0]));
  };
  VectorLoader2.prototype.nextFieldNode = function() {
    return this.nodes[++this.nodesIndex];
  };
  VectorLoader2.prototype.nextBufferRange = function() {
    return this.buffers[++this.buffersIndex];
  };
  VectorLoader2.prototype.readNullBitmap = function(type2, nullCount, buffer2) {
    if (buffer2 === void 0) {
      buffer2 = this.nextBufferRange();
    }
    return nullCount > 0 && this.readData(type2, buffer2) || new Uint8Array(0);
  };
  VectorLoader2.prototype.readOffsets = function(type2, buffer2) {
    return this.readData(type2, buffer2);
  };
  VectorLoader2.prototype.readTypeIds = function(type2, buffer2) {
    return this.readData(type2, buffer2);
  };
  VectorLoader2.prototype.readData = function(_type, _a) {
    var _b = _a === void 0 ? this.nextBufferRange() : _a, length = _b.length, offset = _b.offset;
    return this.bytes.subarray(offset, offset + length);
  };
  VectorLoader2.prototype.readDictionary = function(type2) {
    return this.dictionaries.get(type2.id);
  };
  return VectorLoader2;
}(visitor_1$b.Visitor);
vectorloader.VectorLoader = VectorLoader;
var JSONVectorLoader = function(_super) {
  tslib_1$K.__extends(JSONVectorLoader2, _super);
  function JSONVectorLoader2(sources, nodes, buffers, dictionaries) {
    var _this = _super.call(this, new Uint8Array(0), nodes, buffers, dictionaries) || this;
    _this.sources = sources;
    return _this;
  }
  JSONVectorLoader2.prototype.readNullBitmap = function(_type, nullCount, _a) {
    var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
    return nullCount <= 0 ? new Uint8Array(0) : bit_1$4.packBools(this.sources[offset]);
  };
  JSONVectorLoader2.prototype.readOffsets = function(_type, _a) {
    var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
    return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(Int32Array, this.sources[offset]));
  };
  JSONVectorLoader2.prototype.readTypeIds = function(type2, _a) {
    var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
    return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(type2.ArrayType, this.sources[offset]));
  };
  JSONVectorLoader2.prototype.readData = function(type2, _a) {
    var offset = (_a === void 0 ? this.nextBufferRange() : _a).offset;
    var sources = this.sources;
    if (type_1$i.DataType.isTimestamp(type2)) {
      return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
    } else if ((type_1$i.DataType.isInt(type2) || type_1$i.DataType.isTime(type2)) && type2.bitWidth === 64) {
      return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
    } else if (type_1$i.DataType.isDate(type2) && type2.unit === enum_1$d.DateUnit.MILLISECOND) {
      return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int64.convertArray(sources[offset]));
    } else if (type_1$i.DataType.isDecimal(type2)) {
      return buffer_1$6.toArrayBufferView(Uint8Array, int_1$2.Int128.convertArray(sources[offset]));
    } else if (type_1$i.DataType.isBinary(type2) || type_1$i.DataType.isFixedSizeBinary(type2)) {
      return binaryDataFromJSON(sources[offset]);
    } else if (type_1$i.DataType.isBool(type2)) {
      return bit_1$4.packBools(sources[offset]);
    } else if (type_1$i.DataType.isUtf8(type2)) {
      return utf8_1$2.encodeUtf8(sources[offset].join(""));
    }
    return buffer_1$6.toArrayBufferView(Uint8Array, buffer_1$6.toArrayBufferView(type2.ArrayType, sources[offset].map(function(x) {
      return +x;
    })));
  };
  return JSONVectorLoader2;
}(VectorLoader);
vectorloader.JSONVectorLoader = JSONVectorLoader;
function binaryDataFromJSON(values) {
  var joined = values.join("");
  var data2 = new Uint8Array(joined.length / 2);
  for (var i = 0; i < joined.length; i += 2) {
    data2[i >> 1] = parseInt(joined.substr(i, 2), 16);
  }
  return data2;
}
var recordbatch$1 = {};
var table = {};
var column = {};
var chunked = {};
var vector$1 = {};
var row = {};
Object.defineProperty(row, "__esModule", { value: true });
row.StructRow = row.MapRow = void 0;
var tslib_1$J = tslib.exports;
var pretty_1 = pretty;
var kParent = Symbol.for("parent");
var kRowIndex$1 = Symbol.for("rowIndex");
var kKeyToIdx = Symbol.for("keyToIdx");
var kIdxToVal = Symbol.for("idxToVal");
var kCustomInspect = Symbol.for("nodejs.util.inspect.custom");
var Row = function() {
  function Row2(parent, numKeys) {
    this[kParent] = parent;
    this.size = numKeys;
  }
  Row2.prototype.entries = function() {
    return this[Symbol.iterator]();
  };
  Row2.prototype.has = function(key) {
    return this.get(key) !== void 0;
  };
  Row2.prototype.get = function(key) {
    var val = void 0;
    if (key != null) {
      var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
      var idx = ktoi.get(key);
      if (idx !== void 0) {
        var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
        (val = itov[idx]) !== void 0 || (itov[idx] = val = this.getValue(idx));
      } else if ((idx = this.getIndex(key)) > -1) {
        ktoi.set(key, idx);
        var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
        (val = itov[idx]) !== void 0 || (itov[idx] = val = this.getValue(idx));
      }
    }
    return val;
  };
  Row2.prototype.set = function(key, val) {
    if (key != null) {
      var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
      var idx = ktoi.get(key);
      if (idx === void 0) {
        ktoi.set(key, idx = this.getIndex(key));
      }
      if (idx > -1) {
        var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
        itov[idx] = this.setValue(idx, val);
      }
    }
    return this;
  };
  Row2.prototype.clear = function() {
    throw new Error("Clearing " + this[Symbol.toStringTag] + " not supported.");
  };
  Row2.prototype.delete = function(_) {
    throw new Error("Deleting " + this[Symbol.toStringTag] + " values not supported.");
  };
  Row2.prototype[Symbol.iterator] = function() {
    var ki, vi, ktoi, itov, k, v, i, kr, vr;
    return tslib_1$J.__generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          ki = this.keys();
          vi = this.values();
          ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
          itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
          k = void 0, v = void 0, i = 0, kr = void 0, vr = void 0;
          _a.label = 1;
        case 1:
          if (!!((kr = ki.next()).done || (vr = vi.next()).done))
            return [3, 4];
          k = kr.value;
          v = vr.value;
          itov[i] = v;
          ktoi.has(k) || ktoi.set(k, i);
          return [4, [k, v]];
        case 2:
          _a.sent();
          _a.label = 3;
        case 3:
          ++i;
          return [3, 1];
        case 4:
          return [2];
      }
    });
  };
  Row2.prototype.forEach = function(callbackfn, thisArg) {
    var ki = this.keys();
    var vi = this.values();
    var callback = thisArg === void 0 ? callbackfn : function(v2, k2, m) {
      return callbackfn.call(thisArg, v2, k2, m);
    };
    var ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());
    var itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));
    for (var k = void 0, v = void 0, i = 0, kr = void 0, vr = void 0; !((kr = ki.next()).done || (vr = vi.next()).done); ++i) {
      k = kr.value;
      v = vr.value;
      itov[i] = v;
      ktoi.has(k) || ktoi.set(k, i);
      callback(v, k, this);
    }
  };
  Row2.prototype.toArray = function() {
    return tslib_1$J.__spread(this.values());
  };
  Row2.prototype.toJSON = function() {
    var obj = {};
    this.forEach(function(val, key) {
      return obj[key] = val;
    });
    return obj;
  };
  Row2.prototype.inspect = function() {
    return this.toString();
  };
  Row2.prototype[kCustomInspect] = function() {
    return this.toString();
  };
  Row2.prototype.toString = function() {
    var str = [];
    this.forEach(function(val, key) {
      key = pretty_1.valueToString(key);
      val = pretty_1.valueToString(val);
      str.push(key + ": " + val);
    });
    return "{ " + str.join(", ") + " }";
  };
  Row2[Symbol.toStringTag] = function(proto) {
    var _a;
    Object.defineProperties(proto, (_a = {
      "size": { writable: true, enumerable: false, configurable: false, value: 0 }
    }, _a[kParent] = { writable: true, enumerable: false, configurable: false, value: null }, _a[kRowIndex$1] = { writable: true, enumerable: false, configurable: false, value: -1 }, _a));
    return proto[Symbol.toStringTag] = "Row";
  }(Row2.prototype);
  return Row2;
}();
var MapRow = function(_super) {
  tslib_1$J.__extends(MapRow2, _super);
  function MapRow2(slice) {
    var _this = _super.call(this, slice, slice.length) || this;
    return createRowProxy(_this);
  }
  MapRow2.prototype.keys = function() {
    return this[kParent].getChildAt(0)[Symbol.iterator]();
  };
  MapRow2.prototype.values = function() {
    return this[kParent].getChildAt(1)[Symbol.iterator]();
  };
  MapRow2.prototype.getKey = function(idx) {
    return this[kParent].getChildAt(0).get(idx);
  };
  MapRow2.prototype.getIndex = function(key) {
    return this[kParent].getChildAt(0).indexOf(key);
  };
  MapRow2.prototype.getValue = function(index) {
    return this[kParent].getChildAt(1).get(index);
  };
  MapRow2.prototype.setValue = function(index, value) {
    this[kParent].getChildAt(1).set(index, value);
  };
  return MapRow2;
}(Row);
row.MapRow = MapRow;
var StructRow = function(_super) {
  tslib_1$J.__extends(StructRow2, _super);
  function StructRow2(parent) {
    var _this = _super.call(this, parent, parent.type.children.length) || this;
    return defineRowProxyProperties(_this);
  }
  StructRow2.prototype.keys = function() {
    var _a, _b, field, e_1_1;
    var e_1, _c;
    return tslib_1$J.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 5, 6, 7]);
          _a = tslib_1$J.__values(this[kParent].type.children), _b = _a.next();
          _d.label = 1;
        case 1:
          if (!!_b.done)
            return [3, 4];
          field = _b.value;
          return [4, field.name];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          _b = _a.next();
          return [3, 1];
        case 4:
          return [3, 7];
        case 5:
          e_1_1 = _d.sent();
          e_1 = { error: e_1_1 };
          return [3, 7];
        case 6:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_1)
              throw e_1.error;
          }
          return [7];
        case 7:
          return [2];
      }
    });
  };
  StructRow2.prototype.values = function() {
    var _a, _b, field, e_2_1;
    var e_2, _c;
    return tslib_1$J.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 5, 6, 7]);
          _a = tslib_1$J.__values(this[kParent].type.children), _b = _a.next();
          _d.label = 1;
        case 1:
          if (!!_b.done)
            return [3, 4];
          field = _b.value;
          return [4, this[field.name]];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          _b = _a.next();
          return [3, 1];
        case 4:
          return [3, 7];
        case 5:
          e_2_1 = _d.sent();
          e_2 = { error: e_2_1 };
          return [3, 7];
        case 6:
          try {
            if (_b && !_b.done && (_c = _a.return))
              _c.call(_a);
          } finally {
            if (e_2)
              throw e_2.error;
          }
          return [7];
        case 7:
          return [2];
      }
    });
  };
  StructRow2.prototype.getKey = function(idx) {
    return this[kParent].type.children[idx].name;
  };
  StructRow2.prototype.getIndex = function(key) {
    return this[kParent].type.children.findIndex(function(f) {
      return f.name === key;
    });
  };
  StructRow2.prototype.getValue = function(index) {
    return this[kParent].getChildAt(index).get(this[kRowIndex$1]);
  };
  StructRow2.prototype.setValue = function(index, value) {
    return this[kParent].getChildAt(index).set(this[kRowIndex$1], value);
  };
  return StructRow2;
}(Row);
row.StructRow = StructRow;
Object.setPrototypeOf(Row.prototype, Map.prototype);
var defineRowProxyProperties = function() {
  var desc = { enumerable: true, configurable: false, get: null, set: null };
  return function(row2) {
    var e_3, _a;
    var idx = -1;
    var ktoi = row2[kKeyToIdx] || (row2[kKeyToIdx] = new Map());
    var getter = function(key2) {
      return function() {
        return this.get(key2);
      };
    };
    var setter = function(key2) {
      return function(val) {
        return this.set(key2, val);
      };
    };
    try {
      for (var _b = tslib_1$J.__values(row2.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var key = _c.value;
        ktoi.set(key, ++idx);
        desc.get = getter(key);
        desc.set = setter(key);
        Object.prototype.hasOwnProperty.call(row2, key) || (desc.enumerable = true, Object.defineProperty(row2, key, desc));
        Object.prototype.hasOwnProperty.call(row2, idx) || (desc.enumerable = false, Object.defineProperty(row2, idx, desc));
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
    desc.get = desc.set = null;
    return row2;
  };
}();
var createRowProxy = function() {
  if (typeof Proxy === "undefined") {
    return defineRowProxyProperties;
  }
  var has = Row.prototype.has;
  var get2 = Row.prototype.get;
  var set2 = Row.prototype.set;
  var getKey = Row.prototype.getKey;
  var RowProxyHandler = {
    isExtensible: function() {
      return false;
    },
    deleteProperty: function() {
      return false;
    },
    preventExtensions: function() {
      return true;
    },
    ownKeys: function(row2) {
      return tslib_1$J.__spread(row2.keys()).map(function(x) {
        return "" + x;
      });
    },
    has: function(row2, key) {
      switch (key) {
        case "getKey":
        case "getIndex":
        case "getValue":
        case "setValue":
        case "toArray":
        case "toJSON":
        case "inspect":
        case "constructor":
        case "isPrototypeOf":
        case "propertyIsEnumerable":
        case "toString":
        case "toLocaleString":
        case "valueOf":
        case "size":
        case "has":
        case "get":
        case "set":
        case "clear":
        case "delete":
        case "keys":
        case "values":
        case "entries":
        case "forEach":
        case "__proto__":
        case "__defineGetter__":
        case "__defineSetter__":
        case "hasOwnProperty":
        case "__lookupGetter__":
        case "__lookupSetter__":
        case Symbol.iterator:
        case Symbol.toStringTag:
        case kParent:
        case kRowIndex$1:
        case kIdxToVal:
        case kKeyToIdx:
        case kCustomInspect:
          return true;
      }
      if (typeof key === "number" && !row2.has(key)) {
        key = row2.getKey(key);
      }
      return row2.has(key);
    },
    get: function(row2, key, receiver) {
      switch (key) {
        case "getKey":
        case "getIndex":
        case "getValue":
        case "setValue":
        case "toArray":
        case "toJSON":
        case "inspect":
        case "constructor":
        case "isPrototypeOf":
        case "propertyIsEnumerable":
        case "toString":
        case "toLocaleString":
        case "valueOf":
        case "size":
        case "has":
        case "get":
        case "set":
        case "clear":
        case "delete":
        case "keys":
        case "values":
        case "entries":
        case "forEach":
        case "__proto__":
        case "__defineGetter__":
        case "__defineSetter__":
        case "hasOwnProperty":
        case "__lookupGetter__":
        case "__lookupSetter__":
        case Symbol.iterator:
        case Symbol.toStringTag:
        case kParent:
        case kRowIndex$1:
        case kIdxToVal:
        case kKeyToIdx:
        case kCustomInspect:
          return Reflect.get(row2, key, receiver);
      }
      if (typeof key === "number" && !has.call(receiver, key)) {
        key = getKey.call(receiver, key);
      }
      return get2.call(receiver, key);
    },
    set: function(row2, key, val, receiver) {
      switch (key) {
        case kParent:
        case kRowIndex$1:
        case kIdxToVal:
        case kKeyToIdx:
          return Reflect.set(row2, key, val, receiver);
        case "getKey":
        case "getIndex":
        case "getValue":
        case "setValue":
        case "toArray":
        case "toJSON":
        case "inspect":
        case "constructor":
        case "isPrototypeOf":
        case "propertyIsEnumerable":
        case "toString":
        case "toLocaleString":
        case "valueOf":
        case "size":
        case "has":
        case "get":
        case "set":
        case "clear":
        case "delete":
        case "keys":
        case "values":
        case "entries":
        case "forEach":
        case "__proto__":
        case "__defineGetter__":
        case "__defineSetter__":
        case "hasOwnProperty":
        case "__lookupGetter__":
        case "__lookupSetter__":
        case Symbol.iterator:
        case Symbol.toStringTag:
          return false;
      }
      if (typeof key === "number" && !has.call(receiver, key)) {
        key = getKey.call(receiver, key);
      }
      return has.call(receiver, key) ? !!set2.call(receiver, key, val) : false;
    }
  };
  return function(row2) {
    return new Proxy(row2, RowProxyHandler);
  };
}();
Object.defineProperty(vector$1, "__esModule", { value: true });
vector$1.createElementComparator = vector$1.clampRange = vector$1.clampIndex = void 0;
var vector_1$e = vector$2;
var row_1$2 = row;
var buffer_1$5 = buffer$1;
var compat_1$6 = compat;
function clampIndex(source, index, then) {
  var length = source.length;
  var adjust = index > -1 ? index : length + index % length;
  return then ? then(source, adjust) : adjust;
}
vector$1.clampIndex = clampIndex;
var tmp;
function clampRange(source, begin, end, then) {
  var _a = source.length, len = _a === void 0 ? 0 : _a;
  var lhs = typeof begin !== "number" ? 0 : begin;
  var rhs = typeof end !== "number" ? len : end;
  lhs < 0 && (lhs = (lhs % len + len) % len);
  rhs < 0 && (rhs = (rhs % len + len) % len);
  rhs < lhs && (tmp = lhs, lhs = rhs, rhs = tmp);
  rhs > len && (rhs = len);
  return then ? then(source, lhs, rhs) : [lhs, rhs];
}
vector$1.clampRange = clampRange;
var big0 = compat_1$6.BigIntAvailable ? compat_1$6.BigInt(0) : 0;
var isNaNFast = function(value) {
  return value !== value;
};
function createElementComparator(search) {
  var typeofSearch = typeof search;
  if (typeofSearch !== "object" || search === null) {
    if (isNaNFast(search)) {
      return isNaNFast;
    }
    return typeofSearch !== "bigint" ? function(value) {
      return value === search;
    } : function(value) {
      return big0 + value === search;
    };
  }
  if (search instanceof Date) {
    var valueOfSearch_1 = search.valueOf();
    return function(value) {
      return value instanceof Date ? value.valueOf() === valueOfSearch_1 : false;
    };
  }
  if (ArrayBuffer.isView(search)) {
    return function(value) {
      return value ? buffer_1$5.compareArrayLike(search, value) : false;
    };
  }
  if (search instanceof Map) {
    return creatMapComparator(search);
  }
  if (Array.isArray(search)) {
    return createArrayLikeComparator(search);
  }
  if (search instanceof vector_1$e.Vector) {
    return createVectorComparator(search);
  }
  return createObjectComparator(search);
}
vector$1.createElementComparator = createElementComparator;
function createArrayLikeComparator(lhs) {
  var comparators = [];
  for (var i = -1, n = lhs.length; ++i < n; ) {
    comparators[i] = createElementComparator(lhs[i]);
  }
  return createSubElementsComparator(comparators);
}
function creatMapComparator(lhs) {
  var i = -1;
  var comparators = [];
  lhs.forEach(function(v) {
    return comparators[++i] = createElementComparator(v);
  });
  return createSubElementsComparator(comparators);
}
function createVectorComparator(lhs) {
  var comparators = [];
  for (var i = -1, n = lhs.length; ++i < n; ) {
    comparators[i] = createElementComparator(lhs.get(i));
  }
  return createSubElementsComparator(comparators);
}
function createObjectComparator(lhs) {
  var keys = Object.keys(lhs);
  if (keys.length === 0) {
    return function() {
      return false;
    };
  }
  var comparators = [];
  for (var i = -1, n = keys.length; ++i < n; ) {
    comparators[i] = createElementComparator(lhs[keys[i]]);
  }
  return createSubElementsComparator(comparators, keys);
}
function createSubElementsComparator(comparators, keys) {
  return function(rhs) {
    if (!rhs || typeof rhs !== "object") {
      return false;
    }
    switch (rhs.constructor) {
      case Array:
        return compareArray(comparators, rhs);
      case Map:
      case row_1$2.MapRow:
      case row_1$2.StructRow:
        return compareObject(comparators, rhs, rhs.keys());
      case Object:
      case void 0:
        return compareObject(comparators, rhs, keys || Object.keys(rhs));
    }
    return rhs instanceof vector_1$e.Vector ? compareVector(comparators, rhs) : false;
  };
}
function compareArray(comparators, arr) {
  var n = comparators.length;
  if (arr.length !== n) {
    return false;
  }
  for (var i = -1; ++i < n; ) {
    if (!comparators[i](arr[i])) {
      return false;
    }
  }
  return true;
}
function compareVector(comparators, vec) {
  var n = comparators.length;
  if (vec.length !== n) {
    return false;
  }
  for (var i = -1; ++i < n; ) {
    if (!comparators[i](vec.get(i))) {
      return false;
    }
  }
  return true;
}
function compareObject(comparators, obj, keys) {
  var lKeyItr = keys[Symbol.iterator]();
  var rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();
  var rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();
  var i = 0;
  var n = comparators.length;
  var rVal = rValItr.next();
  var lKey = lKeyItr.next();
  var rKey = rKeyItr.next();
  for (; i < n && !lKey.done && !rKey.done && !rVal.done; ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {
    if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {
      break;
    }
  }
  if (i === n && lKey.done && rKey.done && rVal.done) {
    return true;
  }
  lKeyItr.return && lKeyItr.return();
  rKeyItr.return && rKeyItr.return();
  rValItr.return && rValItr.return();
  return false;
}
var args = {};
Object.defineProperty(args, "__esModule", { value: true });
args.selectColumnChildrenArgs = args.selectVectorChildrenArgs = args.selectChunkArgs = args.selectFieldArgs = args.selectColumnArgs = args.selectArgs = args.arrayTypeToDataType = args.isTypedArray = void 0;
var tslib_1$I = tslib.exports;
var data_1$5 = data;
var schema_1$8 = schema;
var column_1$3 = column;
var vector_1$d = vector$2;
var type_1$h = type;
var chunked_1$4 = chunked;
var isArray = Array.isArray;
function isTypedArray(arr) {
  return ArrayBuffer.isView(arr) && "BYTES_PER_ELEMENT" in arr;
}
args.isTypedArray = isTypedArray;
function arrayTypeToDataType$2(ctor) {
  switch (ctor) {
    case Int8Array:
      return type_1$h.Int8;
    case Int16Array:
      return type_1$h.Int16;
    case Int32Array:
      return type_1$h.Int32;
    case BigInt64Array:
      return type_1$h.Int64;
    case Uint8Array:
      return type_1$h.Uint8;
    case Uint16Array:
      return type_1$h.Uint16;
    case Uint32Array:
      return type_1$h.Uint32;
    case BigUint64Array:
      return type_1$h.Uint64;
    case Float32Array:
      return type_1$h.Float32;
    case Float64Array:
      return type_1$h.Float64;
    default:
      return null;
  }
}
args.arrayTypeToDataType = arrayTypeToDataType$2;
function vectorFromTypedArray(array2) {
  var ArrowType = arrayTypeToDataType$2(array2.constructor);
  if (!ArrowType) {
    throw new TypeError("Unrecognized Array input");
  }
  var type2 = new ArrowType();
  var data2 = data_1$5.Data.new(type2, 0, array2.length, 0, [void 0, array2]);
  return vector_1$d.Vector.new(data2);
}
args.selectArgs = function(Ctor, vals) {
  return _selectArgs(Ctor, vals, [], 0);
};
args.selectColumnArgs = function(args2) {
  var _a = tslib_1$I.__read(_selectFieldArgs(args2, [[], []]), 2), fields = _a[0], values = _a[1];
  return values.map(function(x, i) {
    return x instanceof column_1$3.Column ? column_1$3.Column.new(x.field.clone(fields[i]), x) : x instanceof vector_1$d.Vector ? column_1$3.Column.new(fields[i], x) : isTypedArray(x) ? column_1$3.Column.new(fields[i], vectorFromTypedArray(x)) : column_1$3.Column.new(fields[i], []);
  });
};
args.selectFieldArgs = function(args2) {
  return _selectFieldArgs(args2, [[], []]);
};
args.selectChunkArgs = function(Ctor, vals) {
  return _selectChunkArgs(Ctor, vals, [], 0);
};
args.selectVectorChildrenArgs = function(Ctor, vals) {
  return _selectVectorChildrenArgs(Ctor, vals, [], 0);
};
args.selectColumnChildrenArgs = function(Ctor, vals) {
  return _selectColumnChildrenArgs(Ctor, vals, [], 0);
};
function _selectArgs(Ctor, vals, res, idx) {
  var value, j = idx;
  var i = -1;
  var n = vals.length;
  while (++i < n) {
    if (isArray(value = vals[i])) {
      j = _selectArgs(Ctor, value, res, j).length;
    } else if (value instanceof Ctor) {
      res[j++] = value;
    }
  }
  return res;
}
function _selectChunkArgs(Ctor, vals, res, idx) {
  var value, j = idx;
  var i = -1;
  var n = vals.length;
  while (++i < n) {
    if (isArray(value = vals[i])) {
      j = _selectChunkArgs(Ctor, value, res, j).length;
    } else if (value instanceof chunked_1$4.Chunked) {
      j = _selectChunkArgs(Ctor, value.chunks, res, j).length;
    } else if (value instanceof Ctor) {
      res[j++] = value;
    }
  }
  return res;
}
function _selectVectorChildrenArgs(Ctor, vals, res, idx) {
  var value, j = idx;
  var i = -1;
  var n = vals.length;
  while (++i < n) {
    if (isArray(value = vals[i])) {
      j = _selectVectorChildrenArgs(Ctor, value, res, j).length;
    } else if (value instanceof Ctor) {
      j = _selectArgs(vector_1$d.Vector, value.schema.fields.map(function(_, i2) {
        return value.getChildAt(i2);
      }), res, j).length;
    } else if (value instanceof vector_1$d.Vector) {
      res[j++] = value;
    }
  }
  return res;
}
function _selectColumnChildrenArgs(Ctor, vals, res, idx) {
  var value, j = idx;
  var i = -1;
  var n = vals.length;
  while (++i < n) {
    if (isArray(value = vals[i])) {
      j = _selectColumnChildrenArgs(Ctor, value, res, j).length;
    } else if (value instanceof Ctor) {
      j = _selectArgs(column_1$3.Column, value.schema.fields.map(function(f, i2) {
        return column_1$3.Column.new(f, value.getChildAt(i2));
      }), res, j).length;
    } else if (value instanceof column_1$3.Column) {
      res[j++] = value;
    }
  }
  return res;
}
var toKeysAndValues = function(xs, _a, i) {
  var _b = tslib_1$I.__read(_a, 2), k = _b[0], v = _b[1];
  return xs[0][i] = k, xs[1][i] = v, xs;
};
function _selectFieldArgs(vals, ret) {
  var _a, _b, _c, _d;
  var keys;
  var n;
  switch (n = vals.length) {
    case 0:
      return ret;
    case 1:
      keys = ret[0];
      if (!vals[0]) {
        return ret;
      }
      if (isArray(vals[0])) {
        return _selectFieldArgs(vals[0], ret);
      }
      if (!(vals[0] instanceof data_1$5.Data || vals[0] instanceof vector_1$d.Vector || isTypedArray(vals[0]) || vals[0] instanceof type_1$h.DataType)) {
        _a = tslib_1$I.__read(Object.entries(vals[0]).reduce(toKeysAndValues, ret), 2), keys = _a[0], vals = _a[1];
      }
      break;
    default:
      !isArray(keys = vals[n - 1]) ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = []) : vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1);
  }
  var fieldIndex = -1;
  var valueIndex = -1;
  var idx = -1;
  var len = vals.length;
  var field;
  var val;
  var _e = tslib_1$I.__read(ret, 2), fields = _e[0], values = _e[1];
  while (++idx < len) {
    val = vals[idx];
    if (val instanceof column_1$3.Column && (values[++valueIndex] = val)) {
      fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);
    } else {
      _b = keys, _c = idx, _d = _b[_c], field = _d === void 0 ? idx : _d;
      if (val instanceof type_1$h.DataType && (values[++valueIndex] = val)) {
        fields[++fieldIndex] = schema_1$8.Field.new(field, val, true);
      } else if ((val === null || val === void 0 ? void 0 : val.type) && (values[++valueIndex] = val)) {
        val instanceof data_1$5.Data && (values[valueIndex] = val = vector_1$d.Vector.new(val));
        fields[++fieldIndex] = schema_1$8.Field.new(field, val.type, true);
      }
    }
  }
  return ret;
}
Object.defineProperty(chunked, "__esModule", { value: true });
chunked.Chunked = void 0;
var tslib_1$H = tslib.exports;
var vector_1$c = vector$1;
var type_1$g = type;
var args_1$4 = args;
var vector_2$1 = vector$2;
var ChunkedIterator = function() {
  function ChunkedIterator2(chunks) {
    this.chunks = chunks;
    this.chunkIndex = 0;
    this.chunkIterator = this.getChunkIterator();
  }
  ChunkedIterator2.prototype.next = function() {
    while (this.chunkIndex < this.chunks.length) {
      var next = this.chunkIterator.next();
      if (!next.done) {
        return next;
      }
      if (++this.chunkIndex < this.chunks.length) {
        this.chunkIterator = this.getChunkIterator();
      }
    }
    return { done: true, value: null };
  };
  ChunkedIterator2.prototype.getChunkIterator = function() {
    return this.chunks[this.chunkIndex][Symbol.iterator]();
  };
  ChunkedIterator2.prototype[Symbol.iterator] = function() {
    return this;
  };
  return ChunkedIterator2;
}();
var Chunked = function(_super) {
  tslib_1$H.__extends(Chunked2, _super);
  function Chunked2(type2, chunks, offsets) {
    if (chunks === void 0) {
      chunks = [];
    }
    if (offsets === void 0) {
      offsets = calculateOffsets(chunks);
    }
    var _this = _super.call(this) || this;
    _this._nullCount = -1;
    _this._type = type2;
    _this._chunks = chunks;
    _this._chunkOffsets = offsets;
    _this._length = offsets[offsets.length - 1];
    _this._numChildren = (_this._type.children || []).length;
    return _this;
  }
  Chunked2.flatten = function() {
    var vectors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      vectors[_i] = arguments[_i];
    }
    return args_1$4.selectChunkArgs(vector_2$1.Vector, vectors);
  };
  Chunked2.concat = function() {
    var vectors = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      vectors[_i] = arguments[_i];
    }
    var chunks = Chunked2.flatten.apply(Chunked2, tslib_1$H.__spread(vectors));
    return new Chunked2(chunks[0].type, chunks);
  };
  Object.defineProperty(Chunked2.prototype, "type", {
    get: function() {
      return this._type;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "length", {
    get: function() {
      return this._length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "chunks", {
    get: function() {
      return this._chunks;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "typeId", {
    get: function() {
      return this._type.typeId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "VectorName", {
    get: function() {
      return "Chunked<" + this._type + ">";
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "data", {
    get: function() {
      return this._chunks[0] ? this._chunks[0].data : null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "ArrayType", {
    get: function() {
      return this._type.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "numChildren", {
    get: function() {
      return this._numChildren;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "stride", {
    get: function() {
      return this._chunks[0] ? this._chunks[0].stride : 1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "byteLength", {
    get: function() {
      return this._chunks.reduce(function(byteLength, chunk) {
        return byteLength + chunk.byteLength;
      }, 0);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "nullCount", {
    get: function() {
      var nullCount = this._nullCount;
      if (nullCount < 0) {
        this._nullCount = nullCount = this._chunks.reduce(function(x, _a) {
          var nullCount2 = _a.nullCount;
          return x + nullCount2;
        }, 0);
      }
      return nullCount;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "indices", {
    get: function() {
      if (type_1$g.DataType.isDictionary(this._type)) {
        if (!this._indices) {
          var chunks = this._chunks;
          this._indices = chunks.length === 1 ? chunks[0].indices : Chunked2.concat.apply(Chunked2, tslib_1$H.__spread(chunks.map(function(x) {
            return x.indices;
          })));
        }
        return this._indices;
      }
      return null;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Chunked2.prototype, "dictionary", {
    get: function() {
      if (type_1$g.DataType.isDictionary(this._type)) {
        return this._chunks[this._chunks.length - 1].data.dictionary;
      }
      return null;
    },
    enumerable: false,
    configurable: true
  });
  Chunked2.prototype[Symbol.iterator] = function() {
    return new ChunkedIterator(this._chunks);
  };
  Chunked2.prototype.clone = function(chunks) {
    if (chunks === void 0) {
      chunks = this._chunks;
    }
    return new Chunked2(this._type, chunks);
  };
  Chunked2.prototype.concat = function() {
    var others = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      others[_i] = arguments[_i];
    }
    return this.clone(Chunked2.flatten.apply(Chunked2, tslib_1$H.__spread([this], others)));
  };
  Chunked2.prototype.slice = function(begin, end) {
    return vector_1$c.clampRange(this, begin, end, this._sliceInternal);
  };
  Chunked2.prototype.getChildAt = function(index) {
    if (index < 0 || index >= this._numChildren) {
      return null;
    }
    var columns = this._children || (this._children = []);
    var child, field, chunks;
    if (child = columns[index]) {
      return child;
    }
    if (field = (this._type.children || [])[index]) {
      chunks = this._chunks.map(function(vector2) {
        return vector2.getChildAt(index);
      }).filter(function(vec) {
        return vec != null;
      });
      if (chunks.length > 0) {
        return columns[index] = new Chunked2(field.type, chunks);
      }
    }
    return null;
  };
  Chunked2.prototype.search = function(index, then) {
    var idx = index;
    var offsets = this._chunkOffsets;
    var rhs = offsets.length - 1;
    if (idx < 0) {
      return null;
    }
    if (idx >= offsets[rhs]) {
      return null;
    }
    if (rhs <= 1) {
      return then ? then(this, 0, idx) : [0, idx];
    }
    var lhs = 0, pos = 0, mid = 0;
    do {
      if (lhs + 1 === rhs) {
        return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];
      }
      mid = lhs + (rhs - lhs) / 2 | 0;
      idx >= offsets[mid] ? lhs = mid : rhs = mid;
    } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));
    return null;
  };
  Chunked2.prototype.isValid = function(index) {
    return !!this.search(index, this.isValidInternal);
  };
  Chunked2.prototype.get = function(index) {
    return this.search(index, this.getInternal);
  };
  Chunked2.prototype.set = function(index, value) {
    this.search(index, function(_a, i, j) {
      var chunks = _a.chunks;
      return chunks[i].set(j, value);
    });
  };
  Chunked2.prototype.indexOf = function(element, offset) {
    var _this = this;
    if (offset && typeof offset === "number") {
      return this.search(offset, function(self2, i, j) {
        return _this.indexOfInternal(self2, i, j, element);
      });
    }
    return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);
  };
  Chunked2.prototype.toArray = function() {
    var chunks = this.chunks;
    var n = chunks.length;
    var ArrayType = this._type.ArrayType;
    if (n <= 0) {
      return new ArrayType(0);
    }
    if (n <= 1) {
      return chunks[0].toArray();
    }
    var len = 0;
    var src = new Array(n);
    for (var i = -1; ++i < n; ) {
      len += (src[i] = chunks[i].toArray()).length;
    }
    if (ArrayType !== src[0].constructor) {
      ArrayType = src[0].constructor;
    }
    var dst = new ArrayType(len);
    var set2 = ArrayType === Array ? arraySet : typedSet;
    for (var i = -1, idx = 0; ++i < n; ) {
      idx = set2(src[i], dst, idx);
    }
    return dst;
  };
  Chunked2.prototype.getInternal = function(_a, i, j) {
    var _chunks = _a._chunks;
    return _chunks[i].get(j);
  };
  Chunked2.prototype.isValidInternal = function(_a, i, j) {
    var _chunks = _a._chunks;
    return _chunks[i].isValid(j);
  };
  Chunked2.prototype.indexOfInternal = function(_a, chunkIndex, fromIndex, element) {
    var _chunks = _a._chunks;
    var i = chunkIndex - 1;
    var n = _chunks.length;
    var start2 = fromIndex, offset = 0, found = -1;
    while (++i < n) {
      if (~(found = _chunks[i].indexOf(element, start2))) {
        return offset + found;
      }
      start2 = 0;
      offset += _chunks[i].length;
    }
    return -1;
  };
  Chunked2.prototype._sliceInternal = function(self2, begin, end) {
    var slices = [];
    var chunks = self2.chunks, chunkOffsets = self2._chunkOffsets;
    for (var i = -1, n = chunks.length; ++i < n; ) {
      var chunk = chunks[i];
      var chunkLength2 = chunk.length;
      var chunkOffset = chunkOffsets[i];
      if (chunkOffset >= end) {
        break;
      }
      if (begin >= chunkOffset + chunkLength2) {
        continue;
      }
      if (chunkOffset >= begin && chunkOffset + chunkLength2 <= end) {
        slices.push(chunk);
        continue;
      }
      var from = Math.max(0, begin - chunkOffset);
      var to = Math.min(end - chunkOffset, chunkLength2);
      slices.push(chunk.slice(from, to));
    }
    return self2.clone(slices);
  };
  return Chunked2;
}(vector_2$1.AbstractVector);
chunked.Chunked = Chunked;
function calculateOffsets(vectors) {
  var offsets = new Uint32Array((vectors || []).length + 1);
  var offset = offsets[0] = 0;
  var length = offsets.length;
  for (var index = 0; ++index < length; ) {
    offsets[index] = offset += vectors[index - 1].length;
  }
  return offsets;
}
var typedSet = function(src, dst, offset) {
  dst.set(src, offset);
  return offset + src.length;
};
var arraySet = function(src, dst, offset) {
  var idx = offset;
  for (var i = -1, n = src.length; ++i < n; ) {
    dst[idx++] = src[i];
  }
  return idx;
};
Object.defineProperty(column, "__esModule", { value: true });
column.Column = void 0;
var tslib_1$G = tslib.exports;
var schema_1$7 = schema;
var vector_1$b = vector$2;
var chunked_1$3 = chunked;
var Column = function(_super) {
  tslib_1$G.__extends(Column2, _super);
  function Column2(field, vectors, offsets) {
    if (vectors === void 0) {
      vectors = [];
    }
    var _this = this;
    vectors = chunked_1$3.Chunked.flatten.apply(chunked_1$3.Chunked, tslib_1$G.__spread(vectors));
    _this = _super.call(this, field.type, vectors, offsets) || this;
    _this._field = field;
    if (vectors.length === 1 && !(_this instanceof SingleChunkColumn)) {
      return new SingleChunkColumn(field, vectors[0], _this._chunkOffsets);
    }
    return _this;
  }
  Column2.new = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _a = tslib_1$G.__read(args2), field = _a[0], data2 = _a[1], rest = _a.slice(2);
    if (typeof field !== "string" && !(field instanceof schema_1$7.Field)) {
      data2 = field;
      field = "";
    }
    var chunks = chunked_1$3.Chunked.flatten(Array.isArray(data2) ? tslib_1$G.__spread(data2, rest) : data2 instanceof vector_1$b.Vector ? tslib_1$G.__spread([data2], rest) : [vector_1$b.Vector.new.apply(vector_1$b.Vector, tslib_1$G.__spread([data2], rest))]);
    if (typeof field === "string") {
      var type2 = chunks[0].data.type;
      field = new schema_1$7.Field(field, type2, true);
    } else if (!field.nullable && chunks.some(function(_a2) {
      var nullCount = _a2.nullCount;
      return nullCount > 0;
    })) {
      field = field.clone({ nullable: true });
    }
    return new Column2(field, chunks);
  };
  Object.defineProperty(Column2.prototype, "field", {
    get: function() {
      return this._field;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Column2.prototype, "name", {
    get: function() {
      return this._field.name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Column2.prototype, "nullable", {
    get: function() {
      return this._field.nullable;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Column2.prototype, "metadata", {
    get: function() {
      return this._field.metadata;
    },
    enumerable: false,
    configurable: true
  });
  Column2.prototype.clone = function(chunks) {
    if (chunks === void 0) {
      chunks = this._chunks;
    }
    return new Column2(this._field, chunks);
  };
  Column2.prototype.getChildAt = function(index) {
    if (index < 0 || index >= this.numChildren) {
      return null;
    }
    var columns = this._children || (this._children = []);
    var column2, field, chunks;
    if (column2 = columns[index]) {
      return column2;
    }
    if (field = (this.type.children || [])[index]) {
      chunks = this._chunks.map(function(vector2) {
        return vector2.getChildAt(index);
      }).filter(function(vec) {
        return vec != null;
      });
      if (chunks.length > 0) {
        return columns[index] = new Column2(field, chunks);
      }
    }
    return null;
  };
  return Column2;
}(chunked_1$3.Chunked);
column.Column = Column;
var SingleChunkColumn = function(_super) {
  tslib_1$G.__extends(SingleChunkColumn2, _super);
  function SingleChunkColumn2(field, vector2, offsets) {
    var _this = _super.call(this, field, [vector2], offsets) || this;
    _this._chunk = vector2;
    return _this;
  }
  SingleChunkColumn2.prototype.search = function(index, then) {
    return then ? then(this, 0, index) : [0, index];
  };
  SingleChunkColumn2.prototype.isValid = function(index) {
    return this._chunk.isValid(index);
  };
  SingleChunkColumn2.prototype.get = function(index) {
    return this._chunk.get(index);
  };
  SingleChunkColumn2.prototype.set = function(index, value) {
    this._chunk.set(index, value);
  };
  SingleChunkColumn2.prototype.indexOf = function(element, offset) {
    return this._chunk.indexOf(element, offset);
  };
  return SingleChunkColumn2;
}(Column);
var writer$1 = {};
var message$1 = {};
var message = {};
var typeassembler = {};
Object.defineProperty(typeassembler, "__esModule", { value: true });
typeassembler.instance = typeassembler.TypeAssembler = void 0;
var tslib_1$F = tslib.exports;
var flatbuffers_1$1 = require$$2;
var Long$1 = flatbuffers_1$1.flatbuffers.Long;
var visitor_1$a = visitor;
var Schema_1$2 = Schema$1;
var TypeAssembler = function(_super) {
  tslib_1$F.__extends(TypeAssembler2, _super);
  function TypeAssembler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  TypeAssembler2.prototype.visit = function(node, builder2) {
    return node == null || builder2 == null ? void 0 : _super.prototype.visit.call(this, node, builder2);
  };
  TypeAssembler2.prototype.visitNull = function(_node, b) {
    Schema_1$2.Null.startNull(b);
    return Schema_1$2.Null.endNull(b);
  };
  TypeAssembler2.prototype.visitInt = function(node, b) {
    Schema_1$2.Int.startInt(b);
    Schema_1$2.Int.addBitWidth(b, node.bitWidth);
    Schema_1$2.Int.addIsSigned(b, node.isSigned);
    return Schema_1$2.Int.endInt(b);
  };
  TypeAssembler2.prototype.visitFloat = function(node, b) {
    Schema_1$2.FloatingPoint.startFloatingPoint(b);
    Schema_1$2.FloatingPoint.addPrecision(b, node.precision);
    return Schema_1$2.FloatingPoint.endFloatingPoint(b);
  };
  TypeAssembler2.prototype.visitBinary = function(_node, b) {
    Schema_1$2.Binary.startBinary(b);
    return Schema_1$2.Binary.endBinary(b);
  };
  TypeAssembler2.prototype.visitBool = function(_node, b) {
    Schema_1$2.Bool.startBool(b);
    return Schema_1$2.Bool.endBool(b);
  };
  TypeAssembler2.prototype.visitUtf8 = function(_node, b) {
    Schema_1$2.Utf8.startUtf8(b);
    return Schema_1$2.Utf8.endUtf8(b);
  };
  TypeAssembler2.prototype.visitDecimal = function(node, b) {
    Schema_1$2.Decimal.startDecimal(b);
    Schema_1$2.Decimal.addScale(b, node.scale);
    Schema_1$2.Decimal.addPrecision(b, node.precision);
    return Schema_1$2.Decimal.endDecimal(b);
  };
  TypeAssembler2.prototype.visitDate = function(node, b) {
    Schema_1$2.Date.startDate(b);
    Schema_1$2.Date.addUnit(b, node.unit);
    return Schema_1$2.Date.endDate(b);
  };
  TypeAssembler2.prototype.visitTime = function(node, b) {
    Schema_1$2.Time.startTime(b);
    Schema_1$2.Time.addUnit(b, node.unit);
    Schema_1$2.Time.addBitWidth(b, node.bitWidth);
    return Schema_1$2.Time.endTime(b);
  };
  TypeAssembler2.prototype.visitTimestamp = function(node, b) {
    var timezone = node.timezone && b.createString(node.timezone) || void 0;
    Schema_1$2.Timestamp.startTimestamp(b);
    Schema_1$2.Timestamp.addUnit(b, node.unit);
    if (timezone !== void 0) {
      Schema_1$2.Timestamp.addTimezone(b, timezone);
    }
    return Schema_1$2.Timestamp.endTimestamp(b);
  };
  TypeAssembler2.prototype.visitInterval = function(node, b) {
    Schema_1$2.Interval.startInterval(b);
    Schema_1$2.Interval.addUnit(b, node.unit);
    return Schema_1$2.Interval.endInterval(b);
  };
  TypeAssembler2.prototype.visitList = function(_node, b) {
    Schema_1$2.List.startList(b);
    return Schema_1$2.List.endList(b);
  };
  TypeAssembler2.prototype.visitStruct = function(_node, b) {
    Schema_1$2.Struct_.startStruct_(b);
    return Schema_1$2.Struct_.endStruct_(b);
  };
  TypeAssembler2.prototype.visitUnion = function(node, b) {
    Schema_1$2.Union.startTypeIdsVector(b, node.typeIds.length);
    var typeIds = Schema_1$2.Union.createTypeIdsVector(b, node.typeIds);
    Schema_1$2.Union.startUnion(b);
    Schema_1$2.Union.addMode(b, node.mode);
    Schema_1$2.Union.addTypeIds(b, typeIds);
    return Schema_1$2.Union.endUnion(b);
  };
  TypeAssembler2.prototype.visitDictionary = function(node, b) {
    var indexType = this.visit(node.indices, b);
    Schema_1$2.DictionaryEncoding.startDictionaryEncoding(b);
    Schema_1$2.DictionaryEncoding.addId(b, new Long$1(node.id, 0));
    Schema_1$2.DictionaryEncoding.addIsOrdered(b, node.isOrdered);
    if (indexType !== void 0) {
      Schema_1$2.DictionaryEncoding.addIndexType(b, indexType);
    }
    return Schema_1$2.DictionaryEncoding.endDictionaryEncoding(b);
  };
  TypeAssembler2.prototype.visitFixedSizeBinary = function(node, b) {
    Schema_1$2.FixedSizeBinary.startFixedSizeBinary(b);
    Schema_1$2.FixedSizeBinary.addByteWidth(b, node.byteWidth);
    return Schema_1$2.FixedSizeBinary.endFixedSizeBinary(b);
  };
  TypeAssembler2.prototype.visitFixedSizeList = function(node, b) {
    Schema_1$2.FixedSizeList.startFixedSizeList(b);
    Schema_1$2.FixedSizeList.addListSize(b, node.listSize);
    return Schema_1$2.FixedSizeList.endFixedSizeList(b);
  };
  TypeAssembler2.prototype.visitMap = function(node, b) {
    Schema_1$2.Map.startMap(b);
    Schema_1$2.Map.addKeysSorted(b, node.keysSorted);
    return Schema_1$2.Map.endMap(b);
  };
  return TypeAssembler2;
}(visitor_1$a.Visitor);
typeassembler.TypeAssembler = TypeAssembler;
typeassembler.instance = new TypeAssembler();
var json = {};
Object.defineProperty(json, "__esModule", { value: true });
json.fieldFromJSON = json.dictionaryBatchFromJSON = json.recordBatchFromJSON = json.schemaFromJSON = void 0;
var tslib_1$E = tslib.exports;
var schema_1$6 = schema;
var type_1$f = type;
var message_1$3 = message;
var enum_1$c = _enum;
function schemaFromJSON(_schema, dictionaries) {
  if (dictionaries === void 0) {
    dictionaries = new Map();
  }
  return new schema_1$6.Schema(schemaFieldsFromJSON(_schema, dictionaries), customMetadataFromJSON(_schema["customMetadata"]), dictionaries);
}
json.schemaFromJSON = schemaFromJSON;
function recordBatchFromJSON(b) {
  return new message_1$3.RecordBatch(b["count"], fieldNodesFromJSON(b["columns"]), buffersFromJSON(b["columns"]));
}
json.recordBatchFromJSON = recordBatchFromJSON;
function dictionaryBatchFromJSON(b) {
  return new message_1$3.DictionaryBatch(recordBatchFromJSON(b["data"]), b["id"], b["isDelta"]);
}
json.dictionaryBatchFromJSON = dictionaryBatchFromJSON;
function schemaFieldsFromJSON(_schema, dictionaries) {
  return (_schema["fields"] || []).filter(Boolean).map(function(f) {
    return schema_1$6.Field.fromJSON(f, dictionaries);
  });
}
function fieldChildrenFromJSON(_field, dictionaries) {
  return (_field["children"] || []).filter(Boolean).map(function(f) {
    return schema_1$6.Field.fromJSON(f, dictionaries);
  });
}
function fieldNodesFromJSON(xs) {
  return (xs || []).reduce(function(fieldNodes, column2) {
    return tslib_1$E.__spread(fieldNodes, [
      new message_1$3.FieldNode(column2["count"], nullCountFromJSON(column2["VALIDITY"]))
    ], fieldNodesFromJSON(column2["children"]));
  }, []);
}
function buffersFromJSON(xs, buffers) {
  if (buffers === void 0) {
    buffers = [];
  }
  for (var i = -1, n = (xs || []).length; ++i < n; ) {
    var column2 = xs[i];
    column2["VALIDITY"] && buffers.push(new message_1$3.BufferRegion(buffers.length, column2["VALIDITY"].length));
    column2["TYPE"] && buffers.push(new message_1$3.BufferRegion(buffers.length, column2["TYPE"].length));
    column2["OFFSET"] && buffers.push(new message_1$3.BufferRegion(buffers.length, column2["OFFSET"].length));
    column2["DATA"] && buffers.push(new message_1$3.BufferRegion(buffers.length, column2["DATA"].length));
    buffers = buffersFromJSON(column2["children"], buffers);
  }
  return buffers;
}
function nullCountFromJSON(validity) {
  return (validity || []).reduce(function(sum2, val) {
    return sum2 + +(val === 0);
  }, 0);
}
function fieldFromJSON(_field, dictionaries) {
  var id2;
  var keys;
  var field;
  var dictMeta;
  var type2;
  var dictType;
  if (!dictionaries || !(dictMeta = _field["dictionary"])) {
    type2 = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));
    field = new schema_1$6.Field(_field["name"], type2, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  } else if (!dictionaries.has(id2 = dictMeta["id"])) {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON(keys) : new type_1$f.Int32();
    dictionaries.set(id2, type2 = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));
    dictType = new type_1$f.Dictionary(type2, keys, id2, dictMeta["isOrdered"]);
    field = new schema_1$6.Field(_field["name"], dictType, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  } else {
    keys = (keys = dictMeta["indexType"]) ? indexTypeFromJSON(keys) : new type_1$f.Int32();
    dictType = new type_1$f.Dictionary(dictionaries.get(id2), keys, id2, dictMeta["isOrdered"]);
    field = new schema_1$6.Field(_field["name"], dictType, _field["nullable"], customMetadataFromJSON(_field["customMetadata"]));
  }
  return field || null;
}
json.fieldFromJSON = fieldFromJSON;
function customMetadataFromJSON(_metadata) {
  return new Map(Object.entries(_metadata || {}));
}
function indexTypeFromJSON(_type) {
  return new type_1$f.Int(_type["isSigned"], _type["bitWidth"]);
}
function typeFromJSON(f, children2) {
  var typeId = f["type"]["name"];
  switch (typeId) {
    case "NONE":
      return new type_1$f.Null();
    case "null":
      return new type_1$f.Null();
    case "binary":
      return new type_1$f.Binary();
    case "utf8":
      return new type_1$f.Utf8();
    case "bool":
      return new type_1$f.Bool();
    case "list":
      return new type_1$f.List((children2 || [])[0]);
    case "struct":
      return new type_1$f.Struct(children2 || []);
    case "struct_":
      return new type_1$f.Struct(children2 || []);
  }
  switch (typeId) {
    case "int": {
      var t = f["type"];
      return new type_1$f.Int(t["isSigned"], t["bitWidth"]);
    }
    case "floatingpoint": {
      var t = f["type"];
      return new type_1$f.Float(enum_1$c.Precision[t["precision"]]);
    }
    case "decimal": {
      var t = f["type"];
      return new type_1$f.Decimal(t["scale"], t["precision"]);
    }
    case "date": {
      var t = f["type"];
      return new type_1$f.Date_(enum_1$c.DateUnit[t["unit"]]);
    }
    case "time": {
      var t = f["type"];
      return new type_1$f.Time(enum_1$c.TimeUnit[t["unit"]], t["bitWidth"]);
    }
    case "timestamp": {
      var t = f["type"];
      return new type_1$f.Timestamp(enum_1$c.TimeUnit[t["unit"]], t["timezone"]);
    }
    case "interval": {
      var t = f["type"];
      return new type_1$f.Interval(enum_1$c.IntervalUnit[t["unit"]]);
    }
    case "union": {
      var t = f["type"];
      return new type_1$f.Union(enum_1$c.UnionMode[t["mode"]], t["typeIds"] || [], children2 || []);
    }
    case "fixedsizebinary": {
      var t = f["type"];
      return new type_1$f.FixedSizeBinary(t["byteWidth"]);
    }
    case "fixedsizelist": {
      var t = f["type"];
      return new type_1$f.FixedSizeList(t["listSize"], (children2 || [])[0]);
    }
    case "map": {
      var t = f["type"];
      return new type_1$f.Map_((children2 || [])[0], t["keysSorted"]);
    }
  }
  throw new Error('Unrecognized type: "' + typeId + '"');
}
Object.defineProperty(message, "__esModule", { value: true });
message.FieldNode = message.BufferRegion = message.DictionaryBatch = message.RecordBatch = message.Message = void 0;
var tslib_1$D = tslib.exports;
var flatbuffers_1 = require$$2;
var Schema_1$1 = Schema$1;
var Message_1 = Message$1;
var schema_1$5 = schema;
var buffer_1$4 = buffer$1;
var enum_1$b = _enum;
var typeassembler_1 = typeassembler;
var json_1 = json;
var Long = flatbuffers_1.flatbuffers.Long;
var Builder = flatbuffers_1.flatbuffers.Builder;
var ByteBuffer = flatbuffers_1.flatbuffers.ByteBuffer;
var type_1$e = type;
var Message = function() {
  function Message2(bodyLength, version, headerType, header) {
    this._version = version;
    this._headerType = headerType;
    this.body = new Uint8Array(0);
    header && (this._createHeader = function() {
      return header;
    });
    this._bodyLength = typeof bodyLength === "number" ? bodyLength : bodyLength.low;
  }
  Message2.fromJSON = function(msg, headerType) {
    var message2 = new Message2(0, enum_1$b.MetadataVersion.V4, headerType);
    message2._createHeader = messageHeaderFromJSON(msg, headerType);
    return message2;
  };
  Message2.decode = function(buf) {
    buf = new ByteBuffer(buffer_1$4.toUint8Array(buf));
    var _message = Message_1.Message.getRootAsMessage(buf);
    var bodyLength = _message.bodyLength();
    var version = _message.version();
    var headerType = _message.headerType();
    var message2 = new Message2(bodyLength, version, headerType);
    message2._createHeader = decodeMessageHeader(_message, headerType);
    return message2;
  };
  Message2.encode = function(message2) {
    var b = new Builder();
    var headerOffset = -1;
    if (message2.isSchema()) {
      headerOffset = schema_1$5.Schema.encode(b, message2.header());
    } else if (message2.isRecordBatch()) {
      headerOffset = RecordBatch$1.encode(b, message2.header());
    } else if (message2.isDictionaryBatch()) {
      headerOffset = DictionaryBatch.encode(b, message2.header());
    }
    Message_1.Message.startMessage(b);
    Message_1.Message.addVersion(b, enum_1$b.MetadataVersion.V4);
    Message_1.Message.addHeader(b, headerOffset);
    Message_1.Message.addHeaderType(b, message2.headerType);
    Message_1.Message.addBodyLength(b, new Long(message2.bodyLength, 0));
    Message_1.Message.finishMessageBuffer(b, Message_1.Message.endMessage(b));
    return b.asUint8Array();
  };
  Message2.from = function(header, bodyLength) {
    if (bodyLength === void 0) {
      bodyLength = 0;
    }
    if (header instanceof schema_1$5.Schema) {
      return new Message2(0, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.Schema, header);
    }
    if (header instanceof RecordBatch$1) {
      return new Message2(bodyLength, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.RecordBatch, header);
    }
    if (header instanceof DictionaryBatch) {
      return new Message2(bodyLength, enum_1$b.MetadataVersion.V4, enum_1$b.MessageHeader.DictionaryBatch, header);
    }
    throw new Error("Unrecognized Message header: " + header);
  };
  Object.defineProperty(Message2.prototype, "type", {
    get: function() {
      return this.headerType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Message2.prototype, "version", {
    get: function() {
      return this._version;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Message2.prototype, "headerType", {
    get: function() {
      return this._headerType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Message2.prototype, "bodyLength", {
    get: function() {
      return this._bodyLength;
    },
    enumerable: false,
    configurable: true
  });
  Message2.prototype.header = function() {
    return this._createHeader();
  };
  Message2.prototype.isSchema = function() {
    return this.headerType === enum_1$b.MessageHeader.Schema;
  };
  Message2.prototype.isRecordBatch = function() {
    return this.headerType === enum_1$b.MessageHeader.RecordBatch;
  };
  Message2.prototype.isDictionaryBatch = function() {
    return this.headerType === enum_1$b.MessageHeader.DictionaryBatch;
  };
  return Message2;
}();
message.Message = Message;
var RecordBatch$1 = function() {
  function RecordBatch2(length, nodes, buffers) {
    this._nodes = nodes;
    this._buffers = buffers;
    this._length = typeof length === "number" ? length : length.low;
  }
  Object.defineProperty(RecordBatch2.prototype, "nodes", {
    get: function() {
      return this._nodes;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatch2.prototype, "length", {
    get: function() {
      return this._length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatch2.prototype, "buffers", {
    get: function() {
      return this._buffers;
    },
    enumerable: false,
    configurable: true
  });
  return RecordBatch2;
}();
message.RecordBatch = RecordBatch$1;
var DictionaryBatch = function() {
  function DictionaryBatch2(data2, id2, isDelta) {
    if (isDelta === void 0) {
      isDelta = false;
    }
    this._data = data2;
    this._isDelta = isDelta;
    this._id = typeof id2 === "number" ? id2 : id2.low;
  }
  Object.defineProperty(DictionaryBatch2.prototype, "id", {
    get: function() {
      return this._id;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBatch2.prototype, "data", {
    get: function() {
      return this._data;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBatch2.prototype, "isDelta", {
    get: function() {
      return this._isDelta;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBatch2.prototype, "length", {
    get: function() {
      return this.data.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBatch2.prototype, "nodes", {
    get: function() {
      return this.data.nodes;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DictionaryBatch2.prototype, "buffers", {
    get: function() {
      return this.data.buffers;
    },
    enumerable: false,
    configurable: true
  });
  return DictionaryBatch2;
}();
message.DictionaryBatch = DictionaryBatch;
var BufferRegion = function() {
  function BufferRegion2(offset, length) {
    this.offset = typeof offset === "number" ? offset : offset.low;
    this.length = typeof length === "number" ? length : length.low;
  }
  return BufferRegion2;
}();
message.BufferRegion = BufferRegion;
var FieldNode = function() {
  function FieldNode2(length, nullCount) {
    this.length = typeof length === "number" ? length : length.low;
    this.nullCount = typeof nullCount === "number" ? nullCount : nullCount.low;
  }
  return FieldNode2;
}();
message.FieldNode = FieldNode;
function messageHeaderFromJSON(message2, type2) {
  return function() {
    switch (type2) {
      case enum_1$b.MessageHeader.Schema:
        return schema_1$5.Schema.fromJSON(message2);
      case enum_1$b.MessageHeader.RecordBatch:
        return RecordBatch$1.fromJSON(message2);
      case enum_1$b.MessageHeader.DictionaryBatch:
        return DictionaryBatch.fromJSON(message2);
    }
    throw new Error("Unrecognized Message type: { name: " + enum_1$b.MessageHeader[type2] + ", type: " + type2 + " }");
  };
}
function decodeMessageHeader(message2, type2) {
  return function() {
    switch (type2) {
      case enum_1$b.MessageHeader.Schema:
        return schema_1$5.Schema.decode(message2.header(new Schema_1$1.Schema()));
      case enum_1$b.MessageHeader.RecordBatch:
        return RecordBatch$1.decode(message2.header(new Message_1.RecordBatch()), message2.version());
      case enum_1$b.MessageHeader.DictionaryBatch:
        return DictionaryBatch.decode(message2.header(new Message_1.DictionaryBatch()), message2.version());
    }
    throw new Error("Unrecognized Message type: { name: " + enum_1$b.MessageHeader[type2] + ", type: " + type2 + " }");
  };
}
schema_1$5.Field["encode"] = encodeField;
schema_1$5.Field["decode"] = decodeField;
schema_1$5.Field["fromJSON"] = json_1.fieldFromJSON;
schema_1$5.Schema["encode"] = encodeSchema;
schema_1$5.Schema["decode"] = decodeSchema;
schema_1$5.Schema["fromJSON"] = json_1.schemaFromJSON;
RecordBatch$1["encode"] = encodeRecordBatch;
RecordBatch$1["decode"] = decodeRecordBatch;
RecordBatch$1["fromJSON"] = json_1.recordBatchFromJSON;
DictionaryBatch["encode"] = encodeDictionaryBatch;
DictionaryBatch["decode"] = decodeDictionaryBatch;
DictionaryBatch["fromJSON"] = json_1.dictionaryBatchFromJSON;
FieldNode["encode"] = encodeFieldNode;
FieldNode["decode"] = decodeFieldNode;
BufferRegion["encode"] = encodeBufferRegion;
BufferRegion["decode"] = decodeBufferRegion;
function decodeSchema(_schema, dictionaries) {
  if (dictionaries === void 0) {
    dictionaries = new Map();
  }
  var fields = decodeSchemaFields(_schema, dictionaries);
  return new schema_1$5.Schema(fields, decodeCustomMetadata(_schema), dictionaries);
}
function decodeRecordBatch(batch, version) {
  if (version === void 0) {
    version = enum_1$b.MetadataVersion.V4;
  }
  return new RecordBatch$1(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));
}
function decodeDictionaryBatch(batch, version) {
  if (version === void 0) {
    version = enum_1$b.MetadataVersion.V4;
  }
  return new DictionaryBatch(RecordBatch$1.decode(batch.data(), version), batch.id(), batch.isDelta());
}
function decodeBufferRegion(b) {
  return new BufferRegion(b.offset(), b.length());
}
function decodeFieldNode(f) {
  return new FieldNode(f.length(), f.nullCount());
}
function decodeFieldNodes(batch) {
  var nodes = [];
  for (var f = void 0, i = -1, j = -1, n = batch.nodesLength(); ++i < n; ) {
    if (f = batch.nodes(i)) {
      nodes[++j] = FieldNode.decode(f);
    }
  }
  return nodes;
}
function decodeBuffers(batch, version) {
  var bufferRegions = [];
  for (var b = void 0, i = -1, j = -1, n = batch.buffersLength(); ++i < n; ) {
    if (b = batch.buffers(i)) {
      if (version < enum_1$b.MetadataVersion.V4) {
        b.bb_pos += 8 * (i + 1);
      }
      bufferRegions[++j] = BufferRegion.decode(b);
    }
  }
  return bufferRegions;
}
function decodeSchemaFields(schema2, dictionaries) {
  var fields = [];
  for (var f = void 0, i = -1, j = -1, n = schema2.fieldsLength(); ++i < n; ) {
    if (f = schema2.fields(i)) {
      fields[++j] = schema_1$5.Field.decode(f, dictionaries);
    }
  }
  return fields;
}
function decodeFieldChildren(field, dictionaries) {
  var children2 = [];
  for (var f = void 0, i = -1, j = -1, n = field.childrenLength(); ++i < n; ) {
    if (f = field.children(i)) {
      children2[++j] = schema_1$5.Field.decode(f, dictionaries);
    }
  }
  return children2;
}
function decodeField(f, dictionaries) {
  var id2;
  var field;
  var type2;
  var keys;
  var dictType;
  var dictMeta;
  if (!dictionaries || !(dictMeta = f.dictionary())) {
    type2 = decodeFieldType(f, decodeFieldChildren(f, dictionaries));
    field = new schema_1$5.Field(f.name(), type2, f.nullable(), decodeCustomMetadata(f));
  } else if (!dictionaries.has(id2 = dictMeta.id().low)) {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1$e.Int32();
    dictionaries.set(id2, type2 = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));
    dictType = new type_1$e.Dictionary(type2, keys, id2, dictMeta.isOrdered());
    field = new schema_1$5.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
  } else {
    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new type_1$e.Int32();
    dictType = new type_1$e.Dictionary(dictionaries.get(id2), keys, id2, dictMeta.isOrdered());
    field = new schema_1$5.Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));
  }
  return field || null;
}
function decodeCustomMetadata(parent) {
  var data2 = new Map();
  if (parent) {
    for (var entry = void 0, key = void 0, i = -1, n = parent.customMetadataLength() | 0; ++i < n; ) {
      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {
        data2.set(key, entry.value());
      }
    }
  }
  return data2;
}
function decodeIndexType(_type) {
  return new type_1$e.Int(_type.isSigned(), _type.bitWidth());
}
function decodeFieldType(f, children2) {
  var typeId = f.typeType();
  switch (typeId) {
    case Schema_1$1.Type["NONE"]:
      return new type_1$e.Null();
    case Schema_1$1.Type["Null"]:
      return new type_1$e.Null();
    case Schema_1$1.Type["Binary"]:
      return new type_1$e.Binary();
    case Schema_1$1.Type["Utf8"]:
      return new type_1$e.Utf8();
    case Schema_1$1.Type["Bool"]:
      return new type_1$e.Bool();
    case Schema_1$1.Type["List"]:
      return new type_1$e.List((children2 || [])[0]);
    case Schema_1$1.Type["Struct_"]:
      return new type_1$e.Struct(children2 || []);
  }
  switch (typeId) {
    case Schema_1$1.Type["Int"]: {
      var t = f.type(new Schema_1$1.Int());
      return new type_1$e.Int(t.isSigned(), t.bitWidth());
    }
    case Schema_1$1.Type["FloatingPoint"]: {
      var t = f.type(new Schema_1$1.FloatingPoint());
      return new type_1$e.Float(t.precision());
    }
    case Schema_1$1.Type["Decimal"]: {
      var t = f.type(new Schema_1$1.Decimal());
      return new type_1$e.Decimal(t.scale(), t.precision());
    }
    case Schema_1$1.Type["Date"]: {
      var t = f.type(new Schema_1$1.Date());
      return new type_1$e.Date_(t.unit());
    }
    case Schema_1$1.Type["Time"]: {
      var t = f.type(new Schema_1$1.Time());
      return new type_1$e.Time(t.unit(), t.bitWidth());
    }
    case Schema_1$1.Type["Timestamp"]: {
      var t = f.type(new Schema_1$1.Timestamp());
      return new type_1$e.Timestamp(t.unit(), t.timezone());
    }
    case Schema_1$1.Type["Interval"]: {
      var t = f.type(new Schema_1$1.Interval());
      return new type_1$e.Interval(t.unit());
    }
    case Schema_1$1.Type["Union"]: {
      var t = f.type(new Schema_1$1.Union());
      return new type_1$e.Union(t.mode(), t.typeIdsArray() || [], children2 || []);
    }
    case Schema_1$1.Type["FixedSizeBinary"]: {
      var t = f.type(new Schema_1$1.FixedSizeBinary());
      return new type_1$e.FixedSizeBinary(t.byteWidth());
    }
    case Schema_1$1.Type["FixedSizeList"]: {
      var t = f.type(new Schema_1$1.FixedSizeList());
      return new type_1$e.FixedSizeList(t.listSize(), (children2 || [])[0]);
    }
    case Schema_1$1.Type["Map"]: {
      var t = f.type(new Schema_1$1.Map());
      return new type_1$e.Map_((children2 || [])[0], t.keysSorted());
    }
  }
  throw new Error('Unrecognized type: "' + Schema_1$1.Type[typeId] + '" (' + typeId + ")");
}
function encodeSchema(b, schema2) {
  var fieldOffsets = schema2.fields.map(function(f) {
    return schema_1$5.Field.encode(b, f);
  });
  Schema_1$1.Schema.startFieldsVector(b, fieldOffsets.length);
  var fieldsVectorOffset = Schema_1$1.Schema.createFieldsVector(b, fieldOffsets);
  var metadataOffset = !(schema2.metadata && schema2.metadata.size > 0) ? -1 : Schema_1$1.Schema.createCustomMetadataVector(b, tslib_1$D.__spread(schema2.metadata).map(function(_a) {
    var _b = tslib_1$D.__read(_a, 2), k = _b[0], v = _b[1];
    var key = b.createString("" + k);
    var val = b.createString("" + v);
    Schema_1$1.KeyValue.startKeyValue(b);
    Schema_1$1.KeyValue.addKey(b, key);
    Schema_1$1.KeyValue.addValue(b, val);
    return Schema_1$1.KeyValue.endKeyValue(b);
  }));
  Schema_1$1.Schema.startSchema(b);
  Schema_1$1.Schema.addFields(b, fieldsVectorOffset);
  Schema_1$1.Schema.addEndianness(b, platformIsLittleEndian ? Schema_1$1.Endianness.Little : Schema_1$1.Endianness.Big);
  if (metadataOffset !== -1) {
    Schema_1$1.Schema.addCustomMetadata(b, metadataOffset);
  }
  return Schema_1$1.Schema.endSchema(b);
}
function encodeField(b, field) {
  var nameOffset = -1;
  var typeOffset = -1;
  var dictionaryOffset = -1;
  var type2 = field.type;
  var typeId = field.typeId;
  if (!type_1$e.DataType.isDictionary(type2)) {
    typeOffset = typeassembler_1.instance.visit(type2, b);
  } else {
    typeId = type2.dictionary.typeId;
    dictionaryOffset = typeassembler_1.instance.visit(type2, b);
    typeOffset = typeassembler_1.instance.visit(type2.dictionary, b);
  }
  var childOffsets = (type2.children || []).map(function(f) {
    return schema_1$5.Field.encode(b, f);
  });
  var childrenVectorOffset = Schema_1$1.Field.createChildrenVector(b, childOffsets);
  var metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : Schema_1$1.Field.createCustomMetadataVector(b, tslib_1$D.__spread(field.metadata).map(function(_a) {
    var _b = tslib_1$D.__read(_a, 2), k = _b[0], v = _b[1];
    var key = b.createString("" + k);
    var val = b.createString("" + v);
    Schema_1$1.KeyValue.startKeyValue(b);
    Schema_1$1.KeyValue.addKey(b, key);
    Schema_1$1.KeyValue.addValue(b, val);
    return Schema_1$1.KeyValue.endKeyValue(b);
  }));
  if (field.name) {
    nameOffset = b.createString(field.name);
  }
  Schema_1$1.Field.startField(b);
  Schema_1$1.Field.addType(b, typeOffset);
  Schema_1$1.Field.addTypeType(b, typeId);
  Schema_1$1.Field.addChildren(b, childrenVectorOffset);
  Schema_1$1.Field.addNullable(b, !!field.nullable);
  if (nameOffset !== -1) {
    Schema_1$1.Field.addName(b, nameOffset);
  }
  if (dictionaryOffset !== -1) {
    Schema_1$1.Field.addDictionary(b, dictionaryOffset);
  }
  if (metadataOffset !== -1) {
    Schema_1$1.Field.addCustomMetadata(b, metadataOffset);
  }
  return Schema_1$1.Field.endField(b);
}
function encodeRecordBatch(b, recordBatch) {
  var nodes = recordBatch.nodes || [];
  var buffers = recordBatch.buffers || [];
  Message_1.RecordBatch.startNodesVector(b, nodes.length);
  nodes.slice().reverse().forEach(function(n) {
    return FieldNode.encode(b, n);
  });
  var nodesVectorOffset = b.endVector();
  Message_1.RecordBatch.startBuffersVector(b, buffers.length);
  buffers.slice().reverse().forEach(function(b_) {
    return BufferRegion.encode(b, b_);
  });
  var buffersVectorOffset = b.endVector();
  Message_1.RecordBatch.startRecordBatch(b);
  Message_1.RecordBatch.addLength(b, new Long(recordBatch.length, 0));
  Message_1.RecordBatch.addNodes(b, nodesVectorOffset);
  Message_1.RecordBatch.addBuffers(b, buffersVectorOffset);
  return Message_1.RecordBatch.endRecordBatch(b);
}
function encodeDictionaryBatch(b, dictionaryBatch) {
  var dataOffset = RecordBatch$1.encode(b, dictionaryBatch.data);
  Message_1.DictionaryBatch.startDictionaryBatch(b);
  Message_1.DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));
  Message_1.DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);
  Message_1.DictionaryBatch.addData(b, dataOffset);
  return Message_1.DictionaryBatch.endDictionaryBatch(b);
}
function encodeFieldNode(b, node) {
  return Message_1.FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));
}
function encodeBufferRegion(b, node) {
  return Schema_1$1.Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));
}
var platformIsLittleEndian = function() {
  var buffer2 = new ArrayBuffer(2);
  new DataView(buffer2).setInt16(0, 256, true);
  return new Int16Array(buffer2)[0] === 256;
}();
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.magicX2AndPadding = exports.magicAndPadding = exports.magicLength = exports.checkForMagicArrowString = exports.MAGIC = exports.MAGIC_STR = exports.PADDING = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = void 0;
  var tslib_12 = tslib.exports;
  var enum_12 = _enum;
  var flatbuffers_12 = require$$2;
  var ByteBuffer2 = flatbuffers_12.flatbuffers.ByteBuffer;
  var message_12 = message;
  var compat_12 = compat;
  var file_12 = file;
  var buffer_12 = buffer$1;
  var stream_12 = stream;
  var interfaces_12 = interfaces;
  var invalidMessageType = function(type2) {
    return "Expected " + enum_12.MessageHeader[type2] + " Message in stream, but was null or length 0.";
  };
  var nullMessage = function(type2) {
    return "Header pointer of flatbuffer-encoded " + enum_12.MessageHeader[type2] + " Message is null or length 0.";
  };
  var invalidMessageMetadata = function(expected, actual) {
    return "Expected to read " + expected + " metadata bytes, but only read " + actual + ".";
  };
  var invalidMessageBodyLength = function(expected, actual) {
    return "Expected to read " + expected + " bytes for message body, but only read " + actual + ".";
  };
  var MessageReader = function() {
    function MessageReader2(source) {
      this.source = source instanceof stream_12.ByteStream ? source : new stream_12.ByteStream(source);
    }
    MessageReader2.prototype[Symbol.iterator] = function() {
      return this;
    };
    MessageReader2.prototype.next = function() {
      var r;
      if ((r = this.readMetadataLength()).done) {
        return interfaces_12.ITERATOR_DONE;
      }
      if (r.value === -1 && (r = this.readMetadataLength()).done) {
        return interfaces_12.ITERATOR_DONE;
      }
      if ((r = this.readMetadata(r.value)).done) {
        return interfaces_12.ITERATOR_DONE;
      }
      return r;
    };
    MessageReader2.prototype.throw = function(value) {
      return this.source.throw(value);
    };
    MessageReader2.prototype.return = function(value) {
      return this.source.return(value);
    };
    MessageReader2.prototype.readMessage = function(type2) {
      var r;
      if ((r = this.next()).done) {
        return null;
      }
      if (type2 != null && r.value.headerType !== type2) {
        throw new Error(invalidMessageType(type2));
      }
      return r.value;
    };
    MessageReader2.prototype.readMessageBody = function(bodyLength) {
      if (bodyLength <= 0) {
        return new Uint8Array(0);
      }
      var buf = buffer_12.toUint8Array(this.source.read(bodyLength));
      if (buf.byteLength < bodyLength) {
        throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
      }
      return buf.byteOffset % 8 === 0 && buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice();
    };
    MessageReader2.prototype.readSchema = function(throwIfNull) {
      if (throwIfNull === void 0) {
        throwIfNull = false;
      }
      var type2 = enum_12.MessageHeader.Schema;
      var message2 = this.readMessage(type2);
      var schema2 = message2 === null || message2 === void 0 ? void 0 : message2.header();
      if (throwIfNull && !schema2) {
        throw new Error(nullMessage(type2));
      }
      return schema2;
    };
    MessageReader2.prototype.readMetadataLength = function() {
      var buf = this.source.read(exports.PADDING);
      var bb = buf && new ByteBuffer2(buf);
      var len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
      return { done: len === 0, value: len };
    };
    MessageReader2.prototype.readMetadata = function(metadataLength) {
      var buf = this.source.read(metadataLength);
      if (!buf) {
        return interfaces_12.ITERATOR_DONE;
      }
      if (buf.byteLength < metadataLength) {
        throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
      }
      return { done: false, value: message_12.Message.decode(buf) };
    };
    return MessageReader2;
  }();
  exports.MessageReader = MessageReader;
  var AsyncMessageReader = function() {
    function AsyncMessageReader2(source, byteLength) {
      this.source = source instanceof stream_12.AsyncByteStream ? source : compat_12.isFileHandle(source) ? new file_12.AsyncRandomAccessFile(source, byteLength) : new stream_12.AsyncByteStream(source);
    }
    AsyncMessageReader2.prototype[Symbol.asyncIterator] = function() {
      return this;
    };
    AsyncMessageReader2.prototype.next = function() {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var r, _a;
        return tslib_12.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, this.readMetadataLength()];
            case 1:
              if ((r = _b.sent()).done) {
                return [2, interfaces_12.ITERATOR_DONE];
              }
              _a = r.value === -1;
              if (!_a)
                return [3, 3];
              return [4, this.readMetadataLength()];
            case 2:
              _a = (r = _b.sent()).done;
              _b.label = 3;
            case 3:
              if (_a) {
                return [2, interfaces_12.ITERATOR_DONE];
              }
              return [4, this.readMetadata(r.value)];
            case 4:
              if ((r = _b.sent()).done) {
                return [2, interfaces_12.ITERATOR_DONE];
              }
              return [2, r];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.throw = function(value) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.source.throw(value)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.return = function(value) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.source.return(value)];
            case 1:
              return [2, _a.sent()];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.readMessage = function(type2) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var r;
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.next()];
            case 1:
              if ((r = _a.sent()).done) {
                return [2, null];
              }
              if (type2 != null && r.value.headerType !== type2) {
                throw new Error(invalidMessageType(type2));
              }
              return [2, r.value];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.readMessageBody = function(bodyLength) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var buf, _a;
        return tslib_12.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (bodyLength <= 0) {
                return [2, new Uint8Array(0)];
              }
              _a = buffer_12.toUint8Array;
              return [4, this.source.read(bodyLength)];
            case 1:
              buf = _a.apply(void 0, [_b.sent()]);
              if (buf.byteLength < bodyLength) {
                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));
              }
              return [2, buf.byteOffset % 8 === 0 && buf.byteOffset + buf.byteLength <= buf.buffer.byteLength ? buf : buf.slice()];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.readSchema = function(throwIfNull) {
      if (throwIfNull === void 0) {
        throwIfNull = false;
      }
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var type2, message2, schema2;
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              type2 = enum_12.MessageHeader.Schema;
              return [4, this.readMessage(type2)];
            case 1:
              message2 = _a.sent();
              schema2 = message2 === null || message2 === void 0 ? void 0 : message2.header();
              if (throwIfNull && !schema2) {
                throw new Error(nullMessage(type2));
              }
              return [2, schema2];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.readMetadataLength = function() {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var buf, bb, len;
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.source.read(exports.PADDING)];
            case 1:
              buf = _a.sent();
              bb = buf && new ByteBuffer2(buf);
              len = (bb === null || bb === void 0 ? void 0 : bb.readInt32(0)) || 0;
              return [2, { done: len === 0, value: len }];
          }
        });
      });
    };
    AsyncMessageReader2.prototype.readMetadata = function(metadataLength) {
      return tslib_12.__awaiter(this, void 0, void 0, function() {
        var buf;
        return tslib_12.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, this.source.read(metadataLength)];
            case 1:
              buf = _a.sent();
              if (!buf) {
                return [2, interfaces_12.ITERATOR_DONE];
              }
              if (buf.byteLength < metadataLength) {
                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));
              }
              return [2, { done: false, value: message_12.Message.decode(buf) }];
          }
        });
      });
    };
    return AsyncMessageReader2;
  }();
  exports.AsyncMessageReader = AsyncMessageReader;
  var JSONMessageReader = function(_super) {
    tslib_12.__extends(JSONMessageReader2, _super);
    function JSONMessageReader2(source) {
      var _this = _super.call(this, new Uint8Array(0)) || this;
      _this._schema = false;
      _this._body = [];
      _this._batchIndex = 0;
      _this._dictionaryIndex = 0;
      _this._json = source instanceof interfaces_12.ArrowJSON ? source : new interfaces_12.ArrowJSON(source);
      return _this;
    }
    JSONMessageReader2.prototype.next = function() {
      var _json = this._json;
      if (!this._schema) {
        this._schema = true;
        var message2 = message_12.Message.fromJSON(_json.schema, enum_12.MessageHeader.Schema);
        return { done: false, value: message2 };
      }
      if (this._dictionaryIndex < _json.dictionaries.length) {
        var batch = _json.dictionaries[this._dictionaryIndex++];
        this._body = batch["data"]["columns"];
        var message2 = message_12.Message.fromJSON(batch, enum_12.MessageHeader.DictionaryBatch);
        return { done: false, value: message2 };
      }
      if (this._batchIndex < _json.batches.length) {
        var batch = _json.batches[this._batchIndex++];
        this._body = batch["columns"];
        var message2 = message_12.Message.fromJSON(batch, enum_12.MessageHeader.RecordBatch);
        return { done: false, value: message2 };
      }
      this._body = [];
      return interfaces_12.ITERATOR_DONE;
    };
    JSONMessageReader2.prototype.readMessageBody = function(_bodyLength) {
      return flattenDataSources(this._body);
      function flattenDataSources(xs) {
        return (xs || []).reduce(function(buffers, column2) {
          return tslib_12.__spread(buffers, column2["VALIDITY"] && [column2["VALIDITY"]] || [], column2["TYPE"] && [column2["TYPE"]] || [], column2["OFFSET"] && [column2["OFFSET"]] || [], column2["DATA"] && [column2["DATA"]] || [], flattenDataSources(column2["children"]));
        }, []);
      }
    };
    JSONMessageReader2.prototype.readMessage = function(type2) {
      var r;
      if ((r = this.next()).done) {
        return null;
      }
      if (type2 != null && r.value.headerType !== type2) {
        throw new Error(invalidMessageType(type2));
      }
      return r.value;
    };
    JSONMessageReader2.prototype.readSchema = function() {
      var type2 = enum_12.MessageHeader.Schema;
      var message2 = this.readMessage(type2);
      var schema2 = message2 === null || message2 === void 0 ? void 0 : message2.header();
      if (!message2 || !schema2) {
        throw new Error(nullMessage(type2));
      }
      return schema2;
    };
    return JSONMessageReader2;
  }(MessageReader);
  exports.JSONMessageReader = JSONMessageReader;
  exports.PADDING = 4;
  exports.MAGIC_STR = "ARROW1";
  exports.MAGIC = new Uint8Array(exports.MAGIC_STR.length);
  for (var i = 0; i < exports.MAGIC_STR.length; i += 1 | 0) {
    exports.MAGIC[i] = exports.MAGIC_STR.charCodeAt(i);
  }
  function checkForMagicArrowString(buffer2, index) {
    if (index === void 0) {
      index = 0;
    }
    for (var i2 = -1, n = exports.MAGIC.length; ++i2 < n; ) {
      if (exports.MAGIC[i2] !== buffer2[index + i2]) {
        return false;
      }
    }
    return true;
  }
  exports.checkForMagicArrowString = checkForMagicArrowString;
  exports.magicLength = exports.MAGIC.length;
  exports.magicAndPadding = exports.magicLength + exports.PADDING;
  exports.magicX2AndPadding = exports.magicLength * 2 + exports.PADDING;
})(message$1);
var typecomparator = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.compareTypes = exports.compareFields = exports.compareSchemas = exports.instance = exports.TypeComparator = void 0;
  var tslib_12 = tslib.exports;
  var visitor_12 = visitor;
  var TypeComparator = function(_super) {
    tslib_12.__extends(TypeComparator2, _super);
    function TypeComparator2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    TypeComparator2.prototype.compareSchemas = function(schema2, other) {
      return schema2 === other || other instanceof schema2.constructor && this.compareManyFields(schema2.fields, other.fields);
    };
    TypeComparator2.prototype.compareManyFields = function(fields, others) {
      var _this = this;
      return fields === others || Array.isArray(fields) && Array.isArray(others) && fields.length === others.length && fields.every(function(f, i) {
        return _this.compareFields(f, others[i]);
      });
    };
    TypeComparator2.prototype.compareFields = function(field, other) {
      return field === other || other instanceof field.constructor && field.name === other.name && field.nullable === other.nullable && this.visit(field.type, other.type);
    };
    return TypeComparator2;
  }(visitor_12.Visitor);
  exports.TypeComparator = TypeComparator;
  function compareConstructor(type2, other) {
    return other instanceof type2.constructor;
  }
  function compareAny(type2, other) {
    return type2 === other || compareConstructor(type2, other);
  }
  function compareInt(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.bitWidth === other.bitWidth && type2.isSigned === other.isSigned;
  }
  function compareFloat(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.precision === other.precision;
  }
  function compareFixedSizeBinary(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.byteWidth === other.byteWidth;
  }
  function compareDate(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit;
  }
  function compareTimestamp(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit && type2.timezone === other.timezone;
  }
  function compareTime(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit && type2.bitWidth === other.bitWidth;
  }
  function compareList(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.children.length === other.children.length && exports.instance.compareManyFields(type2.children, other.children);
  }
  function compareStruct(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.children.length === other.children.length && exports.instance.compareManyFields(type2.children, other.children);
  }
  function compareUnion(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.mode === other.mode && type2.typeIds.every(function(x, i) {
      return x === other.typeIds[i];
    }) && exports.instance.compareManyFields(type2.children, other.children);
  }
  function compareDictionary(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.id === other.id && type2.isOrdered === other.isOrdered && exports.instance.visit(type2.indices, other.indices) && exports.instance.visit(type2.dictionary, other.dictionary);
  }
  function compareInterval(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.unit === other.unit;
  }
  function compareFixedSizeList(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.listSize === other.listSize && type2.children.length === other.children.length && exports.instance.compareManyFields(type2.children, other.children);
  }
  function compareMap(type2, other) {
    return type2 === other || compareConstructor(type2, other) && type2.keysSorted === other.keysSorted && type2.children.length === other.children.length && exports.instance.compareManyFields(type2.children, other.children);
  }
  TypeComparator.prototype.visitNull = compareAny;
  TypeComparator.prototype.visitBool = compareAny;
  TypeComparator.prototype.visitInt = compareInt;
  TypeComparator.prototype.visitInt8 = compareInt;
  TypeComparator.prototype.visitInt16 = compareInt;
  TypeComparator.prototype.visitInt32 = compareInt;
  TypeComparator.prototype.visitInt64 = compareInt;
  TypeComparator.prototype.visitUint8 = compareInt;
  TypeComparator.prototype.visitUint16 = compareInt;
  TypeComparator.prototype.visitUint32 = compareInt;
  TypeComparator.prototype.visitUint64 = compareInt;
  TypeComparator.prototype.visitFloat = compareFloat;
  TypeComparator.prototype.visitFloat16 = compareFloat;
  TypeComparator.prototype.visitFloat32 = compareFloat;
  TypeComparator.prototype.visitFloat64 = compareFloat;
  TypeComparator.prototype.visitUtf8 = compareAny;
  TypeComparator.prototype.visitBinary = compareAny;
  TypeComparator.prototype.visitFixedSizeBinary = compareFixedSizeBinary;
  TypeComparator.prototype.visitDate = compareDate;
  TypeComparator.prototype.visitDateDay = compareDate;
  TypeComparator.prototype.visitDateMillisecond = compareDate;
  TypeComparator.prototype.visitTimestamp = compareTimestamp;
  TypeComparator.prototype.visitTimestampSecond = compareTimestamp;
  TypeComparator.prototype.visitTimestampMillisecond = compareTimestamp;
  TypeComparator.prototype.visitTimestampMicrosecond = compareTimestamp;
  TypeComparator.prototype.visitTimestampNanosecond = compareTimestamp;
  TypeComparator.prototype.visitTime = compareTime;
  TypeComparator.prototype.visitTimeSecond = compareTime;
  TypeComparator.prototype.visitTimeMillisecond = compareTime;
  TypeComparator.prototype.visitTimeMicrosecond = compareTime;
  TypeComparator.prototype.visitTimeNanosecond = compareTime;
  TypeComparator.prototype.visitDecimal = compareAny;
  TypeComparator.prototype.visitList = compareList;
  TypeComparator.prototype.visitStruct = compareStruct;
  TypeComparator.prototype.visitUnion = compareUnion;
  TypeComparator.prototype.visitDenseUnion = compareUnion;
  TypeComparator.prototype.visitSparseUnion = compareUnion;
  TypeComparator.prototype.visitDictionary = compareDictionary;
  TypeComparator.prototype.visitInterval = compareInterval;
  TypeComparator.prototype.visitIntervalDayTime = compareInterval;
  TypeComparator.prototype.visitIntervalYearMonth = compareInterval;
  TypeComparator.prototype.visitFixedSizeList = compareFixedSizeList;
  TypeComparator.prototype.visitMap = compareMap;
  exports.instance = new TypeComparator();
  function compareSchemas(schema2, other) {
    return exports.instance.compareSchemas(schema2, other);
  }
  exports.compareSchemas = compareSchemas;
  function compareFields(field, other) {
    return exports.instance.compareFields(field, other);
  }
  exports.compareFields = compareFields;
  function compareTypes(type2, other) {
    return exports.instance.visit(type2, other);
  }
  exports.compareTypes = compareTypes;
})(typecomparator);
var vectorassembler = {};
Object.defineProperty(vectorassembler, "__esModule", { value: true });
vectorassembler.VectorAssembler = void 0;
var tslib_1$C = tslib.exports;
var visitor_1$9 = visitor;
var enum_1$a = _enum;
var recordbatch_1$7 = recordbatch$1;
var buffer_1$3 = buffer$1;
var bit_1$3 = bit;
var args_1$3 = args;
var message_1$2 = message;
var type_1$d = type;
var VectorAssembler = function(_super) {
  tslib_1$C.__extends(VectorAssembler2, _super);
  function VectorAssembler2() {
    var _this = _super.call(this) || this;
    _this._byteLength = 0;
    _this._nodes = [];
    _this._buffers = [];
    _this._bufferRegions = [];
    return _this;
  }
  VectorAssembler2.assemble = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var assembler = new VectorAssembler2();
    var vectorChildren = args_1$3.selectVectorChildrenArgs(recordbatch_1$7.RecordBatch, args2);
    var _a = tslib_1$C.__read(assembler.visitMany(vectorChildren), 1), _b = _a[0], assembleResult = _b === void 0 ? assembler : _b;
    return assembleResult;
  };
  VectorAssembler2.prototype.visit = function(vector2) {
    if (!type_1$d.DataType.isDictionary(vector2.type)) {
      var data2 = vector2.data, length_1 = vector2.length, nullCount = vector2.nullCount;
      if (length_1 > 2147483647) {
        throw new RangeError("Cannot write arrays larger than 2^31 - 1 in length");
      }
      if (!type_1$d.DataType.isNull(vector2.type)) {
        addBuffer.call(this, nullCount <= 0 ? new Uint8Array(0) : bit_1$3.truncateBitmap(data2.offset, length_1, data2.nullBitmap));
      }
      this.nodes.push(new message_1$2.FieldNode(length_1, nullCount));
    }
    return _super.prototype.visit.call(this, vector2);
  };
  VectorAssembler2.prototype.visitNull = function(_nullV) {
    return this;
  };
  VectorAssembler2.prototype.visitDictionary = function(vector2) {
    return this.visit(vector2.indices);
  };
  Object.defineProperty(VectorAssembler2.prototype, "nodes", {
    get: function() {
      return this._nodes;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(VectorAssembler2.prototype, "buffers", {
    get: function() {
      return this._buffers;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(VectorAssembler2.prototype, "byteLength", {
    get: function() {
      return this._byteLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(VectorAssembler2.prototype, "bufferRegions", {
    get: function() {
      return this._bufferRegions;
    },
    enumerable: false,
    configurable: true
  });
  return VectorAssembler2;
}(visitor_1$9.Visitor);
vectorassembler.VectorAssembler = VectorAssembler;
function addBuffer(values) {
  var byteLength = values.byteLength + 7 & ~7;
  this.buffers.push(values);
  this.bufferRegions.push(new message_1$2.BufferRegion(this._byteLength, byteLength));
  this._byteLength += byteLength;
  return this;
}
function assembleUnion(vector2) {
  var type2 = vector2.type, length = vector2.length, typeIds = vector2.typeIds, valueOffsets = vector2.valueOffsets;
  addBuffer.call(this, typeIds);
  if (type2.mode === enum_1$a.UnionMode.Sparse) {
    return assembleNestedVector.call(this, vector2);
  } else if (type2.mode === enum_1$a.UnionMode.Dense) {
    if (vector2.offset <= 0) {
      addBuffer.call(this, valueOffsets);
      return assembleNestedVector.call(this, vector2);
    } else {
      var maxChildTypeId = typeIds.reduce(function(x, y) {
        return Math.max(x, y);
      }, typeIds[0]);
      var childLengths = new Int32Array(maxChildTypeId + 1);
      var childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);
      var shiftedOffsets = new Int32Array(length);
      var unshiftedOffsets = buffer_1$3.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);
      for (var typeId = void 0, shift = void 0, index = -1; ++index < length; ) {
        if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {
          shift = childOffsets[typeId] = unshiftedOffsets[typeId];
        }
        shiftedOffsets[index] = unshiftedOffsets[index] - shift;
        ++childLengths[typeId];
      }
      addBuffer.call(this, shiftedOffsets);
      for (var child = void 0, childIndex = -1, numChildren = type2.children.length; ++childIndex < numChildren; ) {
        if (child = vector2.getChildAt(childIndex)) {
          var typeId = type2.typeIds[childIndex];
          var childLength = Math.min(length, childLengths[typeId]);
          this.visit(child.slice(childOffsets[typeId], childLength));
        }
      }
    }
  }
  return this;
}
function assembleBoolVector(vector2) {
  var values;
  if (vector2.nullCount >= vector2.length) {
    return addBuffer.call(this, new Uint8Array(0));
  } else if ((values = vector2.values) instanceof Uint8Array) {
    return addBuffer.call(this, bit_1$3.truncateBitmap(vector2.offset, vector2.length, values));
  }
  return addBuffer.call(this, bit_1$3.packBools(vector2));
}
function assembleFlatVector(vector2) {
  return addBuffer.call(this, vector2.values.subarray(0, vector2.length * vector2.stride));
}
function assembleFlatListVector(vector2) {
  var length = vector2.length, values = vector2.values, valueOffsets = vector2.valueOffsets;
  var firstOffset = valueOffsets[0];
  var lastOffset = valueOffsets[length];
  var byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);
  addBuffer.call(this, buffer_1$3.rebaseValueOffsets(-valueOffsets[0], length, valueOffsets));
  addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength));
  return this;
}
function assembleListVector(vector2) {
  var length = vector2.length, valueOffsets = vector2.valueOffsets;
  if (valueOffsets) {
    addBuffer.call(this, buffer_1$3.rebaseValueOffsets(valueOffsets[0], length, valueOffsets));
  }
  return this.visit(vector2.getChildAt(0));
}
function assembleNestedVector(vector2) {
  return this.visitMany(vector2.type.children.map(function(_, i) {
    return vector2.getChildAt(i);
  }).filter(Boolean))[0];
}
VectorAssembler.prototype.visitBool = assembleBoolVector;
VectorAssembler.prototype.visitInt = assembleFlatVector;
VectorAssembler.prototype.visitFloat = assembleFlatVector;
VectorAssembler.prototype.visitUtf8 = assembleFlatListVector;
VectorAssembler.prototype.visitBinary = assembleFlatListVector;
VectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;
VectorAssembler.prototype.visitDate = assembleFlatVector;
VectorAssembler.prototype.visitTimestamp = assembleFlatVector;
VectorAssembler.prototype.visitTime = assembleFlatVector;
VectorAssembler.prototype.visitDecimal = assembleFlatVector;
VectorAssembler.prototype.visitList = assembleListVector;
VectorAssembler.prototype.visitStruct = assembleNestedVector;
VectorAssembler.prototype.visitUnion = assembleUnion;
VectorAssembler.prototype.visitInterval = assembleFlatVector;
VectorAssembler.prototype.visitFixedSizeList = assembleListVector;
VectorAssembler.prototype.visitMap = assembleListVector;
var jsontypeassembler = {};
Object.defineProperty(jsontypeassembler, "__esModule", { value: true });
jsontypeassembler.JSONTypeAssembler = void 0;
var tslib_1$B = tslib.exports;
var visitor_1$8 = visitor;
var Schema_1 = Schema$1;
var enum_1$9 = _enum;
var JSONTypeAssembler = function(_super) {
  tslib_1$B.__extends(JSONTypeAssembler2, _super);
  function JSONTypeAssembler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  JSONTypeAssembler2.prototype.visit = function(node) {
    return node == null ? void 0 : _super.prototype.visit.call(this, node);
  };
  JSONTypeAssembler2.prototype.visitNull = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitInt = function(_a) {
    var typeId = _a.typeId, bitWidth = _a.bitWidth, isSigned = _a.isSigned;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "bitWidth": bitWidth, "isSigned": isSigned };
  };
  JSONTypeAssembler2.prototype.visitFloat = function(_a) {
    var typeId = _a.typeId, precision = _a.precision;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "precision": enum_1$9.Precision[precision] };
  };
  JSONTypeAssembler2.prototype.visitBinary = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitBool = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitUtf8 = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitDecimal = function(_a) {
    var typeId = _a.typeId, scale = _a.scale, precision = _a.precision;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "scale": scale, "precision": precision };
  };
  JSONTypeAssembler2.prototype.visitDate = function(_a) {
    var typeId = _a.typeId, unit2 = _a.unit;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "unit": enum_1$9.DateUnit[unit2] };
  };
  JSONTypeAssembler2.prototype.visitTime = function(_a) {
    var typeId = _a.typeId, unit2 = _a.unit, bitWidth = _a.bitWidth;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "unit": enum_1$9.TimeUnit[unit2], bitWidth };
  };
  JSONTypeAssembler2.prototype.visitTimestamp = function(_a) {
    var typeId = _a.typeId, timezone = _a.timezone, unit2 = _a.unit;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "unit": enum_1$9.TimeUnit[unit2], timezone };
  };
  JSONTypeAssembler2.prototype.visitInterval = function(_a) {
    var typeId = _a.typeId, unit2 = _a.unit;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "unit": enum_1$9.IntervalUnit[unit2] };
  };
  JSONTypeAssembler2.prototype.visitList = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitStruct = function(_a) {
    var typeId = _a.typeId;
    return { "name": Schema_1.Type[typeId].toLowerCase() };
  };
  JSONTypeAssembler2.prototype.visitUnion = function(_a) {
    var typeId = _a.typeId, mode = _a.mode, typeIds = _a.typeIds;
    return {
      "name": Schema_1.Type[typeId].toLowerCase(),
      "mode": enum_1$9.UnionMode[mode],
      "typeIds": tslib_1$B.__spread(typeIds)
    };
  };
  JSONTypeAssembler2.prototype.visitDictionary = function(node) {
    return this.visit(node.dictionary);
  };
  JSONTypeAssembler2.prototype.visitFixedSizeBinary = function(_a) {
    var typeId = _a.typeId, byteWidth = _a.byteWidth;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "byteWidth": byteWidth };
  };
  JSONTypeAssembler2.prototype.visitFixedSizeList = function(_a) {
    var typeId = _a.typeId, listSize = _a.listSize;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "listSize": listSize };
  };
  JSONTypeAssembler2.prototype.visitMap = function(_a) {
    var typeId = _a.typeId, keysSorted = _a.keysSorted;
    return { "name": Schema_1.Type[typeId].toLowerCase(), "keysSorted": keysSorted };
  };
  return JSONTypeAssembler2;
}(visitor_1$8.Visitor);
jsontypeassembler.JSONTypeAssembler = JSONTypeAssembler;
var jsonvectorassembler = {};
Object.defineProperty(jsonvectorassembler, "__esModule", { value: true });
jsonvectorassembler.JSONVectorAssembler = void 0;
var tslib_1$A = tslib.exports;
var bn_1$1 = bn;
var column_1$2 = column;
var vector_1$a = vector$2;
var visitor_1$7 = visitor;
var enum_1$8 = _enum;
var recordbatch_1$6 = recordbatch$1;
var enum_2 = _enum;
var bit_1$2 = bit;
var args_1$2 = args;
var type_1$c = type;
var JSONVectorAssembler = function(_super) {
  tslib_1$A.__extends(JSONVectorAssembler2, _super);
  function JSONVectorAssembler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  JSONVectorAssembler2.assemble = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    return new JSONVectorAssembler2().visitMany(args_1$2.selectColumnChildrenArgs(recordbatch_1$6.RecordBatch, args2));
  };
  JSONVectorAssembler2.prototype.visit = function(column2) {
    var _a;
    var data2 = column2.data, name = column2.name, length = column2.length;
    var offset = data2.offset, nullCount = data2.nullCount, nullBitmap = data2.nullBitmap;
    var type2 = type_1$c.DataType.isDictionary(column2.type) ? column2.type.indices : column2.type;
    var buffers = Object.assign([], data2.buffers, (_a = {}, _a[enum_1$8.BufferType.VALIDITY] = void 0, _a));
    return tslib_1$A.__assign({ "name": name, "count": length, "VALIDITY": type_1$c.DataType.isNull(type2) ? void 0 : nullCount <= 0 ? Array.from({ length }, function() {
      return 1;
    }) : tslib_1$A.__spread(new bit_1$2.BitIterator(nullBitmap, offset, length, null, bit_1$2.getBit)) }, _super.prototype.visit.call(this, vector_1$a.Vector.new(data2.clone(type2, offset, length, 0, buffers))));
  };
  JSONVectorAssembler2.prototype.visitNull = function() {
    return {};
  };
  JSONVectorAssembler2.prototype.visitBool = function(_a) {
    var values = _a.values, offset = _a.offset, length = _a.length;
    return { "DATA": tslib_1$A.__spread(new bit_1$2.BitIterator(values, offset, length, null, bit_1$2.getBool)) };
  };
  JSONVectorAssembler2.prototype.visitInt = function(vector2) {
    return {
      "DATA": vector2.type.bitWidth < 64 ? tslib_1$A.__spread(vector2.values) : tslib_1$A.__spread(bigNumsToStrings(vector2.values, 2))
    };
  };
  JSONVectorAssembler2.prototype.visitFloat = function(vector2) {
    return { "DATA": tslib_1$A.__spread(vector2.values) };
  };
  JSONVectorAssembler2.prototype.visitUtf8 = function(vector2) {
    return { "DATA": tslib_1$A.__spread(vector2), "OFFSET": tslib_1$A.__spread(vector2.valueOffsets) };
  };
  JSONVectorAssembler2.prototype.visitBinary = function(vector2) {
    return { "DATA": tslib_1$A.__spread(binaryToString(vector2)), OFFSET: tslib_1$A.__spread(vector2.valueOffsets) };
  };
  JSONVectorAssembler2.prototype.visitFixedSizeBinary = function(vector2) {
    return { "DATA": tslib_1$A.__spread(binaryToString(vector2)) };
  };
  JSONVectorAssembler2.prototype.visitDate = function(vector2) {
    return {
      "DATA": vector2.type.unit === enum_2.DateUnit.DAY ? tslib_1$A.__spread(vector2.values) : tslib_1$A.__spread(bigNumsToStrings(vector2.values, 2))
    };
  };
  JSONVectorAssembler2.prototype.visitTimestamp = function(vector2) {
    return { "DATA": tslib_1$A.__spread(bigNumsToStrings(vector2.values, 2)) };
  };
  JSONVectorAssembler2.prototype.visitTime = function(vector2) {
    return {
      "DATA": vector2.type.unit < enum_2.TimeUnit.MICROSECOND ? tslib_1$A.__spread(vector2.values) : tslib_1$A.__spread(bigNumsToStrings(vector2.values, 2))
    };
  };
  JSONVectorAssembler2.prototype.visitDecimal = function(vector2) {
    return { "DATA": tslib_1$A.__spread(bigNumsToStrings(vector2.values, 4)) };
  };
  JSONVectorAssembler2.prototype.visitList = function(vector2) {
    var _this = this;
    return {
      "OFFSET": tslib_1$A.__spread(vector2.valueOffsets),
      "children": vector2.type.children.map(function(f, i) {
        return _this.visit(new column_1$2.Column(f, [vector2.getChildAt(i)]));
      })
    };
  };
  JSONVectorAssembler2.prototype.visitStruct = function(vector2) {
    var _this = this;
    return {
      "children": vector2.type.children.map(function(f, i) {
        return _this.visit(new column_1$2.Column(f, [vector2.getChildAt(i)]));
      })
    };
  };
  JSONVectorAssembler2.prototype.visitUnion = function(vector2) {
    var _this = this;
    return {
      "TYPE": tslib_1$A.__spread(vector2.typeIds),
      "OFFSET": vector2.type.mode === enum_2.UnionMode.Dense ? tslib_1$A.__spread(vector2.valueOffsets) : void 0,
      "children": vector2.type.children.map(function(f, i) {
        return _this.visit(new column_1$2.Column(f, [vector2.getChildAt(i)]));
      })
    };
  };
  JSONVectorAssembler2.prototype.visitInterval = function(vector2) {
    return { "DATA": tslib_1$A.__spread(vector2.values) };
  };
  JSONVectorAssembler2.prototype.visitFixedSizeList = function(vector2) {
    var _this = this;
    return {
      "children": vector2.type.children.map(function(f, i) {
        return _this.visit(new column_1$2.Column(f, [vector2.getChildAt(i)]));
      })
    };
  };
  JSONVectorAssembler2.prototype.visitMap = function(vector2) {
    var _this = this;
    return {
      "OFFSET": tslib_1$A.__spread(vector2.valueOffsets),
      "children": vector2.type.children.map(function(f, i) {
        return _this.visit(new column_1$2.Column(f, [vector2.getChildAt(i)]));
      })
    };
  };
  return JSONVectorAssembler2;
}(visitor_1$7.Visitor);
jsonvectorassembler.JSONVectorAssembler = JSONVectorAssembler;
function binaryToString(vector2) {
  var _a, _b, octets, e_1_1;
  var e_1, _c;
  return tslib_1$A.__generator(this, function(_d) {
    switch (_d.label) {
      case 0:
        _d.trys.push([0, 5, 6, 7]);
        _a = tslib_1$A.__values(vector2), _b = _a.next();
        _d.label = 1;
      case 1:
        if (!!_b.done)
          return [3, 4];
        octets = _b.value;
        return [4, octets.reduce(function(str, byte) {
          return "" + str + ("0" + (byte & 255).toString(16)).slice(-2);
        }, "").toUpperCase()];
      case 2:
        _d.sent();
        _d.label = 3;
      case 3:
        _b = _a.next();
        return [3, 1];
      case 4:
        return [3, 7];
      case 5:
        e_1_1 = _d.sent();
        e_1 = { error: e_1_1 };
        return [3, 7];
      case 6:
        try {
          if (_b && !_b.done && (_c = _a.return))
            _c.call(_a);
        } finally {
          if (e_1)
            throw e_1.error;
        }
        return [7];
      case 7:
        return [2];
    }
  });
}
function bigNumsToStrings(values, stride) {
  var i, n;
  return tslib_1$A.__generator(this, function(_a) {
    switch (_a.label) {
      case 0:
        i = -1, n = values.length / stride;
        _a.label = 1;
      case 1:
        if (!(++i < n))
          return [3, 4];
        return [4, "" + bn_1$1.BN.new(values.subarray((i + 0) * stride, (i + 1) * stride), false)];
      case 2:
        _a.sent();
        _a.label = 3;
      case 3:
        return [3, 1];
      case 4:
        return [2];
    }
  });
}
Object.defineProperty(writer$1, "__esModule", { value: true });
writer$1.RecordBatchJSONWriter = writer$1.RecordBatchFileWriter = writer$1.RecordBatchStreamWriter = writer$1.RecordBatchWriter = void 0;
var tslib_1$z = tslib.exports;
var table_1$2 = table;
var message_1$1 = message$1;
var column_1$1 = column;
var type_1$b = type;
var schema_1$4 = schema;
var message_2 = message;
var metadata = message;
var file_1$1 = file$1;
var enum_1$7 = _enum;
var typecomparator_1 = typecomparator;
var stream_1$3 = stream;
var vectorassembler_1 = vectorassembler;
var jsontypeassembler_1 = jsontypeassembler;
var jsonvectorassembler_1 = jsonvectorassembler;
var buffer_1$2 = buffer$1;
var recordbatch_1$5 = recordbatch$1;
var interfaces_1$1 = interfaces;
var compat_1$5 = compat;
var RecordBatchWriter = function(_super) {
  tslib_1$z.__extends(RecordBatchWriter2, _super);
  function RecordBatchWriter2(options) {
    var _this = _super.call(this) || this;
    _this._position = 0;
    _this._started = false;
    _this._sink = new stream_1$3.AsyncByteQueue();
    _this._schema = null;
    _this._dictionaryBlocks = [];
    _this._recordBatchBlocks = [];
    _this._dictionaryDeltaOffsets = new Map();
    compat_1$5.isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });
    _this._autoDestroy = typeof options.autoDestroy === "boolean" ? options.autoDestroy : true;
    _this._writeLegacyIpcFormat = typeof options.writeLegacyIpcFormat === "boolean" ? options.writeLegacyIpcFormat : false;
    return _this;
  }
  RecordBatchWriter2.throughNode = function(options) {
    throw new Error('"throughNode" not available in this environment');
  };
  RecordBatchWriter2.throughDOM = function(writableStrategy, readableStrategy) {
    throw new Error('"throughDOM" not available in this environment');
  };
  RecordBatchWriter2.prototype.toString = function(sync) {
    if (sync === void 0) {
      sync = false;
    }
    return this._sink.toString(sync);
  };
  RecordBatchWriter2.prototype.toUint8Array = function(sync) {
    if (sync === void 0) {
      sync = false;
    }
    return this._sink.toUint8Array(sync);
  };
  RecordBatchWriter2.prototype.writeAll = function(input) {
    var _this = this;
    if (compat_1$5.isPromise(input)) {
      return input.then(function(x) {
        return _this.writeAll(x);
      });
    } else if (compat_1$5.isAsyncIterable(input)) {
      return writeAllAsync(this, input);
    }
    return writeAll(this, input);
  };
  Object.defineProperty(RecordBatchWriter2.prototype, "closed", {
    get: function() {
      return this._sink.closed;
    },
    enumerable: false,
    configurable: true
  });
  RecordBatchWriter2.prototype[Symbol.asyncIterator] = function() {
    return this._sink[Symbol.asyncIterator]();
  };
  RecordBatchWriter2.prototype.toDOMStream = function(options) {
    return this._sink.toDOMStream(options);
  };
  RecordBatchWriter2.prototype.toNodeStream = function(options) {
    return this._sink.toNodeStream(options);
  };
  RecordBatchWriter2.prototype.close = function() {
    return this.reset()._sink.close();
  };
  RecordBatchWriter2.prototype.abort = function(reason) {
    return this.reset()._sink.abort(reason);
  };
  RecordBatchWriter2.prototype.finish = function() {
    this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);
    return this;
  };
  RecordBatchWriter2.prototype.reset = function(sink, schema2) {
    if (sink === void 0) {
      sink = this._sink;
    }
    if (schema2 === void 0) {
      schema2 = null;
    }
    if (sink === this._sink || sink instanceof stream_1$3.AsyncByteQueue) {
      this._sink = sink;
    } else {
      this._sink = new stream_1$3.AsyncByteQueue();
      if (sink && compat_1$5.isWritableDOMStream(sink)) {
        this.toDOMStream({ type: "bytes" }).pipeTo(sink);
      } else if (sink && compat_1$5.isWritableNodeStream(sink)) {
        this.toNodeStream({ objectMode: false }).pipe(sink);
      }
    }
    if (this._started && this._schema) {
      this._writeFooter(this._schema);
    }
    this._started = false;
    this._dictionaryBlocks = [];
    this._recordBatchBlocks = [];
    this._dictionaryDeltaOffsets = new Map();
    if (!schema2 || !typecomparator_1.compareSchemas(schema2, this._schema)) {
      if (schema2 === null) {
        this._position = 0;
        this._schema = null;
      } else {
        this._started = true;
        this._schema = schema2;
        this._writeSchema(schema2);
      }
    }
    return this;
  };
  RecordBatchWriter2.prototype.write = function(payload) {
    var schema2 = null;
    if (!this._sink) {
      throw new Error("RecordBatchWriter is closed");
    } else if (payload == null) {
      return this.finish() && void 0;
    } else if (payload instanceof table_1$2.Table && !(schema2 = payload.schema)) {
      return this.finish() && void 0;
    } else if (payload instanceof recordbatch_1$5.RecordBatch && !(schema2 = payload.schema)) {
      return this.finish() && void 0;
    }
    if (schema2 && !typecomparator_1.compareSchemas(schema2, this._schema)) {
      if (this._started && this._autoDestroy) {
        return this.close();
      }
      this.reset(this._sink, schema2);
    }
    if (payload instanceof recordbatch_1$5.RecordBatch) {
      if (!(payload instanceof recordbatch_1$5._InternalEmptyPlaceholderRecordBatch)) {
        this._writeRecordBatch(payload);
      }
    } else if (payload instanceof table_1$2.Table) {
      this.writeAll(payload.chunks);
    } else if (compat_1$5.isIterable(payload)) {
      this.writeAll(payload);
    }
  };
  RecordBatchWriter2.prototype._writeMessage = function(message2, alignment) {
    if (alignment === void 0) {
      alignment = 8;
    }
    var a = alignment - 1;
    var buffer2 = message_2.Message.encode(message2);
    var flatbufferSize = buffer2.byteLength;
    var prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;
    var alignedSize = flatbufferSize + prefixSize + a & ~a;
    var nPaddingBytes = alignedSize - flatbufferSize - prefixSize;
    if (message2.headerType === enum_1$7.MessageHeader.RecordBatch) {
      this._recordBatchBlocks.push(new file_1$1.FileBlock(alignedSize, message2.bodyLength, this._position));
    } else if (message2.headerType === enum_1$7.MessageHeader.DictionaryBatch) {
      this._dictionaryBlocks.push(new file_1$1.FileBlock(alignedSize, message2.bodyLength, this._position));
    }
    if (!this._writeLegacyIpcFormat) {
      this._write(Int32Array.of(-1));
    }
    this._write(Int32Array.of(alignedSize - prefixSize));
    if (flatbufferSize > 0) {
      this._write(buffer2);
    }
    return this._writePadding(nPaddingBytes);
  };
  RecordBatchWriter2.prototype._write = function(chunk) {
    if (this._started) {
      var buffer2 = buffer_1$2.toUint8Array(chunk);
      if (buffer2 && buffer2.byteLength > 0) {
        this._sink.write(buffer2);
        this._position += buffer2.byteLength;
      }
    }
    return this;
  };
  RecordBatchWriter2.prototype._writeSchema = function(schema2) {
    return this._writeMessage(message_2.Message.from(schema2));
  };
  RecordBatchWriter2.prototype._writeFooter = function(schema2) {
    return this._writeLegacyIpcFormat ? this._write(Int32Array.of(0)) : this._write(Int32Array.of(-1, 0));
  };
  RecordBatchWriter2.prototype._writeMagic = function() {
    return this._write(message_1$1.MAGIC);
  };
  RecordBatchWriter2.prototype._writePadding = function(nBytes) {
    return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;
  };
  RecordBatchWriter2.prototype._writeRecordBatch = function(batch) {
    var _a = vectorassembler_1.VectorAssembler.assemble(batch), byteLength = _a.byteLength, nodes = _a.nodes, bufferRegions = _a.bufferRegions, buffers = _a.buffers;
    var recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);
    var message2 = message_2.Message.from(recordBatch, byteLength);
    return this._writeDictionaries(batch)._writeMessage(message2)._writeBodyBuffers(buffers);
  };
  RecordBatchWriter2.prototype._writeDictionaryBatch = function(dictionary2, id2, isDelta) {
    if (isDelta === void 0) {
      isDelta = false;
    }
    this._dictionaryDeltaOffsets.set(id2, dictionary2.length + (this._dictionaryDeltaOffsets.get(id2) || 0));
    var _a = vectorassembler_1.VectorAssembler.assemble(dictionary2), byteLength = _a.byteLength, nodes = _a.nodes, bufferRegions = _a.bufferRegions, buffers = _a.buffers;
    var recordBatch = new metadata.RecordBatch(dictionary2.length, nodes, bufferRegions);
    var dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id2, isDelta);
    var message2 = message_2.Message.from(dictionaryBatch, byteLength);
    return this._writeMessage(message2)._writeBodyBuffers(buffers);
  };
  RecordBatchWriter2.prototype._writeBodyBuffers = function(buffers) {
    var buffer2;
    var size, padding;
    for (var i = -1, n = buffers.length; ++i < n; ) {
      if ((buffer2 = buffers[i]) && (size = buffer2.byteLength) > 0) {
        this._write(buffer2);
        if ((padding = (size + 7 & ~7) - size) > 0) {
          this._writePadding(padding);
        }
      }
    }
    return this;
  };
  RecordBatchWriter2.prototype._writeDictionaries = function(batch) {
    var e_1, _a, e_2, _b;
    try {
      for (var _c = tslib_1$z.__values(batch.dictionaries), _d = _c.next(); !_d.done; _d = _c.next()) {
        var _e = tslib_1$z.__read(_d.value, 2), id2 = _e[0], dictionary2 = _e[1];
        var offset = this._dictionaryDeltaOffsets.get(id2) || 0;
        if (offset === 0 || (dictionary2 = dictionary2.slice(offset)).length > 0) {
          var chunks = "chunks" in dictionary2 ? dictionary2.chunks : [dictionary2];
          try {
            for (var chunks_1 = (e_2 = void 0, tslib_1$z.__values(chunks)), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()) {
              var chunk = chunks_1_1.value;
              this._writeDictionaryBatch(chunk, id2, offset > 0);
              offset += chunk.length;
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return))
                _b.call(chunks_1);
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return))
          _a.call(_c);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return this;
  };
  return RecordBatchWriter2;
}(interfaces_1$1.ReadableInterop);
writer$1.RecordBatchWriter = RecordBatchWriter;
var RecordBatchStreamWriter = function(_super) {
  tslib_1$z.__extends(RecordBatchStreamWriter2, _super);
  function RecordBatchStreamWriter2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  RecordBatchStreamWriter2.writeAll = function(input, options) {
    var writer2 = new RecordBatchStreamWriter2(options);
    if (compat_1$5.isPromise(input)) {
      return input.then(function(x) {
        return writer2.writeAll(x);
      });
    } else if (compat_1$5.isAsyncIterable(input)) {
      return writeAllAsync(writer2, input);
    }
    return writeAll(writer2, input);
  };
  return RecordBatchStreamWriter2;
}(RecordBatchWriter);
writer$1.RecordBatchStreamWriter = RecordBatchStreamWriter;
var RecordBatchFileWriter = function(_super) {
  tslib_1$z.__extends(RecordBatchFileWriter2, _super);
  function RecordBatchFileWriter2() {
    var _this = _super.call(this) || this;
    _this._autoDestroy = true;
    return _this;
  }
  RecordBatchFileWriter2.writeAll = function(input) {
    var writer2 = new RecordBatchFileWriter2();
    if (compat_1$5.isPromise(input)) {
      return input.then(function(x) {
        return writer2.writeAll(x);
      });
    } else if (compat_1$5.isAsyncIterable(input)) {
      return writeAllAsync(writer2, input);
    }
    return writeAll(writer2, input);
  };
  RecordBatchFileWriter2.prototype._writeSchema = function(schema2) {
    return this._writeMagic()._writePadding(2);
  };
  RecordBatchFileWriter2.prototype._writeFooter = function(schema2) {
    var buffer2 = file_1$1.Footer.encode(new file_1$1.Footer(schema2, enum_1$7.MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));
    return _super.prototype._writeFooter.call(this, schema2)._write(buffer2)._write(Int32Array.of(buffer2.byteLength))._writeMagic();
  };
  return RecordBatchFileWriter2;
}(RecordBatchWriter);
writer$1.RecordBatchFileWriter = RecordBatchFileWriter;
var RecordBatchJSONWriter = function(_super) {
  tslib_1$z.__extends(RecordBatchJSONWriter2, _super);
  function RecordBatchJSONWriter2() {
    var _this = _super.call(this) || this;
    _this._autoDestroy = true;
    _this._recordBatches = [];
    _this._dictionaries = [];
    return _this;
  }
  RecordBatchJSONWriter2.writeAll = function(input) {
    return new RecordBatchJSONWriter2().writeAll(input);
  };
  RecordBatchJSONWriter2.prototype._writeMessage = function() {
    return this;
  };
  RecordBatchJSONWriter2.prototype._writeFooter = function(schema2) {
    return this;
  };
  RecordBatchJSONWriter2.prototype._writeSchema = function(schema2) {
    return this._write('{\n  "schema": ' + JSON.stringify({ fields: schema2.fields.map(fieldToJSON) }, null, 2));
  };
  RecordBatchJSONWriter2.prototype._writeDictionaries = function(batch) {
    if (batch.dictionaries.size > 0) {
      this._dictionaries.push(batch);
    }
    return this;
  };
  RecordBatchJSONWriter2.prototype._writeDictionaryBatch = function(dictionary2, id2, isDelta) {
    if (isDelta === void 0) {
      isDelta = false;
    }
    this._dictionaryDeltaOffsets.set(id2, dictionary2.length + (this._dictionaryDeltaOffsets.get(id2) || 0));
    this._write(this._dictionaryBlocks.length === 0 ? "    " : ",\n    ");
    this._write("" + dictionaryBatchToJSON(dictionary2, id2, isDelta));
    this._dictionaryBlocks.push(new file_1$1.FileBlock(0, 0, 0));
    return this;
  };
  RecordBatchJSONWriter2.prototype._writeRecordBatch = function(batch) {
    this._writeDictionaries(batch);
    this._recordBatches.push(batch);
    return this;
  };
  RecordBatchJSONWriter2.prototype.close = function() {
    var e_3, _a;
    if (this._dictionaries.length > 0) {
      this._write(',\n  "dictionaries": [\n');
      try {
        for (var _b = tslib_1$z.__values(this._dictionaries), _c = _b.next(); !_c.done; _c = _b.next()) {
          var batch = _c.value;
          _super.prototype._writeDictionaries.call(this, batch);
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
      this._write("\n  ]");
    }
    if (this._recordBatches.length > 0) {
      for (var i = -1, n = this._recordBatches.length; ++i < n; ) {
        this._write(i === 0 ? ',\n  "batches": [\n    ' : ",\n    ");
        this._write("" + recordBatchToJSON(this._recordBatches[i]));
        this._recordBatchBlocks.push(new file_1$1.FileBlock(0, 0, 0));
      }
      this._write("\n  ]");
    }
    if (this._schema) {
      this._write("\n}");
    }
    this._dictionaries = [];
    this._recordBatches = [];
    return _super.prototype.close.call(this);
  };
  return RecordBatchJSONWriter2;
}(RecordBatchWriter);
writer$1.RecordBatchJSONWriter = RecordBatchJSONWriter;
function writeAll(writer2, input) {
  var e_4, _a;
  var chunks = input;
  if (input instanceof table_1$2.Table) {
    chunks = input.chunks;
    writer2.reset(void 0, input.schema);
  }
  try {
    for (var chunks_2 = tslib_1$z.__values(chunks), chunks_2_1 = chunks_2.next(); !chunks_2_1.done; chunks_2_1 = chunks_2.next()) {
      var batch = chunks_2_1.value;
      writer2.write(batch);
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (chunks_2_1 && !chunks_2_1.done && (_a = chunks_2.return))
        _a.call(chunks_2);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return writer2.finish();
}
function writeAllAsync(writer2, batches) {
  var batches_1, batches_1_1;
  var e_5, _a;
  return tslib_1$z.__awaiter(this, void 0, void 0, function() {
    var batch, e_5_1;
    return tslib_1$z.__generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          batches_1 = tslib_1$z.__asyncValues(batches);
          _b.label = 1;
        case 1:
          return [4, batches_1.next()];
        case 2:
          if (!(batches_1_1 = _b.sent(), !batches_1_1.done))
            return [3, 4];
          batch = batches_1_1.value;
          writer2.write(batch);
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_5_1 = _b.sent();
          e_5 = { error: e_5_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(batches_1_1 && !batches_1_1.done && (_a = batches_1.return)))
            return [3, 8];
          return [4, _a.call(batches_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_5)
            throw e_5.error;
          return [7];
        case 10:
          return [7];
        case 11:
          return [2, writer2.finish()];
      }
    });
  });
}
function fieldToJSON(_a) {
  var name = _a.name, type2 = _a.type, nullable = _a.nullable;
  var assembler = new jsontypeassembler_1.JSONTypeAssembler();
  return {
    "name": name,
    "nullable": nullable,
    "type": assembler.visit(type2),
    "children": (type2.children || []).map(fieldToJSON),
    "dictionary": !type_1$b.DataType.isDictionary(type2) ? void 0 : {
      "id": type2.id,
      "isOrdered": type2.isOrdered,
      "indexType": assembler.visit(type2.indices)
    }
  };
}
function dictionaryBatchToJSON(dictionary2, id2, isDelta) {
  if (isDelta === void 0) {
    isDelta = false;
  }
  var field = new schema_1$4.Field("" + id2, dictionary2.type, dictionary2.nullCount > 0);
  var columns = jsonvectorassembler_1.JSONVectorAssembler.assemble(new column_1$1.Column(field, [dictionary2]));
  return JSON.stringify({
    "id": id2,
    "isDelta": isDelta,
    "data": {
      "count": dictionary2.length,
      "columns": columns
    }
  }, null, 2);
}
function recordBatchToJSON(records) {
  return JSON.stringify({
    "count": records.length,
    "columns": jsonvectorassembler_1.JSONVectorAssembler.assemble(records)
  }, null, 2);
}
var recordbatch = {};
Object.defineProperty(recordbatch, "__esModule", { value: true });
recordbatch.distributeVectorsIntoRecordBatches = recordbatch.distributeColumnsIntoRecordBatches = recordbatch.ensureSameLengthData = void 0;
var tslib_1$y = tslib.exports;
var data_1$4 = data;
var schema_1$3 = schema;
var chunked_1$2 = chunked;
var recordbatch_1$4 = recordbatch$1;
var noopBuf = new Uint8Array(0);
var nullBufs = function(bitmapLength) {
  return [
    noopBuf,
    noopBuf,
    new Uint8Array(bitmapLength),
    noopBuf
  ];
};
function ensureSameLengthData(schema2, chunks, batchLength) {
  if (batchLength === void 0) {
    batchLength = chunks.reduce(function(l, c2) {
      return Math.max(l, c2.length);
    }, 0);
  }
  var data2;
  var field;
  var i = -1;
  var n = chunks.length;
  var fields = tslib_1$y.__spread(schema2.fields);
  var batchData = [];
  var bitmapLength = (batchLength + 63 & ~63) >> 3;
  while (++i < n) {
    if ((data2 = chunks[i]) && data2.length === batchLength) {
      batchData[i] = data2;
    } else {
      (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }));
      batchData[i] = data2 ? data2._changeLengthAndBackfillNullBitmap(batchLength) : data_1$4.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
    }
  }
  return [new schema_1$3.Schema(fields), batchLength, batchData];
}
recordbatch.ensureSameLengthData = ensureSameLengthData;
function distributeColumnsIntoRecordBatches(columns) {
  return distributeVectorsIntoRecordBatches(new schema_1$3.Schema(columns.map(function(_a) {
    var field = _a.field;
    return field;
  })), columns);
}
recordbatch.distributeColumnsIntoRecordBatches = distributeColumnsIntoRecordBatches;
function distributeVectorsIntoRecordBatches(schema2, vecs) {
  return uniformlyDistributeChunksAcrossRecordBatches(schema2, vecs.map(function(v) {
    return v instanceof chunked_1$2.Chunked ? v.chunks.map(function(c2) {
      return c2.data;
    }) : [v.data];
  }));
}
recordbatch.distributeVectorsIntoRecordBatches = distributeVectorsIntoRecordBatches;
function uniformlyDistributeChunksAcrossRecordBatches(schema2, columns) {
  var fields = tslib_1$y.__spread(schema2.fields);
  var batchArgs = [];
  var memo = { numBatches: columns.reduce(function(n, c2) {
    return Math.max(n, c2.length);
  }, 0) };
  var numBatches = 0, batchLength = 0;
  var i = -1;
  var numColumns = columns.length;
  var child, childData = [];
  while (memo.numBatches-- > 0) {
    for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns; ) {
      childData[i] = child = columns[i].shift();
      batchLength = Math.min(batchLength, child ? child.length : batchLength);
    }
    if (isFinite(batchLength)) {
      childData = distributeChildData(fields, batchLength, childData, columns, memo);
      if (batchLength > 0) {
        batchArgs[numBatches++] = [batchLength, childData.slice()];
      }
    }
  }
  return [
    schema2 = new schema_1$3.Schema(fields, schema2.metadata),
    batchArgs.map(function(xs) {
      return new (recordbatch_1$4.RecordBatch.bind.apply(recordbatch_1$4.RecordBatch, tslib_1$y.__spread([void 0, schema2], xs)))();
    })
  ];
}
function distributeChildData(fields, batchLength, childData, columns, memo) {
  var data2;
  var field;
  var length = 0, i = -1;
  var n = columns.length;
  var bitmapLength = (batchLength + 63 & ~63) >> 3;
  while (++i < n) {
    if ((data2 = childData[i]) && (length = data2.length) >= batchLength) {
      if (length === batchLength) {
        childData[i] = data2;
      } else {
        childData[i] = data2.slice(0, batchLength);
        data2 = data2.slice(batchLength, length - batchLength);
        memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data2));
      }
    } else {
      (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }));
      childData[i] = data2 ? data2._changeLengthAndBackfillNullBitmap(batchLength) : data_1$4.Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength));
    }
  }
  return childData;
}
var vector = {};
var base = {};
Object.defineProperty(base, "__esModule", { value: true });
base.BaseVector = void 0;
var tslib_1$x = tslib.exports;
var enum_1$6 = _enum;
var chunked_1$1 = chunked;
var vector_1$9 = vector$1;
var vector_2 = vector$2;
var BaseVector = function(_super) {
  tslib_1$x.__extends(BaseVector2, _super);
  function BaseVector2(data2, children2) {
    var _this = _super.call(this) || this;
    _this._children = children2;
    _this.numChildren = data2.childData.length;
    _this._bindDataAccessors(_this.data = data2);
    return _this;
  }
  Object.defineProperty(BaseVector2.prototype, "type", {
    get: function() {
      return this.data.type;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "typeId", {
    get: function() {
      return this.data.typeId;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "length", {
    get: function() {
      return this.data.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "offset", {
    get: function() {
      return this.data.offset;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "stride", {
    get: function() {
      return this.data.stride;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "nullCount", {
    get: function() {
      return this.data.nullCount;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "byteLength", {
    get: function() {
      return this.data.byteLength;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "VectorName", {
    get: function() {
      return enum_1$6.Type[this.typeId] + "Vector";
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "ArrayType", {
    get: function() {
      return this.type.ArrayType;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "values", {
    get: function() {
      return this.data.values;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "typeIds", {
    get: function() {
      return this.data.typeIds;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "nullBitmap", {
    get: function() {
      return this.data.nullBitmap;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, "valueOffsets", {
    get: function() {
      return this.data.valueOffsets;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(BaseVector2.prototype, Symbol.toStringTag, {
    get: function() {
      return this.VectorName + "<" + this.type[Symbol.toStringTag] + ">";
    },
    enumerable: false,
    configurable: true
  });
  BaseVector2.prototype.clone = function(data2, children2) {
    if (children2 === void 0) {
      children2 = this._children;
    }
    return vector_2.Vector.new(data2, children2);
  };
  BaseVector2.prototype.concat = function() {
    var others = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      others[_i] = arguments[_i];
    }
    return chunked_1$1.Chunked.concat.apply(chunked_1$1.Chunked, tslib_1$x.__spread([this], others));
  };
  BaseVector2.prototype.slice = function(begin, end) {
    return vector_1$9.clampRange(this, begin, end, this._sliceInternal);
  };
  BaseVector2.prototype.isValid = function(index) {
    if (this.nullCount > 0) {
      var idx = this.offset + index;
      var val = this.nullBitmap[idx >> 3];
      var mask = val & 1 << idx % 8;
      return mask !== 0;
    }
    return true;
  };
  BaseVector2.prototype.getChildAt = function(index) {
    return index < 0 || index >= this.numChildren ? null : (this._children || (this._children = []))[index] || (this._children[index] = vector_2.Vector.new(this.data.childData[index]));
  };
  BaseVector2.prototype.toJSON = function() {
    return tslib_1$x.__spread(this);
  };
  BaseVector2.prototype._sliceInternal = function(self2, begin, end) {
    return self2.clone(self2.data.slice(begin, end - begin), null);
  };
  BaseVector2.prototype._bindDataAccessors = function(data2) {
  };
  return BaseVector2;
}(vector_2.AbstractVector);
base.BaseVector = BaseVector;
BaseVector.prototype[Symbol.isConcatSpreadable] = true;
var binary = {};
Object.defineProperty(binary, "__esModule", { value: true });
binary.BinaryVector = void 0;
var tslib_1$w = tslib.exports;
var vector_1$8 = vector$2;
var base_1$h = base;
var type_1$a = type;
var BinaryVector = function(_super) {
  tslib_1$w.__extends(BinaryVector2, _super);
  function BinaryVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  BinaryVector2.prototype.asUtf8 = function() {
    return vector_1$8.Vector.new(this.data.clone(new type_1$a.Utf8()));
  };
  return BinaryVector2;
}(base_1$h.BaseVector);
binary.BinaryVector = BinaryVector;
var bool = {};
Object.defineProperty(bool, "__esModule", { value: true });
bool.BoolVector = void 0;
var tslib_1$v = tslib.exports;
var type_1$9 = type;
var base_1$g = base;
var index_1$8 = vector;
var BoolVector = function(_super) {
  tslib_1$v.__extends(BoolVector2, _super);
  function BoolVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  BoolVector2.from = function(input) {
    return index_1$8.vectorFromValuesWithType(function() {
      return new type_1$9.Bool();
    }, input);
  };
  return BoolVector2;
}(base_1$g.BaseVector);
bool.BoolVector = BoolVector;
var date = {};
Object.defineProperty(date, "__esModule", { value: true });
date.DateMillisecondVector = date.DateDayVector = date.DateVector = void 0;
var tslib_1$u = tslib.exports;
var enum_1$5 = _enum;
var base_1$f = base;
var index_1$7 = vector;
var type_1$8 = type;
var DateVector = function(_super) {
  tslib_1$u.__extends(DateVector2, _super);
  function DateVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DateVector2.from = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    if (args2.length === 2) {
      return index_1$7.vectorFromValuesWithType(function() {
        return args2[1] === enum_1$5.DateUnit.DAY ? new type_1$8.DateDay() : new type_1$8.DateMillisecond();
      }, args2[0]);
    }
    return index_1$7.vectorFromValuesWithType(function() {
      return new type_1$8.DateMillisecond();
    }, args2[0]);
  };
  return DateVector2;
}(base_1$f.BaseVector);
date.DateVector = DateVector;
var DateDayVector = function(_super) {
  tslib_1$u.__extends(DateDayVector2, _super);
  function DateDayVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DateDayVector2;
}(DateVector);
date.DateDayVector = DateDayVector;
var DateMillisecondVector = function(_super) {
  tslib_1$u.__extends(DateMillisecondVector2, _super);
  function DateMillisecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DateMillisecondVector2;
}(DateVector);
date.DateMillisecondVector = DateMillisecondVector;
var decimal = {};
Object.defineProperty(decimal, "__esModule", { value: true });
decimal.DecimalVector = void 0;
var tslib_1$t = tslib.exports;
var base_1$e = base;
var DecimalVector = function(_super) {
  tslib_1$t.__extends(DecimalVector2, _super);
  function DecimalVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return DecimalVector2;
}(base_1$e.BaseVector);
decimal.DecimalVector = DecimalVector;
var dictionary = {};
Object.defineProperty(dictionary, "__esModule", { value: true });
dictionary.DictionaryVector = void 0;
var tslib_1$s = tslib.exports;
var data_1$3 = data;
var vector_1$7 = vector$2;
var base_1$d = base;
var index_1$6 = vector;
var type_1$7 = type;
var DictionaryVector = function(_super) {
  tslib_1$s.__extends(DictionaryVector2, _super);
  function DictionaryVector2(data2) {
    var _this = _super.call(this, data2) || this;
    _this.indices = vector_1$7.Vector.new(data2.clone(_this.type.indices));
    return _this;
  }
  DictionaryVector2.from = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    if (args2.length === 3) {
      var _a = tslib_1$s.__read(args2, 3), values = _a[0], indices = _a[1], keys = _a[2];
      var type2 = new type_1$7.Dictionary(values.type, indices, null, null);
      return vector_1$7.Vector.new(data_1$3.Data.Dictionary(type2, 0, keys.length, 0, null, keys, values));
    }
    return index_1$6.vectorFromValuesWithType(function() {
      return args2[0].type;
    }, args2[0]);
  };
  Object.defineProperty(DictionaryVector2.prototype, "dictionary", {
    get: function() {
      return this.data.dictionary;
    },
    enumerable: false,
    configurable: true
  });
  DictionaryVector2.prototype.reverseLookup = function(value) {
    return this.dictionary.indexOf(value);
  };
  DictionaryVector2.prototype.getKey = function(idx) {
    return this.indices.get(idx);
  };
  DictionaryVector2.prototype.getValue = function(key) {
    return this.dictionary.get(key);
  };
  DictionaryVector2.prototype.setKey = function(idx, key) {
    return this.indices.set(idx, key);
  };
  DictionaryVector2.prototype.setValue = function(key, value) {
    return this.dictionary.set(key, value);
  };
  return DictionaryVector2;
}(base_1$d.BaseVector);
dictionary.DictionaryVector = DictionaryVector;
DictionaryVector.prototype.indices = null;
var fixedsizebinary = {};
Object.defineProperty(fixedsizebinary, "__esModule", { value: true });
fixedsizebinary.FixedSizeBinaryVector = void 0;
var tslib_1$r = tslib.exports;
var base_1$c = base;
var FixedSizeBinaryVector = function(_super) {
  tslib_1$r.__extends(FixedSizeBinaryVector2, _super);
  function FixedSizeBinaryVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return FixedSizeBinaryVector2;
}(base_1$c.BaseVector);
fixedsizebinary.FixedSizeBinaryVector = FixedSizeBinaryVector;
var fixedsizelist = {};
Object.defineProperty(fixedsizelist, "__esModule", { value: true });
fixedsizelist.FixedSizeListVector = void 0;
var tslib_1$q = tslib.exports;
var base_1$b = base;
var FixedSizeListVector = function(_super) {
  tslib_1$q.__extends(FixedSizeListVector2, _super);
  function FixedSizeListVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return FixedSizeListVector2;
}(base_1$b.BaseVector);
fixedsizelist.FixedSizeListVector = FixedSizeListVector;
var float = {};
Object.defineProperty(float, "__esModule", { value: true });
float.Float64Vector = float.Float32Vector = float.Float16Vector = float.FloatVector = void 0;
var tslib_1$p = tslib.exports;
var data_1$2 = data;
var vector_1$6 = vector$2;
var base_1$a = base;
var index_1$5 = vector;
var type_1$6 = type;
var FloatVector = function(_super) {
  tslib_1$p.__extends(FloatVector2, _super);
  function FloatVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FloatVector2.from = function(input) {
    var ArrowType = vectorTypeToDataType$1(this);
    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {
      var InputType = arrayTypeToDataType$1(input.constructor) || ArrowType;
      if (ArrowType === null) {
        ArrowType = InputType;
      }
      if (ArrowType && ArrowType === InputType) {
        var type2 = new ArrowType();
        var length_1 = input.byteLength / type2.ArrayType.BYTES_PER_ELEMENT;
        if (!convertTo16Bit(ArrowType, input.constructor)) {
          return vector_1$6.Vector.new(data_1$2.Data.Float(type2, 0, length_1, 0, null, input));
        }
      }
    }
    if (ArrowType) {
      return index_1$5.vectorFromValuesWithType(function() {
        return new ArrowType();
      }, input);
    }
    if (input instanceof DataView || input instanceof ArrayBuffer) {
      throw new TypeError("Cannot infer float type from instance of " + input.constructor.name);
    }
    throw new TypeError("Unrecognized FloatVector input");
  };
  return FloatVector2;
}(base_1$a.BaseVector);
float.FloatVector = FloatVector;
var Float16Vector = function(_super) {
  tslib_1$p.__extends(Float16Vector2, _super);
  function Float16Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Float16Vector2.prototype.toFloat32Array = function() {
    return new Float32Array(this);
  };
  Float16Vector2.prototype.toFloat64Array = function() {
    return new Float64Array(this);
  };
  return Float16Vector2;
}(FloatVector);
float.Float16Vector = Float16Vector;
var Float32Vector = function(_super) {
  tslib_1$p.__extends(Float32Vector2, _super);
  function Float32Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Float32Vector2;
}(FloatVector);
float.Float32Vector = Float32Vector;
var Float64Vector = function(_super) {
  tslib_1$p.__extends(Float64Vector2, _super);
  function Float64Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Float64Vector2;
}(FloatVector);
float.Float64Vector = Float64Vector;
var convertTo16Bit = function(typeCtor, dataCtor) {
  return typeCtor === type_1$6.Float16 && dataCtor !== Uint16Array;
};
var arrayTypeToDataType$1 = function(ctor) {
  switch (ctor) {
    case Uint16Array:
      return type_1$6.Float16;
    case Float32Array:
      return type_1$6.Float32;
    case Float64Array:
      return type_1$6.Float64;
    default:
      return null;
  }
};
var vectorTypeToDataType$1 = function(ctor) {
  switch (ctor) {
    case Float16Vector:
      return type_1$6.Float16;
    case Float32Vector:
      return type_1$6.Float32;
    case Float64Vector:
      return type_1$6.Float64;
    default:
      return null;
  }
};
var interval = {};
Object.defineProperty(interval, "__esModule", { value: true });
interval.IntervalYearMonthVector = interval.IntervalDayTimeVector = interval.IntervalVector = void 0;
var tslib_1$o = tslib.exports;
var base_1$9 = base;
var IntervalVector = function(_super) {
  tslib_1$o.__extends(IntervalVector2, _super);
  function IntervalVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalVector2;
}(base_1$9.BaseVector);
interval.IntervalVector = IntervalVector;
var IntervalDayTimeVector = function(_super) {
  tslib_1$o.__extends(IntervalDayTimeVector2, _super);
  function IntervalDayTimeVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalDayTimeVector2;
}(IntervalVector);
interval.IntervalDayTimeVector = IntervalDayTimeVector;
var IntervalYearMonthVector = function(_super) {
  tslib_1$o.__extends(IntervalYearMonthVector2, _super);
  function IntervalYearMonthVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IntervalYearMonthVector2;
}(IntervalVector);
interval.IntervalYearMonthVector = IntervalYearMonthVector;
var int = {};
Object.defineProperty(int, "__esModule", { value: true });
int.Uint64Vector = int.Uint32Vector = int.Uint16Vector = int.Uint8Vector = int.Int64Vector = int.Int32Vector = int.Int16Vector = int.Int8Vector = int.IntVector = void 0;
var tslib_1$n = tslib.exports;
var data_1$1 = data;
var vector_1$5 = vector$2;
var base_1$8 = base;
var index_1$4 = vector;
var compat_1$4 = compat;
var buffer_1$1 = buffer$1;
var type_1$5 = type;
var IntVector = function(_super) {
  tslib_1$n.__extends(IntVector2, _super);
  function IntVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  IntVector2.from = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _a = tslib_1$n.__read(args2, 2), input = _a[0], _b = _a[1], is64bit = _b === void 0 ? false : _b;
    var ArrowType = vectorTypeToDataType(this, is64bit);
    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input)) {
      var InputType = arrayTypeToDataType(input.constructor, is64bit) || ArrowType;
      if (ArrowType === null) {
        ArrowType = InputType;
      }
      if (ArrowType && ArrowType === InputType) {
        var type2 = new ArrowType();
        var length_1 = input.byteLength / type2.ArrayType.BYTES_PER_ELEMENT;
        if (convert32To64Bit(ArrowType, input.constructor)) {
          length_1 *= 0.5;
        }
        return vector_1$5.Vector.new(data_1$1.Data.Int(type2, 0, length_1, 0, null, input));
      }
    }
    if (ArrowType) {
      return index_1$4.vectorFromValuesWithType(function() {
        return new ArrowType();
      }, input);
    }
    if (input instanceof DataView || input instanceof ArrayBuffer) {
      throw new TypeError("Cannot infer integer type from instance of " + input.constructor.name);
    }
    throw new TypeError("Unrecognized IntVector input");
  };
  return IntVector2;
}(base_1$8.BaseVector);
int.IntVector = IntVector;
var Int8Vector = function(_super) {
  tslib_1$n.__extends(Int8Vector2, _super);
  function Int8Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int8Vector2;
}(IntVector);
int.Int8Vector = Int8Vector;
var Int16Vector = function(_super) {
  tslib_1$n.__extends(Int16Vector2, _super);
  function Int16Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int16Vector2;
}(IntVector);
int.Int16Vector = Int16Vector;
var Int32Vector = function(_super) {
  tslib_1$n.__extends(Int32Vector2, _super);
  function Int32Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Int32Vector2;
}(IntVector);
int.Int32Vector = Int32Vector;
var Int64Vector = function(_super) {
  tslib_1$n.__extends(Int64Vector2, _super);
  function Int64Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Int64Vector2.prototype.toBigInt64Array = function() {
    return buffer_1$1.toBigInt64Array(this.values);
  };
  Object.defineProperty(Int64Vector2.prototype, "values64", {
    get: function() {
      return this._values64 || (this._values64 = this.toBigInt64Array());
    },
    enumerable: false,
    configurable: true
  });
  return Int64Vector2;
}(IntVector);
int.Int64Vector = Int64Vector;
var Uint8Vector = function(_super) {
  tslib_1$n.__extends(Uint8Vector2, _super);
  function Uint8Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint8Vector2;
}(IntVector);
int.Uint8Vector = Uint8Vector;
var Uint16Vector = function(_super) {
  tslib_1$n.__extends(Uint16Vector2, _super);
  function Uint16Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint16Vector2;
}(IntVector);
int.Uint16Vector = Uint16Vector;
var Uint32Vector = function(_super) {
  tslib_1$n.__extends(Uint32Vector2, _super);
  function Uint32Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return Uint32Vector2;
}(IntVector);
int.Uint32Vector = Uint32Vector;
var Uint64Vector = function(_super) {
  tslib_1$n.__extends(Uint64Vector2, _super);
  function Uint64Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Uint64Vector2.prototype.toBigUint64Array = function() {
    return buffer_1$1.toBigUint64Array(this.values);
  };
  Object.defineProperty(Uint64Vector2.prototype, "values64", {
    get: function() {
      return this._values64 || (this._values64 = this.toBigUint64Array());
    },
    enumerable: false,
    configurable: true
  });
  return Uint64Vector2;
}(IntVector);
int.Uint64Vector = Uint64Vector;
var convert32To64Bit = function(typeCtor, dataCtor) {
  return (typeCtor === type_1$5.Int64 || typeCtor === type_1$5.Uint64) && (dataCtor === Int32Array || dataCtor === Uint32Array);
};
var arrayTypeToDataType = function(ctor, is64bit) {
  switch (ctor) {
    case Int8Array:
      return type_1$5.Int8;
    case Int16Array:
      return type_1$5.Int16;
    case Int32Array:
      return is64bit ? type_1$5.Int64 : type_1$5.Int32;
    case compat_1$4.BigInt64Array:
      return type_1$5.Int64;
    case Uint8Array:
      return type_1$5.Uint8;
    case Uint16Array:
      return type_1$5.Uint16;
    case Uint32Array:
      return is64bit ? type_1$5.Uint64 : type_1$5.Uint32;
    case compat_1$4.BigUint64Array:
      return type_1$5.Uint64;
    default:
      return null;
  }
};
var vectorTypeToDataType = function(ctor, is64bit) {
  switch (ctor) {
    case Int8Vector:
      return type_1$5.Int8;
    case Int16Vector:
      return type_1$5.Int16;
    case Int32Vector:
      return is64bit ? type_1$5.Int64 : type_1$5.Int32;
    case Int64Vector:
      return type_1$5.Int64;
    case Uint8Vector:
      return type_1$5.Uint8;
    case Uint16Vector:
      return type_1$5.Uint16;
    case Uint32Vector:
      return is64bit ? type_1$5.Uint64 : type_1$5.Uint32;
    case Uint64Vector:
      return type_1$5.Uint64;
    default:
      return null;
  }
};
var list = {};
Object.defineProperty(list, "__esModule", { value: true });
list.ListVector = void 0;
var tslib_1$m = tslib.exports;
var base_1$7 = base;
var ListVector = function(_super) {
  tslib_1$m.__extends(ListVector2, _super);
  function ListVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return ListVector2;
}(base_1$7.BaseVector);
list.ListVector = ListVector;
var map = {};
Object.defineProperty(map, "__esModule", { value: true });
map.MapVector = void 0;
var tslib_1$l = tslib.exports;
var row_1$1 = row;
var vector_1$4 = vector$2;
var base_1$6 = base;
var type_1$4 = type;
var MapVector = function(_super) {
  tslib_1$l.__extends(MapVector2, _super);
  function MapVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  MapVector2.prototype.asList = function() {
    var child = this.type.children[0];
    return vector_1$4.Vector.new(this.data.clone(new type_1$4.List(child)));
  };
  MapVector2.prototype.bind = function(index) {
    var child = this.getChildAt(0);
    var _a = this.valueOffsets, _b = index, begin = _a[_b], _c = index + 1, end = _a[_c];
    return new row_1$1.MapRow(child.slice(begin, end));
  };
  return MapVector2;
}(base_1$6.BaseVector);
map.MapVector = MapVector;
var _null = {};
Object.defineProperty(_null, "__esModule", { value: true });
_null.NullVector = void 0;
var tslib_1$k = tslib.exports;
var base_1$5 = base;
var NullVector = function(_super) {
  tslib_1$k.__extends(NullVector2, _super);
  function NullVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return NullVector2;
}(base_1$5.BaseVector);
_null.NullVector = NullVector;
var struct = {};
Object.defineProperty(struct, "__esModule", { value: true });
struct.StructVector = void 0;
var tslib_1$j = tslib.exports;
var row_1 = row;
var base_1$4 = base;
var kRowIndex = Symbol.for("rowIndex");
var StructVector = function(_super) {
  tslib_1$j.__extends(StructVector2, _super);
  function StructVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  StructVector2.prototype.bind = function(index) {
    var proto = this._row || (this._row = new row_1.StructRow(this));
    var bound = Object.create(proto);
    bound[kRowIndex] = index;
    return bound;
  };
  return StructVector2;
}(base_1$4.BaseVector);
struct.StructVector = StructVector;
var timestamp = {};
Object.defineProperty(timestamp, "__esModule", { value: true });
timestamp.TimestampNanosecondVector = timestamp.TimestampMicrosecondVector = timestamp.TimestampMillisecondVector = timestamp.TimestampSecondVector = timestamp.TimestampVector = void 0;
var tslib_1$i = tslib.exports;
var base_1$3 = base;
var TimestampVector = function(_super) {
  tslib_1$i.__extends(TimestampVector2, _super);
  function TimestampVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampVector2;
}(base_1$3.BaseVector);
timestamp.TimestampVector = TimestampVector;
var TimestampSecondVector = function(_super) {
  tslib_1$i.__extends(TimestampSecondVector2, _super);
  function TimestampSecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampSecondVector2;
}(TimestampVector);
timestamp.TimestampSecondVector = TimestampSecondVector;
var TimestampMillisecondVector = function(_super) {
  tslib_1$i.__extends(TimestampMillisecondVector2, _super);
  function TimestampMillisecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampMillisecondVector2;
}(TimestampVector);
timestamp.TimestampMillisecondVector = TimestampMillisecondVector;
var TimestampMicrosecondVector = function(_super) {
  tslib_1$i.__extends(TimestampMicrosecondVector2, _super);
  function TimestampMicrosecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampMicrosecondVector2;
}(TimestampVector);
timestamp.TimestampMicrosecondVector = TimestampMicrosecondVector;
var TimestampNanosecondVector = function(_super) {
  tslib_1$i.__extends(TimestampNanosecondVector2, _super);
  function TimestampNanosecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimestampNanosecondVector2;
}(TimestampVector);
timestamp.TimestampNanosecondVector = TimestampNanosecondVector;
var time = {};
Object.defineProperty(time, "__esModule", { value: true });
time.TimeNanosecondVector = time.TimeMicrosecondVector = time.TimeMillisecondVector = time.TimeSecondVector = time.TimeVector = void 0;
var tslib_1$h = tslib.exports;
var base_1$2 = base;
var TimeVector = function(_super) {
  tslib_1$h.__extends(TimeVector2, _super);
  function TimeVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeVector2;
}(base_1$2.BaseVector);
time.TimeVector = TimeVector;
var TimeSecondVector = function(_super) {
  tslib_1$h.__extends(TimeSecondVector2, _super);
  function TimeSecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeSecondVector2;
}(TimeVector);
time.TimeSecondVector = TimeSecondVector;
var TimeMillisecondVector = function(_super) {
  tslib_1$h.__extends(TimeMillisecondVector2, _super);
  function TimeMillisecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeMillisecondVector2;
}(TimeVector);
time.TimeMillisecondVector = TimeMillisecondVector;
var TimeMicrosecondVector = function(_super) {
  tslib_1$h.__extends(TimeMicrosecondVector2, _super);
  function TimeMicrosecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeMicrosecondVector2;
}(TimeVector);
time.TimeMicrosecondVector = TimeMicrosecondVector;
var TimeNanosecondVector = function(_super) {
  tslib_1$h.__extends(TimeNanosecondVector2, _super);
  function TimeNanosecondVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return TimeNanosecondVector2;
}(TimeVector);
time.TimeNanosecondVector = TimeNanosecondVector;
var union = {};
Object.defineProperty(union, "__esModule", { value: true });
union.SparseUnionVector = union.DenseUnionVector = union.UnionVector = void 0;
var tslib_1$g = tslib.exports;
var base_1$1 = base;
var UnionVector = function(_super) {
  tslib_1$g.__extends(UnionVector2, _super);
  function UnionVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(UnionVector2.prototype, "typeIdToChildIndex", {
    get: function() {
      return this.data.type.typeIdToChildIndex;
    },
    enumerable: false,
    configurable: true
  });
  return UnionVector2;
}(base_1$1.BaseVector);
union.UnionVector = UnionVector;
var DenseUnionVector = function(_super) {
  tslib_1$g.__extends(DenseUnionVector2, _super);
  function DenseUnionVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(DenseUnionVector2.prototype, "valueOffsets", {
    get: function() {
      return this.data.valueOffsets;
    },
    enumerable: false,
    configurable: true
  });
  return DenseUnionVector2;
}(UnionVector);
union.DenseUnionVector = DenseUnionVector;
var SparseUnionVector = function(_super) {
  tslib_1$g.__extends(SparseUnionVector2, _super);
  function SparseUnionVector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return SparseUnionVector2;
}(UnionVector);
union.SparseUnionVector = SparseUnionVector;
var utf8 = {};
Object.defineProperty(utf8, "__esModule", { value: true });
utf8.Utf8Vector = void 0;
var tslib_1$f = tslib.exports;
var vector_1$3 = vector$2;
var base_1 = base;
var type_1$3 = type;
var index_1$3 = vector;
var Utf8Vector = function(_super) {
  tslib_1$f.__extends(Utf8Vector2, _super);
  function Utf8Vector2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Utf8Vector2.from = function(input) {
    return index_1$3.vectorFromValuesWithType(function() {
      return new type_1$3.Utf8();
    }, input);
  };
  Utf8Vector2.prototype.asBinary = function() {
    return vector_1$3.Vector.new(this.data.clone(new type_1$3.Binary()));
  };
  return Utf8Vector2;
}(base_1.BaseVector);
utf8.Utf8Vector = Utf8Vector;
var fn = {};
Object.defineProperty(fn, "__esModule", { value: true });
fn.partial2 = fn.partial1 = fn.partial0 = void 0;
function partial0(visit) {
  return function() {
    return visit(this);
  };
}
fn.partial0 = partial0;
function partial1(visit) {
  return function(a) {
    return visit(this, a);
  };
}
fn.partial1 = partial1;
function partial2(visit) {
  return function(a, b) {
    return visit(this, a, b);
  };
}
fn.partial2 = partial2;
var get = {};
Object.defineProperty(get, "__esModule", { value: true });
get.instance = get.GetVisitor = void 0;
var tslib_1$e = tslib.exports;
var bn_1 = bn;
var visitor_1$6 = visitor;
var utf8_1$1 = utf8$2;
var math_1 = math;
var enum_1$4 = _enum;
var GetVisitor = function(_super) {
  tslib_1$e.__extends(GetVisitor2, _super);
  function GetVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return GetVisitor2;
}(visitor_1$6.Visitor);
get.GetVisitor = GetVisitor;
var epochDaysToMs = function(data2, index) {
  return 864e5 * data2[index];
};
var epochMillisecondsLongToMs = function(data2, index) {
  return 4294967296 * data2[index + 1] + (data2[index] >>> 0);
};
var epochMicrosecondsLongToMs = function(data2, index) {
  return 4294967296 * (data2[index + 1] / 1e3) + (data2[index] >>> 0) / 1e3;
};
var epochNanosecondsLongToMs = function(data2, index) {
  return 4294967296 * (data2[index + 1] / 1e6) + (data2[index] >>> 0) / 1e6;
};
var epochMillisecondsToDate = function(epochMs) {
  return new Date(epochMs);
};
var epochDaysToDate = function(data2, index) {
  return epochMillisecondsToDate(epochDaysToMs(data2, index));
};
var epochMillisecondsLongToDate = function(data2, index) {
  return epochMillisecondsToDate(epochMillisecondsLongToMs(data2, index));
};
var getNull = function(_vector, _index) {
  return null;
};
var getVariableWidthBytes = function(values, valueOffsets, index) {
  var _a = valueOffsets, _b = index, x = _a[_b], _c = index + 1, y = _a[_c];
  return x != null && y != null ? values.subarray(x, y) : null;
};
var getBool = function(_a, index) {
  var offset = _a.offset, values = _a.values;
  var idx = offset + index;
  var byte = values[idx >> 3];
  return (byte & 1 << idx % 8) !== 0;
};
var getDateDay = function(_a, index) {
  var values = _a.values;
  return epochDaysToDate(values, index);
};
var getDateMillisecond = function(_a, index) {
  var values = _a.values;
  return epochMillisecondsLongToDate(values, index * 2);
};
var getNumeric = function(_a, index) {
  var stride = _a.stride, values = _a.values;
  return values[stride * index];
};
var getFloat16 = function(_a, index) {
  var stride = _a.stride, values = _a.values;
  return math_1.uint16ToFloat64(values[stride * index]);
};
var getBigInts = function(_a, index) {
  var stride = _a.stride, values = _a.values, type2 = _a.type;
  return bn_1.BN.new(values.subarray(stride * index, stride * (index + 1)), type2.isSigned);
};
var getFixedSizeBinary = function(_a, index) {
  var stride = _a.stride, values = _a.values;
  return values.subarray(stride * index, stride * (index + 1));
};
var getBinary = function(_a, index) {
  var values = _a.values, valueOffsets = _a.valueOffsets;
  return getVariableWidthBytes(values, valueOffsets, index);
};
var getUtf8 = function(_a, index) {
  var values = _a.values, valueOffsets = _a.valueOffsets;
  var bytes = getVariableWidthBytes(values, valueOffsets, index);
  return bytes !== null ? utf8_1$1.decodeUtf8(bytes) : null;
};
var getInt = function(vector2, index) {
  return vector2.type.bitWidth < 64 ? getNumeric(vector2, index) : getBigInts(vector2, index);
};
var getFloat = function(vector2, index) {
  return vector2.type.precision !== enum_1$4.Precision.HALF ? getNumeric(vector2, index) : getFloat16(vector2, index);
};
var getDate = function(vector2, index) {
  return vector2.type.unit === enum_1$4.DateUnit.DAY ? getDateDay(vector2, index) : getDateMillisecond(vector2, index);
};
var getTimestampSecond = function(_a, index) {
  var values = _a.values;
  return 1e3 * epochMillisecondsLongToMs(values, index * 2);
};
var getTimestampMillisecond = function(_a, index) {
  var values = _a.values;
  return epochMillisecondsLongToMs(values, index * 2);
};
var getTimestampMicrosecond = function(_a, index) {
  var values = _a.values;
  return epochMicrosecondsLongToMs(values, index * 2);
};
var getTimestampNanosecond = function(_a, index) {
  var values = _a.values;
  return epochNanosecondsLongToMs(values, index * 2);
};
var getTimestamp = function(vector2, index) {
  switch (vector2.type.unit) {
    case enum_1$4.TimeUnit.SECOND:
      return getTimestampSecond(vector2, index);
    case enum_1$4.TimeUnit.MILLISECOND:
      return getTimestampMillisecond(vector2, index);
    case enum_1$4.TimeUnit.MICROSECOND:
      return getTimestampMicrosecond(vector2, index);
    case enum_1$4.TimeUnit.NANOSECOND:
      return getTimestampNanosecond(vector2, index);
  }
};
var getTimeSecond = function(_a, index) {
  var values = _a.values, stride = _a.stride;
  return values[stride * index];
};
var getTimeMillisecond = function(_a, index) {
  var values = _a.values, stride = _a.stride;
  return values[stride * index];
};
var getTimeMicrosecond = function(_a, index) {
  var values = _a.values;
  return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
};
var getTimeNanosecond = function(_a, index) {
  var values = _a.values;
  return bn_1.BN.signed(values.subarray(2 * index, 2 * (index + 1)));
};
var getTime = function(vector2, index) {
  switch (vector2.type.unit) {
    case enum_1$4.TimeUnit.SECOND:
      return getTimeSecond(vector2, index);
    case enum_1$4.TimeUnit.MILLISECOND:
      return getTimeMillisecond(vector2, index);
    case enum_1$4.TimeUnit.MICROSECOND:
      return getTimeMicrosecond(vector2, index);
    case enum_1$4.TimeUnit.NANOSECOND:
      return getTimeNanosecond(vector2, index);
  }
};
var getDecimal = function(_a, index) {
  var values = _a.values;
  return bn_1.BN.decimal(values.subarray(4 * index, 4 * (index + 1)));
};
var getList = function(vector2, index) {
  var child = vector2.getChildAt(0), valueOffsets = vector2.valueOffsets, stride = vector2.stride;
  return child.slice(valueOffsets[index * stride], valueOffsets[index * stride + 1]);
};
var getMap = function(vector2, index) {
  return vector2.bind(index);
};
var getStruct = function(vector2, index) {
  return vector2.bind(index);
};
var getUnion = function(vector2, index) {
  return vector2.type.mode === enum_1$4.UnionMode.Dense ? getDenseUnion(vector2, index) : getSparseUnion(vector2, index);
};
var getDenseUnion = function(vector2, index) {
  var childIndex = vector2.typeIdToChildIndex[vector2.typeIds[index]];
  var child = vector2.getChildAt(childIndex);
  return child ? child.get(vector2.valueOffsets[index]) : null;
};
var getSparseUnion = function(vector2, index) {
  var childIndex = vector2.typeIdToChildIndex[vector2.typeIds[index]];
  var child = vector2.getChildAt(childIndex);
  return child ? child.get(index) : null;
};
var getDictionary = function(vector2, index) {
  return vector2.getValue(vector2.getKey(index));
};
var getInterval = function(vector2, index) {
  return vector2.type.unit === enum_1$4.IntervalUnit.DAY_TIME ? getIntervalDayTime(vector2, index) : getIntervalYearMonth(vector2, index);
};
var getIntervalDayTime = function(_a, index) {
  var values = _a.values;
  return values.subarray(2 * index, 2 * (index + 1));
};
var getIntervalYearMonth = function(_a, index) {
  var values = _a.values;
  var interval2 = values[index];
  var int32s = new Int32Array(2);
  int32s[0] = interval2 / 12 | 0;
  int32s[1] = interval2 % 12 | 0;
  return int32s;
};
var getFixedSizeList = function(vector2, index) {
  var child = vector2.getChildAt(0), stride = vector2.stride;
  return child.slice(index * stride, (index + 1) * stride);
};
GetVisitor.prototype.visitNull = getNull;
GetVisitor.prototype.visitBool = getBool;
GetVisitor.prototype.visitInt = getInt;
GetVisitor.prototype.visitInt8 = getNumeric;
GetVisitor.prototype.visitInt16 = getNumeric;
GetVisitor.prototype.visitInt32 = getNumeric;
GetVisitor.prototype.visitInt64 = getBigInts;
GetVisitor.prototype.visitUint8 = getNumeric;
GetVisitor.prototype.visitUint16 = getNumeric;
GetVisitor.prototype.visitUint32 = getNumeric;
GetVisitor.prototype.visitUint64 = getBigInts;
GetVisitor.prototype.visitFloat = getFloat;
GetVisitor.prototype.visitFloat16 = getFloat16;
GetVisitor.prototype.visitFloat32 = getNumeric;
GetVisitor.prototype.visitFloat64 = getNumeric;
GetVisitor.prototype.visitUtf8 = getUtf8;
GetVisitor.prototype.visitBinary = getBinary;
GetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;
GetVisitor.prototype.visitDate = getDate;
GetVisitor.prototype.visitDateDay = getDateDay;
GetVisitor.prototype.visitDateMillisecond = getDateMillisecond;
GetVisitor.prototype.visitTimestamp = getTimestamp;
GetVisitor.prototype.visitTimestampSecond = getTimestampSecond;
GetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;
GetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;
GetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;
GetVisitor.prototype.visitTime = getTime;
GetVisitor.prototype.visitTimeSecond = getTimeSecond;
GetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;
GetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;
GetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;
GetVisitor.prototype.visitDecimal = getDecimal;
GetVisitor.prototype.visitList = getList;
GetVisitor.prototype.visitStruct = getStruct;
GetVisitor.prototype.visitUnion = getUnion;
GetVisitor.prototype.visitDenseUnion = getDenseUnion;
GetVisitor.prototype.visitSparseUnion = getSparseUnion;
GetVisitor.prototype.visitDictionary = getDictionary;
GetVisitor.prototype.visitInterval = getInterval;
GetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;
GetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;
GetVisitor.prototype.visitFixedSizeList = getFixedSizeList;
GetVisitor.prototype.visitMap = getMap;
get.instance = new GetVisitor();
var indexof = {};
Object.defineProperty(indexof, "__esModule", { value: true });
indexof.instance = indexof.IndexOfVisitor = void 0;
var tslib_1$d = tslib.exports;
var visitor_1$5 = visitor;
var bit_1$1 = bit;
var vector_1$2 = vector$1;
var IndexOfVisitor = function(_super) {
  tslib_1$d.__extends(IndexOfVisitor2, _super);
  function IndexOfVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IndexOfVisitor2;
}(visitor_1$5.Visitor);
indexof.IndexOfVisitor = IndexOfVisitor;
function nullIndexOf(vector2, searchElement) {
  return searchElement === null && vector2.length > 0 ? 0 : -1;
}
function indexOfNull(vector2, fromIndex) {
  var e_1, _a;
  var nullBitmap = vector2.data.nullBitmap;
  if (!nullBitmap || vector2.nullCount <= 0) {
    return -1;
  }
  var i = 0;
  try {
    for (var _b = tslib_1$d.__values(new bit_1$1.BitIterator(nullBitmap, vector2.data.offset + (fromIndex || 0), vector2.length, nullBitmap, bit_1$1.getBool)), _c = _b.next(); !_c.done; _c = _b.next()) {
      var isValid = _c.value;
      if (!isValid) {
        return i;
      }
      ++i;
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b.return))
        _a.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return -1;
}
function indexOfValue(vector2, searchElement, fromIndex) {
  if (searchElement === void 0) {
    return -1;
  }
  if (searchElement === null) {
    return indexOfNull(vector2, fromIndex);
  }
  var compare = vector_1$2.createElementComparator(searchElement);
  for (var i = (fromIndex || 0) - 1, n = vector2.length; ++i < n; ) {
    if (compare(vector2.get(i))) {
      return i;
    }
  }
  return -1;
}
function indexOfUnion(vector2, searchElement, fromIndex) {
  var compare = vector_1$2.createElementComparator(searchElement);
  for (var i = (fromIndex || 0) - 1, n = vector2.length; ++i < n; ) {
    if (compare(vector2.get(i))) {
      return i;
    }
  }
  return -1;
}
IndexOfVisitor.prototype.visitNull = nullIndexOf;
IndexOfVisitor.prototype.visitBool = indexOfValue;
IndexOfVisitor.prototype.visitInt = indexOfValue;
IndexOfVisitor.prototype.visitInt8 = indexOfValue;
IndexOfVisitor.prototype.visitInt16 = indexOfValue;
IndexOfVisitor.prototype.visitInt32 = indexOfValue;
IndexOfVisitor.prototype.visitInt64 = indexOfValue;
IndexOfVisitor.prototype.visitUint8 = indexOfValue;
IndexOfVisitor.prototype.visitUint16 = indexOfValue;
IndexOfVisitor.prototype.visitUint32 = indexOfValue;
IndexOfVisitor.prototype.visitUint64 = indexOfValue;
IndexOfVisitor.prototype.visitFloat = indexOfValue;
IndexOfVisitor.prototype.visitFloat16 = indexOfValue;
IndexOfVisitor.prototype.visitFloat32 = indexOfValue;
IndexOfVisitor.prototype.visitFloat64 = indexOfValue;
IndexOfVisitor.prototype.visitUtf8 = indexOfValue;
IndexOfVisitor.prototype.visitBinary = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;
IndexOfVisitor.prototype.visitDate = indexOfValue;
IndexOfVisitor.prototype.visitDateDay = indexOfValue;
IndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestamp = indexOfValue;
IndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitTime = indexOfValue;
IndexOfVisitor.prototype.visitTimeSecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;
IndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;
IndexOfVisitor.prototype.visitDecimal = indexOfValue;
IndexOfVisitor.prototype.visitList = indexOfValue;
IndexOfVisitor.prototype.visitStruct = indexOfValue;
IndexOfVisitor.prototype.visitUnion = indexOfValue;
IndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;
IndexOfVisitor.prototype.visitDictionary = indexOfValue;
IndexOfVisitor.prototype.visitInterval = indexOfValue;
IndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;
IndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;
IndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;
IndexOfVisitor.prototype.visitMap = indexOfValue;
indexof.instance = new IndexOfVisitor();
var toarray = {};
var iterator = {};
Object.defineProperty(iterator, "__esModule", { value: true });
iterator.instance = iterator.IteratorVisitor = void 0;
var tslib_1$c = tslib.exports;
var enum_1$3 = _enum;
var visitor_1$4 = visitor;
var bit_1 = bit;
var get_1 = get;
var IteratorVisitor = function(_super) {
  tslib_1$c.__extends(IteratorVisitor2, _super);
  function IteratorVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return IteratorVisitor2;
}(visitor_1$4.Visitor);
iterator.IteratorVisitor = IteratorVisitor;
function nullableIterator(vector2) {
  var getFn = get_1.instance.getVisitFn(vector2);
  return new bit_1.BitIterator(vector2.data.nullBitmap, vector2.data.offset, vector2.length, vector2, function(vec, idx, nullByte, nullBit) {
    return (nullByte & 1 << nullBit) !== 0 ? getFn(vec, idx) : null;
  });
}
var VectorIterator = function() {
  function VectorIterator2(vector2, getFn) {
    this.vector = vector2;
    this.getFn = getFn;
    this.index = 0;
  }
  VectorIterator2.prototype.next = function() {
    if (this.index < this.vector.length) {
      return {
        value: this.getFn(this.vector, this.index++)
      };
    }
    return { done: true, value: null };
  };
  VectorIterator2.prototype[Symbol.iterator] = function() {
    return this;
  };
  return VectorIterator2;
}();
function vectorIterator(vector2) {
  if (vector2.nullCount > 0) {
    return nullableIterator(vector2);
  }
  var type2 = vector2.type, typeId = vector2.typeId, length = vector2.length;
  if (vector2.stride === 1 && (typeId === enum_1$3.Type.Timestamp || typeId === enum_1$3.Type.Int && type2.bitWidth !== 64 || typeId === enum_1$3.Type.Time && type2.bitWidth !== 64 || typeId === enum_1$3.Type.Float && type2.precision > 0)) {
    return vector2.data.values.subarray(0, length)[Symbol.iterator]();
  }
  return new VectorIterator(vector2, get_1.instance.getVisitFn(vector2));
}
IteratorVisitor.prototype.visitNull = vectorIterator;
IteratorVisitor.prototype.visitBool = vectorIterator;
IteratorVisitor.prototype.visitInt = vectorIterator;
IteratorVisitor.prototype.visitInt8 = vectorIterator;
IteratorVisitor.prototype.visitInt16 = vectorIterator;
IteratorVisitor.prototype.visitInt32 = vectorIterator;
IteratorVisitor.prototype.visitInt64 = vectorIterator;
IteratorVisitor.prototype.visitUint8 = vectorIterator;
IteratorVisitor.prototype.visitUint16 = vectorIterator;
IteratorVisitor.prototype.visitUint32 = vectorIterator;
IteratorVisitor.prototype.visitUint64 = vectorIterator;
IteratorVisitor.prototype.visitFloat = vectorIterator;
IteratorVisitor.prototype.visitFloat16 = vectorIterator;
IteratorVisitor.prototype.visitFloat32 = vectorIterator;
IteratorVisitor.prototype.visitFloat64 = vectorIterator;
IteratorVisitor.prototype.visitUtf8 = vectorIterator;
IteratorVisitor.prototype.visitBinary = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;
IteratorVisitor.prototype.visitDate = vectorIterator;
IteratorVisitor.prototype.visitDateDay = vectorIterator;
IteratorVisitor.prototype.visitDateMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestamp = vectorIterator;
IteratorVisitor.prototype.visitTimestampSecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;
IteratorVisitor.prototype.visitTime = vectorIterator;
IteratorVisitor.prototype.visitTimeSecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;
IteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;
IteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;
IteratorVisitor.prototype.visitDecimal = vectorIterator;
IteratorVisitor.prototype.visitList = vectorIterator;
IteratorVisitor.prototype.visitStruct = vectorIterator;
IteratorVisitor.prototype.visitUnion = vectorIterator;
IteratorVisitor.prototype.visitDenseUnion = vectorIterator;
IteratorVisitor.prototype.visitSparseUnion = vectorIterator;
IteratorVisitor.prototype.visitDictionary = vectorIterator;
IteratorVisitor.prototype.visitInterval = vectorIterator;
IteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;
IteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;
IteratorVisitor.prototype.visitFixedSizeList = vectorIterator;
IteratorVisitor.prototype.visitMap = vectorIterator;
iterator.instance = new IteratorVisitor();
Object.defineProperty(toarray, "__esModule", { value: true });
toarray.instance = toarray.ToArrayVisitor = void 0;
var tslib_1$b = tslib.exports;
var enum_1$2 = _enum;
var visitor_1$3 = visitor;
var iterator_1 = iterator;
var ToArrayVisitor = function(_super) {
  tslib_1$b.__extends(ToArrayVisitor2, _super);
  function ToArrayVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return ToArrayVisitor2;
}(visitor_1$3.Visitor);
toarray.ToArrayVisitor = ToArrayVisitor;
function arrayOfVector(vector2) {
  var type2 = vector2.type, length = vector2.length, stride = vector2.stride;
  switch (type2.typeId) {
    case enum_1$2.Type.Int:
    case enum_1$2.Type.Float:
    case enum_1$2.Type.Decimal:
    case enum_1$2.Type.Time:
    case enum_1$2.Type.Timestamp:
      return vector2.data.values.subarray(0, length * stride);
  }
  return tslib_1$b.__spread(iterator_1.instance.visit(vector2));
}
ToArrayVisitor.prototype.visitNull = arrayOfVector;
ToArrayVisitor.prototype.visitBool = arrayOfVector;
ToArrayVisitor.prototype.visitInt = arrayOfVector;
ToArrayVisitor.prototype.visitInt8 = arrayOfVector;
ToArrayVisitor.prototype.visitInt16 = arrayOfVector;
ToArrayVisitor.prototype.visitInt32 = arrayOfVector;
ToArrayVisitor.prototype.visitInt64 = arrayOfVector;
ToArrayVisitor.prototype.visitUint8 = arrayOfVector;
ToArrayVisitor.prototype.visitUint16 = arrayOfVector;
ToArrayVisitor.prototype.visitUint32 = arrayOfVector;
ToArrayVisitor.prototype.visitUint64 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat = arrayOfVector;
ToArrayVisitor.prototype.visitFloat16 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat32 = arrayOfVector;
ToArrayVisitor.prototype.visitFloat64 = arrayOfVector;
ToArrayVisitor.prototype.visitUtf8 = arrayOfVector;
ToArrayVisitor.prototype.visitBinary = arrayOfVector;
ToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;
ToArrayVisitor.prototype.visitDate = arrayOfVector;
ToArrayVisitor.prototype.visitDateDay = arrayOfVector;
ToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestamp = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTime = arrayOfVector;
ToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;
ToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;
ToArrayVisitor.prototype.visitDecimal = arrayOfVector;
ToArrayVisitor.prototype.visitList = arrayOfVector;
ToArrayVisitor.prototype.visitStruct = arrayOfVector;
ToArrayVisitor.prototype.visitUnion = arrayOfVector;
ToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;
ToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;
ToArrayVisitor.prototype.visitDictionary = arrayOfVector;
ToArrayVisitor.prototype.visitInterval = arrayOfVector;
ToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;
ToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;
ToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;
ToArrayVisitor.prototype.visitMap = arrayOfVector;
toarray.instance = new ToArrayVisitor();
var bytewidth = {};
Object.defineProperty(bytewidth, "__esModule", { value: true });
bytewidth.instance = bytewidth.ByteWidthVisitor = void 0;
var tslib_1$a = tslib.exports;
var visitor_1$2 = visitor;
var enum_1$1 = _enum;
var sum = function(x, y) {
  return x + y;
};
var variableWidthColumnErrorMessage = function(type2) {
  return "Cannot compute the byte width of variable-width column " + type2;
};
var ByteWidthVisitor = function(_super) {
  tslib_1$a.__extends(ByteWidthVisitor2, _super);
  function ByteWidthVisitor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ByteWidthVisitor2.prototype.visitNull = function(____) {
    return 0;
  };
  ByteWidthVisitor2.prototype.visitInt = function(type2) {
    return type2.bitWidth / 8;
  };
  ByteWidthVisitor2.prototype.visitFloat = function(type2) {
    return type2.ArrayType.BYTES_PER_ELEMENT;
  };
  ByteWidthVisitor2.prototype.visitBinary = function(type2) {
    throw new Error(variableWidthColumnErrorMessage(type2));
  };
  ByteWidthVisitor2.prototype.visitUtf8 = function(type2) {
    throw new Error(variableWidthColumnErrorMessage(type2));
  };
  ByteWidthVisitor2.prototype.visitBool = function(____) {
    return 1 / 8;
  };
  ByteWidthVisitor2.prototype.visitDecimal = function(____) {
    return 16;
  };
  ByteWidthVisitor2.prototype.visitDate = function(type2) {
    return (type2.unit + 1) * 4;
  };
  ByteWidthVisitor2.prototype.visitTime = function(type2) {
    return type2.bitWidth / 8;
  };
  ByteWidthVisitor2.prototype.visitTimestamp = function(type2) {
    return type2.unit === enum_1$1.TimeUnit.SECOND ? 4 : 8;
  };
  ByteWidthVisitor2.prototype.visitInterval = function(type2) {
    return (type2.unit + 1) * 4;
  };
  ByteWidthVisitor2.prototype.visitList = function(type2) {
    throw new Error(variableWidthColumnErrorMessage(type2));
  };
  ByteWidthVisitor2.prototype.visitStruct = function(type2) {
    return this.visitFields(type2.children).reduce(sum, 0);
  };
  ByteWidthVisitor2.prototype.visitUnion = function(type2) {
    return this.visitFields(type2.children).reduce(sum, 0);
  };
  ByteWidthVisitor2.prototype.visitFixedSizeBinary = function(type2) {
    return type2.byteWidth;
  };
  ByteWidthVisitor2.prototype.visitFixedSizeList = function(type2) {
    return type2.listSize * this.visitFields(type2.children).reduce(sum, 0);
  };
  ByteWidthVisitor2.prototype.visitMap = function(type2) {
    return this.visitFields(type2.children).reduce(sum, 0);
  };
  ByteWidthVisitor2.prototype.visitDictionary = function(type2) {
    return this.visit(type2.indices);
  };
  ByteWidthVisitor2.prototype.visitFields = function(fields) {
    var _this = this;
    return (fields || []).map(function(field) {
      return _this.visit(field.type);
    });
  };
  ByteWidthVisitor2.prototype.visitSchema = function(schema2) {
    return this.visitFields(schema2.fields).reduce(sum, 0);
  };
  return ByteWidthVisitor2;
}(visitor_1$2.Visitor);
bytewidth.ByteWidthVisitor = ByteWidthVisitor;
bytewidth.instance = new ByteWidthVisitor();
var vectorctor = {};
Object.defineProperty(vectorctor, "__esModule", { value: true });
vectorctor.instance = vectorctor.GetVectorConstructor = void 0;
var tslib_1$9 = tslib.exports;
var visitor_1$1 = visitor;
var binary_1 = binary;
var bool_1 = bool;
var date_1 = date;
var decimal_1 = decimal;
var dictionary_1$1 = dictionary;
var fixedsizebinary_1 = fixedsizebinary;
var fixedsizelist_1 = fixedsizelist;
var float_1 = float;
var interval_1 = interval;
var int_1$1 = int;
var list_1 = list;
var map_1 = map;
var null_1 = _null;
var struct_1 = struct;
var timestamp_1 = timestamp;
var time_1 = time;
var union_1 = union;
var utf8_1 = utf8;
var GetVectorConstructor = function(_super) {
  tslib_1$9.__extends(GetVectorConstructor2, _super);
  function GetVectorConstructor2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GetVectorConstructor2.prototype.visitNull = function() {
    return null_1.NullVector;
  };
  GetVectorConstructor2.prototype.visitBool = function() {
    return bool_1.BoolVector;
  };
  GetVectorConstructor2.prototype.visitInt = function() {
    return int_1$1.IntVector;
  };
  GetVectorConstructor2.prototype.visitInt8 = function() {
    return int_1$1.Int8Vector;
  };
  GetVectorConstructor2.prototype.visitInt16 = function() {
    return int_1$1.Int16Vector;
  };
  GetVectorConstructor2.prototype.visitInt32 = function() {
    return int_1$1.Int32Vector;
  };
  GetVectorConstructor2.prototype.visitInt64 = function() {
    return int_1$1.Int64Vector;
  };
  GetVectorConstructor2.prototype.visitUint8 = function() {
    return int_1$1.Uint8Vector;
  };
  GetVectorConstructor2.prototype.visitUint16 = function() {
    return int_1$1.Uint16Vector;
  };
  GetVectorConstructor2.prototype.visitUint32 = function() {
    return int_1$1.Uint32Vector;
  };
  GetVectorConstructor2.prototype.visitUint64 = function() {
    return int_1$1.Uint64Vector;
  };
  GetVectorConstructor2.prototype.visitFloat = function() {
    return float_1.FloatVector;
  };
  GetVectorConstructor2.prototype.visitFloat16 = function() {
    return float_1.Float16Vector;
  };
  GetVectorConstructor2.prototype.visitFloat32 = function() {
    return float_1.Float32Vector;
  };
  GetVectorConstructor2.prototype.visitFloat64 = function() {
    return float_1.Float64Vector;
  };
  GetVectorConstructor2.prototype.visitUtf8 = function() {
    return utf8_1.Utf8Vector;
  };
  GetVectorConstructor2.prototype.visitBinary = function() {
    return binary_1.BinaryVector;
  };
  GetVectorConstructor2.prototype.visitFixedSizeBinary = function() {
    return fixedsizebinary_1.FixedSizeBinaryVector;
  };
  GetVectorConstructor2.prototype.visitDate = function() {
    return date_1.DateVector;
  };
  GetVectorConstructor2.prototype.visitDateDay = function() {
    return date_1.DateDayVector;
  };
  GetVectorConstructor2.prototype.visitDateMillisecond = function() {
    return date_1.DateMillisecondVector;
  };
  GetVectorConstructor2.prototype.visitTimestamp = function() {
    return timestamp_1.TimestampVector;
  };
  GetVectorConstructor2.prototype.visitTimestampSecond = function() {
    return timestamp_1.TimestampSecondVector;
  };
  GetVectorConstructor2.prototype.visitTimestampMillisecond = function() {
    return timestamp_1.TimestampMillisecondVector;
  };
  GetVectorConstructor2.prototype.visitTimestampMicrosecond = function() {
    return timestamp_1.TimestampMicrosecondVector;
  };
  GetVectorConstructor2.prototype.visitTimestampNanosecond = function() {
    return timestamp_1.TimestampNanosecondVector;
  };
  GetVectorConstructor2.prototype.visitTime = function() {
    return time_1.TimeVector;
  };
  GetVectorConstructor2.prototype.visitTimeSecond = function() {
    return time_1.TimeSecondVector;
  };
  GetVectorConstructor2.prototype.visitTimeMillisecond = function() {
    return time_1.TimeMillisecondVector;
  };
  GetVectorConstructor2.prototype.visitTimeMicrosecond = function() {
    return time_1.TimeMicrosecondVector;
  };
  GetVectorConstructor2.prototype.visitTimeNanosecond = function() {
    return time_1.TimeNanosecondVector;
  };
  GetVectorConstructor2.prototype.visitDecimal = function() {
    return decimal_1.DecimalVector;
  };
  GetVectorConstructor2.prototype.visitList = function() {
    return list_1.ListVector;
  };
  GetVectorConstructor2.prototype.visitStruct = function() {
    return struct_1.StructVector;
  };
  GetVectorConstructor2.prototype.visitUnion = function() {
    return union_1.UnionVector;
  };
  GetVectorConstructor2.prototype.visitDenseUnion = function() {
    return union_1.DenseUnionVector;
  };
  GetVectorConstructor2.prototype.visitSparseUnion = function() {
    return union_1.SparseUnionVector;
  };
  GetVectorConstructor2.prototype.visitDictionary = function() {
    return dictionary_1$1.DictionaryVector;
  };
  GetVectorConstructor2.prototype.visitInterval = function() {
    return interval_1.IntervalVector;
  };
  GetVectorConstructor2.prototype.visitIntervalDayTime = function() {
    return interval_1.IntervalDayTimeVector;
  };
  GetVectorConstructor2.prototype.visitIntervalYearMonth = function() {
    return interval_1.IntervalYearMonthVector;
  };
  GetVectorConstructor2.prototype.visitFixedSizeList = function() {
    return fixedsizelist_1.FixedSizeListVector;
  };
  GetVectorConstructor2.prototype.visitMap = function() {
    return map_1.MapVector;
  };
  return GetVectorConstructor2;
}(visitor_1$1.Visitor);
vectorctor.GetVectorConstructor = GetVectorConstructor;
vectorctor.instance = new GetVectorConstructor();
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.vectorFromValuesWithType = exports.StructRow = exports.MapRow = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = void 0;
  var tslib_12 = tslib.exports;
  var vector_12 = vector$2;
  Object.defineProperty(exports, "Vector", { enumerable: true, get: function() {
    return vector_12.Vector;
  } });
  var base_12 = base;
  Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function() {
    return base_12.BaseVector;
  } });
  var binary_12 = binary;
  Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function() {
    return binary_12.BinaryVector;
  } });
  var bool_12 = bool;
  Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function() {
    return bool_12.BoolVector;
  } });
  var chunked_12 = chunked;
  Object.defineProperty(exports, "Chunked", { enumerable: true, get: function() {
    return chunked_12.Chunked;
  } });
  var date_12 = date;
  Object.defineProperty(exports, "DateVector", { enumerable: true, get: function() {
    return date_12.DateVector;
  } });
  Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function() {
    return date_12.DateDayVector;
  } });
  Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function() {
    return date_12.DateMillisecondVector;
  } });
  var decimal_12 = decimal;
  Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function() {
    return decimal_12.DecimalVector;
  } });
  var dictionary_12 = dictionary;
  Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function() {
    return dictionary_12.DictionaryVector;
  } });
  var fixedsizebinary_12 = fixedsizebinary;
  Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function() {
    return fixedsizebinary_12.FixedSizeBinaryVector;
  } });
  var fixedsizelist_12 = fixedsizelist;
  Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function() {
    return fixedsizelist_12.FixedSizeListVector;
  } });
  var float_12 = float;
  Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function() {
    return float_12.FloatVector;
  } });
  Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function() {
    return float_12.Float16Vector;
  } });
  Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function() {
    return float_12.Float32Vector;
  } });
  Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function() {
    return float_12.Float64Vector;
  } });
  var interval_12 = interval;
  Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function() {
    return interval_12.IntervalVector;
  } });
  Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function() {
    return interval_12.IntervalDayTimeVector;
  } });
  Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function() {
    return interval_12.IntervalYearMonthVector;
  } });
  var int_12 = int;
  Object.defineProperty(exports, "IntVector", { enumerable: true, get: function() {
    return int_12.IntVector;
  } });
  Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function() {
    return int_12.Int8Vector;
  } });
  Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function() {
    return int_12.Int16Vector;
  } });
  Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function() {
    return int_12.Int32Vector;
  } });
  Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function() {
    return int_12.Int64Vector;
  } });
  Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function() {
    return int_12.Uint8Vector;
  } });
  Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function() {
    return int_12.Uint16Vector;
  } });
  Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function() {
    return int_12.Uint32Vector;
  } });
  Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function() {
    return int_12.Uint64Vector;
  } });
  var list_12 = list;
  Object.defineProperty(exports, "ListVector", { enumerable: true, get: function() {
    return list_12.ListVector;
  } });
  var map_12 = map;
  Object.defineProperty(exports, "MapVector", { enumerable: true, get: function() {
    return map_12.MapVector;
  } });
  var null_12 = _null;
  Object.defineProperty(exports, "NullVector", { enumerable: true, get: function() {
    return null_12.NullVector;
  } });
  var struct_12 = struct;
  Object.defineProperty(exports, "StructVector", { enumerable: true, get: function() {
    return struct_12.StructVector;
  } });
  var timestamp_12 = timestamp;
  Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function() {
    return timestamp_12.TimestampVector;
  } });
  Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function() {
    return timestamp_12.TimestampSecondVector;
  } });
  Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function() {
    return timestamp_12.TimestampMillisecondVector;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function() {
    return timestamp_12.TimestampMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function() {
    return timestamp_12.TimestampNanosecondVector;
  } });
  var time_12 = time;
  Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function() {
    return time_12.TimeVector;
  } });
  Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function() {
    return time_12.TimeSecondVector;
  } });
  Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function() {
    return time_12.TimeMillisecondVector;
  } });
  Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function() {
    return time_12.TimeMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function() {
    return time_12.TimeNanosecondVector;
  } });
  var union_12 = union;
  Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function() {
    return union_12.UnionVector;
  } });
  Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function() {
    return union_12.DenseUnionVector;
  } });
  Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function() {
    return union_12.SparseUnionVector;
  } });
  var utf8_12 = utf8;
  Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function() {
    return utf8_12.Utf8Vector;
  } });
  var row_12 = row;
  Object.defineProperty(exports, "MapRow", { enumerable: true, get: function() {
    return row_12.MapRow;
  } });
  Object.defineProperty(exports, "StructRow", { enumerable: true, get: function() {
    return row_12.StructRow;
  } });
  var fn$1 = fn;
  var enum_12 = _enum;
  var vector_22 = vector$2;
  var chunked_2 = chunked;
  var base_2 = base;
  var bit_12 = bit;
  var compat_12 = compat;
  var builder_12 = builder$1;
  var get_12 = get;
  var set_1 = set;
  var indexof_1 = indexof;
  var toarray_1 = toarray;
  var iterator_12 = iterator;
  var bytewidth_1 = bytewidth;
  var vectorctor_1 = vectorctor;
  vector_22.Vector.new = newVector;
  vector_22.Vector.from = vectorFrom;
  function newVector(data2) {
    var _a;
    var args2 = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args2[_i - 1] = arguments[_i];
    }
    return new ((_a = vectorctor_1.instance.getVisitFn(data2)()).bind.apply(_a, tslib_12.__spread([void 0, data2], args2)))();
  }
  function vectorFromValuesWithType(newDataType, input) {
    if (compat_12.isIterable(input)) {
      return vector_22.Vector.from({ "nullValues": [null, void 0], type: newDataType(), "values": input });
    } else if (compat_12.isAsyncIterable(input)) {
      return vector_22.Vector.from({ "nullValues": [null, void 0], type: newDataType(), "values": input });
    }
    var _a = tslib_12.__assign({}, input), _b = _a["values"], values = _b === void 0 ? [] : _b, _c = _a["type"], type2 = _c === void 0 ? newDataType() : _c, _d = _a["nullValues"], nullValues = _d === void 0 ? [null, void 0] : _d;
    return compat_12.isIterable(values) ? vector_22.Vector.from(tslib_12.__assign(tslib_12.__assign({ nullValues }, input), { type: type2 })) : vector_22.Vector.from(tslib_12.__assign(tslib_12.__assign({ nullValues }, input), { type: type2 }));
  }
  exports.vectorFromValuesWithType = vectorFromValuesWithType;
  function vectorFrom(input) {
    var _this = this;
    var _a = tslib_12.__assign({ "nullValues": [null, void 0] }, input), _b = _a["values"], values = _b === void 0 ? [] : _b, options = tslib_12.__rest(_a, ["values"]);
    if (compat_12.isIterable(values)) {
      var chunks = tslib_12.__spread(builder_12.Builder.throughIterable(options)(values));
      return chunks.length === 1 ? chunks[0] : chunked_2.Chunked.concat(chunks);
    }
    return function(chunks2) {
      return tslib_12.__awaiter(_this, void 0, void 0, function() {
        var transform, _a2, _b2, chunk, e_1_1;
        var e_1, _c;
        return tslib_12.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              transform = builder_12.Builder.throughAsyncIterable(options);
              _d.label = 1;
            case 1:
              _d.trys.push([1, 6, 7, 12]);
              _a2 = tslib_12.__asyncValues(transform(values));
              _d.label = 2;
            case 2:
              return [4, _a2.next()];
            case 3:
              if (!(_b2 = _d.sent(), !_b2.done))
                return [3, 5];
              chunk = _b2.value;
              chunks2.push(chunk);
              _d.label = 4;
            case 4:
              return [3, 2];
            case 5:
              return [3, 12];
            case 6:
              e_1_1 = _d.sent();
              e_1 = { error: e_1_1 };
              return [3, 12];
            case 7:
              _d.trys.push([7, , 10, 11]);
              if (!(_b2 && !_b2.done && (_c = _a2.return)))
                return [3, 9];
              return [4, _c.call(_a2)];
            case 8:
              _d.sent();
              _d.label = 9;
            case 9:
              return [3, 11];
            case 10:
              if (e_1)
                throw e_1.error;
              return [7];
            case 11:
              return [7];
            case 12:
              return [2, chunks2.length === 1 ? chunks2[0] : chunked_2.Chunked.concat(chunks2)];
          }
        });
      });
    }([]);
  }
  base_2.BaseVector.prototype.get = function baseVectorGet(index) {
    return get_12.instance.visit(this, index);
  };
  base_2.BaseVector.prototype.set = function baseVectorSet(index, value) {
    return set_1.instance.visit(this, index, value);
  };
  base_2.BaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {
    return indexof_1.instance.visit(this, value, fromIndex);
  };
  base_2.BaseVector.prototype.toArray = function baseVectorToArray() {
    return toarray_1.instance.visit(this);
  };
  base_2.BaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {
    return bytewidth_1.instance.visit(this.type);
  };
  base_2.BaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {
    return iterator_12.instance.visit(this);
  };
  base_2.BaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;
  Object.keys(enum_12.Type).map(function(T) {
    return enum_12.Type[T];
  }).filter(function(T) {
    return typeof T === "number";
  }).filter(function(typeId) {
    return typeId !== enum_12.Type.NONE;
  }).forEach(function(typeId) {
    var VectorCtor = vectorctor_1.instance.visit(typeId);
    VectorCtor.prototype["get"] = fn$1.partial1(get_12.instance.getVisitFn(typeId));
    VectorCtor.prototype["set"] = fn$1.partial2(set_1.instance.getVisitFn(typeId));
    VectorCtor.prototype["indexOf"] = fn$1.partial2(indexof_1.instance.getVisitFn(typeId));
    VectorCtor.prototype["toArray"] = fn$1.partial0(toarray_1.instance.getVisitFn(typeId));
    VectorCtor.prototype["getByteWidth"] = partialType0(bytewidth_1.instance.getVisitFn(typeId));
    VectorCtor.prototype[Symbol.iterator] = fn$1.partial0(iterator_12.instance.getVisitFn(typeId));
  });
  function partialType0(visit) {
    return function() {
      return visit(this.type);
    };
  }
  function wrapNullableGet(fn2) {
    return function(i) {
      return this.isValid(i) ? fn2.call(this, i) : null;
    };
  }
  function wrapNullableSet(fn2) {
    return function(i, a) {
      if (bit_12.setBool(this.nullBitmap, this.offset + i, !(a == null))) {
        fn2.call(this, i, a);
      }
    };
  }
  function bindBaseVectorDataAccessors() {
    var nullBitmap = this.nullBitmap;
    if (nullBitmap && nullBitmap.byteLength > 0) {
      this.get = wrapNullableGet(this.get);
      this.set = wrapNullableSet(this.set);
    }
  }
})(vector);
Object.defineProperty(table, "__esModule", { value: true });
table.Table = void 0;
var tslib_1$8 = tslib.exports;
var column_1 = column;
var reader_1$1 = reader$1;
var writer_1 = writer$1;
var recordbatch_1$3 = recordbatch$1;
var schema_1$2 = schema;
var type_1$2 = type;
var args_1$1 = args;
var compat_1$3 = compat;
var recordbatch_2 = recordbatch;
var index_1$2 = vector;
var Table = function(_super) {
  tslib_1$8.__extends(Table2, _super);
  function Table2() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _a;
    var _this = this;
    var schema2 = null;
    if (args2[0] instanceof schema_1$2.Schema) {
      schema2 = args2[0];
    }
    var chunks = args2[0] instanceof Table2 ? args2[0].chunks : args_1$1.selectArgs(recordbatch_1$3.RecordBatch, args2);
    if (!schema2 && !(schema2 = (_a = chunks[0]) === null || _a === void 0 ? void 0 : _a.schema)) {
      throw new TypeError("Table must be initialized with a Schema or at least one RecordBatch");
    }
    chunks[0] || (chunks[0] = new recordbatch_1$3._InternalEmptyPlaceholderRecordBatch(schema2));
    _this = _super.call(this, new type_1$2.Struct(schema2.fields), chunks) || this;
    _this._schema = schema2;
    _this._chunks = chunks;
    return _this;
  }
  Table2.empty = function(schema2) {
    if (schema2 === void 0) {
      schema2 = new schema_1$2.Schema([]);
    }
    return new Table2(schema2, []);
  };
  Table2.from = function(input) {
    var _this = this;
    if (!input) {
      return Table2.empty();
    }
    if (typeof input === "object") {
      var table2 = compat_1$3.isIterable(input["values"]) ? tableFromIterable(input) : compat_1$3.isAsyncIterable(input["values"]) ? tableFromAsyncIterable(input) : null;
      if (table2 !== null) {
        return table2;
      }
    }
    var reader2 = reader_1$1.RecordBatchReader.from(input);
    if (compat_1$3.isPromise(reader2)) {
      return function() {
        return tslib_1$8.__awaiter(_this, void 0, void 0, function() {
          var _a, _b;
          return tslib_1$8.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                _b = (_a = Table2).from;
                return [4, reader2];
              case 1:
                return [4, _b.apply(_a, [_c.sent()])];
              case 2:
                return [2, _c.sent()];
            }
          });
        });
      }();
    }
    if (reader2.isSync() && (reader2 = reader2.open())) {
      return !reader2.schema ? Table2.empty() : new Table2(reader2.schema, tslib_1$8.__spread(reader2));
    }
    return function(opening) {
      return tslib_1$8.__awaiter(_this, void 0, void 0, function() {
        var reader3, schema2, batches, reader_2, reader_2_1, batch, e_1_1;
        var e_1, _a;
        return tslib_1$8.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, opening];
            case 1:
              reader3 = _b.sent();
              schema2 = reader3.schema;
              batches = [];
              if (!schema2)
                return [3, 14];
              _b.label = 2;
            case 2:
              _b.trys.push([2, 7, 8, 13]);
              reader_2 = tslib_1$8.__asyncValues(reader3);
              _b.label = 3;
            case 3:
              return [4, reader_2.next()];
            case 4:
              if (!(reader_2_1 = _b.sent(), !reader_2_1.done))
                return [3, 6];
              batch = reader_2_1.value;
              batches.push(batch);
              _b.label = 5;
            case 5:
              return [3, 3];
            case 6:
              return [3, 13];
            case 7:
              e_1_1 = _b.sent();
              e_1 = { error: e_1_1 };
              return [3, 13];
            case 8:
              _b.trys.push([8, , 11, 12]);
              if (!(reader_2_1 && !reader_2_1.done && (_a = reader_2.return)))
                return [3, 10];
              return [4, _a.call(reader_2)];
            case 9:
              _b.sent();
              _b.label = 10;
            case 10:
              return [3, 12];
            case 11:
              if (e_1)
                throw e_1.error;
              return [7];
            case 12:
              return [7];
            case 13:
              return [2, new Table2(schema2, batches)];
            case 14:
              return [2, Table2.empty()];
          }
        });
      });
    }(reader2.open());
  };
  Table2.fromAsync = function(source) {
    return tslib_1$8.__awaiter(this, void 0, void 0, function() {
      return tslib_1$8.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, Table2.from(source)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  Table2.fromStruct = function(vector2) {
    return Table2.new(vector2.data.childData, vector2.type.children);
  };
  Table2.new = function() {
    var cols = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      cols[_i] = arguments[_i];
    }
    return new (Table2.bind.apply(Table2, tslib_1$8.__spread([void 0], recordbatch_2.distributeColumnsIntoRecordBatches(args_1$1.selectColumnArgs(cols)))))();
  };
  Object.defineProperty(Table2.prototype, "schema", {
    get: function() {
      return this._schema;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Table2.prototype, "length", {
    get: function() {
      return this._length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Table2.prototype, "chunks", {
    get: function() {
      return this._chunks;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Table2.prototype, "numCols", {
    get: function() {
      return this._numChildren;
    },
    enumerable: false,
    configurable: true
  });
  Table2.prototype.clone = function(chunks) {
    if (chunks === void 0) {
      chunks = this._chunks;
    }
    return new Table2(this._schema, chunks);
  };
  Table2.prototype.getColumn = function(name) {
    return this.getColumnAt(this.getColumnIndex(name));
  };
  Table2.prototype.getColumnAt = function(index) {
    return this.getChildAt(index);
  };
  Table2.prototype.getColumnIndex = function(name) {
    return this._schema.fields.findIndex(function(f) {
      return f.name === name;
    });
  };
  Table2.prototype.getChildAt = function(index) {
    if (index < 0 || index >= this.numChildren) {
      return null;
    }
    var field, child;
    var fields = this._schema.fields;
    var columns = this._children || (this._children = []);
    if (child = columns[index]) {
      return child;
    }
    if (field = fields[index]) {
      var chunks = this._chunks.map(function(chunk) {
        return chunk.getChildAt(index);
      }).filter(function(vec) {
        return vec != null;
      });
      if (chunks.length > 0) {
        return columns[index] = new column_1.Column(field, chunks);
      }
    }
    return null;
  };
  Table2.prototype.serialize = function(encoding, stream2) {
    if (stream2 === void 0) {
      stream2 = true;
    }
    var Writer = !stream2 ? writer_1.RecordBatchFileWriter : writer_1.RecordBatchStreamWriter;
    return Writer.writeAll(this).toUint8Array(true);
  };
  Table2.prototype.count = function() {
    return this._length;
  };
  Table2.prototype.select = function() {
    var columnNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnNames[_i] = arguments[_i];
    }
    var nameToIndex = this._schema.fields.reduce(function(m, f, i) {
      return m.set(f.name, i);
    }, new Map());
    return this.selectAt.apply(this, tslib_1$8.__spread(columnNames.map(function(columnName) {
      return nameToIndex.get(columnName);
    }).filter(function(x) {
      return x > -1;
    })));
  };
  Table2.prototype.selectAt = function() {
    var _a;
    var columnIndices = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnIndices[_i] = arguments[_i];
    }
    var schema2 = (_a = this._schema).selectAt.apply(_a, tslib_1$8.__spread(columnIndices));
    return new Table2(schema2, this._chunks.map(function(_a2) {
      var length = _a2.length, childData = _a2.data.childData;
      return new recordbatch_1$3.RecordBatch(schema2, length, columnIndices.map(function(i) {
        return childData[i];
      }).filter(Boolean));
    }));
  };
  Table2.prototype.assign = function(other) {
    var _this = this;
    var fields = this._schema.fields;
    var _a = tslib_1$8.__read(other.schema.fields.reduce(function(memo, f2, newIdx) {
      var _a2 = tslib_1$8.__read(memo, 2), indices2 = _a2[0], oldToNew2 = _a2[1];
      var i = fields.findIndex(function(f) {
        return f.name === f2.name;
      });
      ~i ? oldToNew2[i] = newIdx : indices2.push(newIdx);
      return memo;
    }, [[], []]), 2), indices = _a[0], oldToNew = _a[1];
    var schema2 = this._schema.assign(other.schema);
    var columns = tslib_1$8.__spread(fields.map(function(_f, i, _fs, j) {
      if (j === void 0) {
        j = oldToNew[i];
      }
      return j === void 0 ? _this.getColumnAt(i) : other.getColumnAt(j);
    }), indices.map(function(i) {
      return other.getColumnAt(i);
    })).filter(Boolean);
    return new (Table2.bind.apply(Table2, tslib_1$8.__spread([void 0], recordbatch_2.distributeVectorsIntoRecordBatches(schema2, columns))))();
  };
  return Table2;
}(index_1$2.Chunked);
table.Table = Table;
function tableFromIterable(input) {
  var type2 = input.type;
  if (type2 instanceof type_1$2.Struct) {
    return Table.fromStruct(index_1$2.StructVector.from(input));
  }
  return null;
}
function tableFromAsyncIterable(input) {
  var type2 = input.type;
  if (type2 instanceof type_1$2.Struct) {
    return index_1$2.StructVector.from(input).then(function(vector2) {
      return Table.fromStruct(vector2);
    });
  }
  return null;
}
Object.defineProperty(recordbatch$1, "__esModule", { value: true });
recordbatch$1._InternalEmptyPlaceholderRecordBatch = recordbatch$1.RecordBatch = void 0;
var tslib_1$7 = tslib.exports;
var data_1 = data;
var table_1$1 = table;
var vector_1$1 = vector$2;
var visitor_1 = visitor;
var schema_1$1 = schema;
var compat_1$2 = compat;
var chunked_1 = chunked;
var args_1 = args;
var type_1$1 = type;
var recordbatch_1$2 = recordbatch;
var index_1$1 = vector;
var RecordBatch = function(_super) {
  tslib_1$7.__extends(RecordBatch2, _super);
  function RecordBatch2() {
    var _a;
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _this = this;
    var data2;
    var schema2 = args2[0];
    var children2;
    if (args2[1] instanceof data_1.Data) {
      _a = tslib_1$7.__read(args2, 3), data2 = _a[1], children2 = _a[2];
    } else {
      var fields = schema2.fields;
      var _b = tslib_1$7.__read(args2, 3), length_1 = _b[1], childData = _b[2];
      data2 = data_1.Data.Struct(new type_1$1.Struct(fields), 0, length_1, 0, null, childData);
    }
    _this = _super.call(this, data2, children2) || this;
    _this._schema = schema2;
    return _this;
  }
  RecordBatch2.from = function(options) {
    if (compat_1$2.isIterable(options["values"])) {
      return table_1$1.Table.from(options);
    }
    return table_1$1.Table.from(options);
  };
  RecordBatch2.new = function() {
    var args2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args2[_i] = arguments[_i];
    }
    var _a = tslib_1$7.__read(args_1.selectFieldArgs(args2), 2), fs = _a[0], xs = _a[1];
    var vs = xs.filter(function(x) {
      return x instanceof vector_1$1.Vector;
    });
    return new (RecordBatch2.bind.apply(RecordBatch2, tslib_1$7.__spread([void 0], recordbatch_1$2.ensureSameLengthData(new schema_1$1.Schema(fs), vs.map(function(x) {
      return x.data;
    })))))();
  };
  RecordBatch2.prototype.clone = function(data2, children2) {
    if (children2 === void 0) {
      children2 = this._children;
    }
    return new RecordBatch2(this._schema, data2, children2);
  };
  RecordBatch2.prototype.concat = function() {
    var others = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      others[_i] = arguments[_i];
    }
    var schema2 = this._schema, chunks = chunked_1.Chunked.flatten.apply(chunked_1.Chunked, tslib_1$7.__spread([this], others));
    return new table_1$1.Table(schema2, chunks.map(function(_a) {
      var data2 = _a.data;
      return new RecordBatch2(schema2, data2);
    }));
  };
  Object.defineProperty(RecordBatch2.prototype, "schema", {
    get: function() {
      return this._schema;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatch2.prototype, "numCols", {
    get: function() {
      return this._schema.fields.length;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatch2.prototype, "dictionaries", {
    get: function() {
      return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));
    },
    enumerable: false,
    configurable: true
  });
  RecordBatch2.prototype.select = function() {
    var columnNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnNames[_i] = arguments[_i];
    }
    var nameToIndex = this._schema.fields.reduce(function(m, f, i) {
      return m.set(f.name, i);
    }, new Map());
    return this.selectAt.apply(this, tslib_1$7.__spread(columnNames.map(function(columnName) {
      return nameToIndex.get(columnName);
    }).filter(function(x) {
      return x > -1;
    })));
  };
  RecordBatch2.prototype.selectAt = function() {
    var _a;
    var _this = this;
    var columnIndices = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      columnIndices[_i] = arguments[_i];
    }
    var schema2 = (_a = this._schema).selectAt.apply(_a, tslib_1$7.__spread(columnIndices));
    var childData = columnIndices.map(function(i) {
      return _this.data.childData[i];
    }).filter(Boolean);
    return new RecordBatch2(schema2, this.length, childData);
  };
  return RecordBatch2;
}(index_1$1.StructVector);
recordbatch$1.RecordBatch = RecordBatch;
var _InternalEmptyPlaceholderRecordBatch = function(_super) {
  tslib_1$7.__extends(_InternalEmptyPlaceholderRecordBatch2, _super);
  function _InternalEmptyPlaceholderRecordBatch2(schema2) {
    return _super.call(this, schema2, 0, schema2.fields.map(function(f) {
      return data_1.Data.new(f.type, 0, 0, 0);
    })) || this;
  }
  return _InternalEmptyPlaceholderRecordBatch2;
}(RecordBatch);
recordbatch$1._InternalEmptyPlaceholderRecordBatch = _InternalEmptyPlaceholderRecordBatch;
var DictionaryCollector = function(_super) {
  tslib_1$7.__extends(DictionaryCollector2, _super);
  function DictionaryCollector2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.dictionaries = new Map();
    return _this;
  }
  DictionaryCollector2.collect = function(batch) {
    return new DictionaryCollector2().visit(batch.data, new type_1$1.Struct(batch.schema.fields)).dictionaries;
  };
  DictionaryCollector2.prototype.visit = function(data2, type2) {
    var _this = this;
    if (type_1$1.DataType.isDictionary(type2)) {
      return this.visitDictionary(data2, type2);
    } else {
      data2.childData.forEach(function(child, i) {
        return _this.visit(child, type2.children[i].type);
      });
    }
    return this;
  };
  DictionaryCollector2.prototype.visitDictionary = function(data2, type2) {
    var dictionary2 = data2.dictionary;
    if (dictionary2 && dictionary2.length > 0) {
      this.dictionaries.set(type2.id, dictionary2);
    }
    return this;
  };
  return DictionaryCollector2;
}(visitor_1.Visitor);
Object.defineProperty(reader$1, "__esModule", { value: true });
reader$1.AsyncRecordBatchFileReader = reader$1.RecordBatchFileReader = reader$1.AsyncRecordBatchStreamReader = reader$1.RecordBatchStreamReader = reader$1.RecordBatchReader = void 0;
var tslib_1$6 = tslib.exports;
var vector_1 = vector$2;
var enum_1 = _enum;
var file_1 = file$1;
var adapters_1 = adapters;
var stream_1$2 = stream;
var file_2 = file;
var vectorloader_1 = vectorloader;
var recordbatch_1$1 = recordbatch$1;
var interfaces_1 = interfaces;
var message_1 = message$1;
var compat_1$1 = compat;
var RecordBatchReader = function(_super) {
  tslib_1$6.__extends(RecordBatchReader2, _super);
  function RecordBatchReader2(impl) {
    var _this = _super.call(this) || this;
    _this._impl = impl;
    return _this;
  }
  Object.defineProperty(RecordBatchReader2.prototype, "closed", {
    get: function() {
      return this._impl.closed;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "schema", {
    get: function() {
      return this._impl.schema;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "autoDestroy", {
    get: function() {
      return this._impl.autoDestroy;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "dictionaries", {
    get: function() {
      return this._impl.dictionaries;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "numDictionaries", {
    get: function() {
      return this._impl.numDictionaries;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "numRecordBatches", {
    get: function() {
      return this._impl.numRecordBatches;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReader2.prototype, "footer", {
    get: function() {
      return this._impl.isFile() ? this._impl.footer : null;
    },
    enumerable: false,
    configurable: true
  });
  RecordBatchReader2.prototype.isSync = function() {
    return this._impl.isSync();
  };
  RecordBatchReader2.prototype.isAsync = function() {
    return this._impl.isAsync();
  };
  RecordBatchReader2.prototype.isFile = function() {
    return this._impl.isFile();
  };
  RecordBatchReader2.prototype.isStream = function() {
    return this._impl.isStream();
  };
  RecordBatchReader2.prototype.next = function() {
    return this._impl.next();
  };
  RecordBatchReader2.prototype.throw = function(value) {
    return this._impl.throw(value);
  };
  RecordBatchReader2.prototype.return = function(value) {
    return this._impl.return(value);
  };
  RecordBatchReader2.prototype.cancel = function() {
    return this._impl.cancel();
  };
  RecordBatchReader2.prototype.reset = function(schema2) {
    this._impl.reset(schema2);
    this._DOMStream = void 0;
    this._nodeStream = void 0;
    return this;
  };
  RecordBatchReader2.prototype.open = function(options) {
    var _this = this;
    var opening = this._impl.open(options);
    return compat_1$1.isPromise(opening) ? opening.then(function() {
      return _this;
    }) : this;
  };
  RecordBatchReader2.prototype.readRecordBatch = function(index) {
    return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;
  };
  RecordBatchReader2.prototype[Symbol.iterator] = function() {
    return this._impl[Symbol.iterator]();
  };
  RecordBatchReader2.prototype[Symbol.asyncIterator] = function() {
    return this._impl[Symbol.asyncIterator]();
  };
  RecordBatchReader2.prototype.toDOMStream = function() {
    var _a, _b;
    var _this = this;
    return adapters_1.default.toDOMStream(this.isSync() ? (_a = {}, _a[Symbol.iterator] = function() {
      return _this;
    }, _a) : (_b = {}, _b[Symbol.asyncIterator] = function() {
      return _this;
    }, _b));
  };
  RecordBatchReader2.prototype.toNodeStream = function() {
    var _a, _b;
    var _this = this;
    return adapters_1.default.toNodeStream(this.isSync() ? (_a = {}, _a[Symbol.iterator] = function() {
      return _this;
    }, _a) : (_b = {}, _b[Symbol.asyncIterator] = function() {
      return _this;
    }, _b), { objectMode: true });
  };
  RecordBatchReader2.throughNode = function(options) {
    throw new Error('"throughNode" not available in this environment');
  };
  RecordBatchReader2.throughDOM = function(writableStrategy, readableStrategy) {
    throw new Error('"throughDOM" not available in this environment');
  };
  RecordBatchReader2.from = function(source) {
    var _this = this;
    if (source instanceof RecordBatchReader2) {
      return source;
    } else if (compat_1$1.isArrowJSON(source)) {
      return fromArrowJSON(source);
    } else if (compat_1$1.isFileHandle(source)) {
      return fromFileHandle(source);
    } else if (compat_1$1.isPromise(source)) {
      return function() {
        return tslib_1$6.__awaiter(_this, void 0, void 0, function() {
          var _a, _b;
          return tslib_1$6.__generator(this, function(_c) {
            switch (_c.label) {
              case 0:
                _b = (_a = RecordBatchReader2).from;
                return [4, source];
              case 1:
                return [4, _b.apply(_a, [_c.sent()])];
              case 2:
                return [2, _c.sent()];
            }
          });
        });
      }();
    } else if (compat_1$1.isFetchResponse(source) || compat_1$1.isReadableDOMStream(source) || compat_1$1.isReadableNodeStream(source) || compat_1$1.isAsyncIterable(source)) {
      return fromAsyncByteStream(new stream_1$2.AsyncByteStream(source));
    }
    return fromByteStream(new stream_1$2.ByteStream(source));
  };
  RecordBatchReader2.readAll = function(source) {
    if (source instanceof RecordBatchReader2) {
      return source.isSync() ? readAllSync(source) : readAllAsync(source);
    } else if (compat_1$1.isArrowJSON(source) || ArrayBuffer.isView(source) || compat_1$1.isIterable(source) || compat_1$1.isIteratorResult(source)) {
      return readAllSync(source);
    }
    return readAllAsync(source);
  };
  return RecordBatchReader2;
}(interfaces_1.ReadableInterop);
reader$1.RecordBatchReader = RecordBatchReader;
var RecordBatchStreamReader = function(_super) {
  tslib_1$6.__extends(RecordBatchStreamReader2, _super);
  function RecordBatchStreamReader2(_impl) {
    var _this = _super.call(this, _impl) || this;
    _this._impl = _impl;
    return _this;
  }
  RecordBatchStreamReader2.prototype[Symbol.iterator] = function() {
    return this._impl[Symbol.iterator]();
  };
  RecordBatchStreamReader2.prototype[Symbol.asyncIterator] = function() {
    return tslib_1$6.__asyncGenerator(this, arguments, function _a() {
      return tslib_1$6.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [5, tslib_1$6.__values(tslib_1$6.__asyncDelegator(tslib_1$6.__asyncValues(this[Symbol.iterator]())))];
          case 1:
            return [4, tslib_1$6.__await.apply(void 0, [_b.sent()])];
          case 2:
            _b.sent();
            return [2];
        }
      });
    });
  };
  return RecordBatchStreamReader2;
}(RecordBatchReader);
reader$1.RecordBatchStreamReader = RecordBatchStreamReader;
var AsyncRecordBatchStreamReader = function(_super) {
  tslib_1$6.__extends(AsyncRecordBatchStreamReader2, _super);
  function AsyncRecordBatchStreamReader2(_impl) {
    var _this = _super.call(this, _impl) || this;
    _this._impl = _impl;
    return _this;
  }
  AsyncRecordBatchStreamReader2.prototype[Symbol.iterator] = function() {
    throw new Error("AsyncRecordBatchStreamReader is not Iterable");
  };
  AsyncRecordBatchStreamReader2.prototype[Symbol.asyncIterator] = function() {
    return this._impl[Symbol.asyncIterator]();
  };
  return AsyncRecordBatchStreamReader2;
}(RecordBatchReader);
reader$1.AsyncRecordBatchStreamReader = AsyncRecordBatchStreamReader;
var RecordBatchFileReader = function(_super) {
  tslib_1$6.__extends(RecordBatchFileReader2, _super);
  function RecordBatchFileReader2(_impl) {
    var _this = _super.call(this, _impl) || this;
    _this._impl = _impl;
    return _this;
  }
  return RecordBatchFileReader2;
}(RecordBatchStreamReader);
reader$1.RecordBatchFileReader = RecordBatchFileReader;
var AsyncRecordBatchFileReader = function(_super) {
  tslib_1$6.__extends(AsyncRecordBatchFileReader2, _super);
  function AsyncRecordBatchFileReader2(_impl) {
    var _this = _super.call(this, _impl) || this;
    _this._impl = _impl;
    return _this;
  }
  return AsyncRecordBatchFileReader2;
}(AsyncRecordBatchStreamReader);
reader$1.AsyncRecordBatchFileReader = AsyncRecordBatchFileReader;
var RecordBatchReaderImpl = function() {
  function RecordBatchReaderImpl2(dictionaries) {
    if (dictionaries === void 0) {
      dictionaries = new Map();
    }
    this.closed = false;
    this.autoDestroy = true;
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.dictionaries = dictionaries;
  }
  Object.defineProperty(RecordBatchReaderImpl2.prototype, "numDictionaries", {
    get: function() {
      return this._dictionaryIndex;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchReaderImpl2.prototype, "numRecordBatches", {
    get: function() {
      return this._recordBatchIndex;
    },
    enumerable: false,
    configurable: true
  });
  RecordBatchReaderImpl2.prototype.isSync = function() {
    return false;
  };
  RecordBatchReaderImpl2.prototype.isAsync = function() {
    return false;
  };
  RecordBatchReaderImpl2.prototype.isFile = function() {
    return false;
  };
  RecordBatchReaderImpl2.prototype.isStream = function() {
    return false;
  };
  RecordBatchReaderImpl2.prototype.reset = function(schema2) {
    this._dictionaryIndex = 0;
    this._recordBatchIndex = 0;
    this.schema = schema2;
    this.dictionaries = new Map();
    return this;
  };
  RecordBatchReaderImpl2.prototype._loadRecordBatch = function(header, body) {
    return new recordbatch_1$1.RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));
  };
  RecordBatchReaderImpl2.prototype._loadDictionaryBatch = function(header, body) {
    var id2 = header.id, isDelta = header.isDelta, data2 = header.data;
    var _a = this, dictionaries = _a.dictionaries, schema2 = _a.schema;
    var dictionary2 = dictionaries.get(id2);
    if (isDelta || !dictionary2) {
      var type2 = schema2.dictionaries.get(id2);
      return dictionary2 && isDelta ? dictionary2.concat(vector_1.Vector.new(this._loadVectors(data2, body, [type2])[0])) : vector_1.Vector.new(this._loadVectors(data2, body, [type2])[0]);
    }
    return dictionary2;
  };
  RecordBatchReaderImpl2.prototype._loadVectors = function(header, body, types) {
    return new vectorloader_1.VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  };
  return RecordBatchReaderImpl2;
}();
var RecordBatchStreamReaderImpl = function(_super) {
  tslib_1$6.__extends(RecordBatchStreamReaderImpl2, _super);
  function RecordBatchStreamReaderImpl2(source, dictionaries) {
    var _this = _super.call(this, dictionaries) || this;
    _this._reader = !compat_1$1.isArrowJSON(source) ? new message_1.MessageReader(_this._handle = source) : new message_1.JSONMessageReader(_this._handle = source);
    return _this;
  }
  RecordBatchStreamReaderImpl2.prototype.isSync = function() {
    return true;
  };
  RecordBatchStreamReaderImpl2.prototype.isStream = function() {
    return true;
  };
  RecordBatchStreamReaderImpl2.prototype[Symbol.iterator] = function() {
    return this;
  };
  RecordBatchStreamReaderImpl2.prototype.cancel = function() {
    if (!this.closed && (this.closed = true)) {
      this.reset()._reader.return();
      this._reader = null;
      this.dictionaries = null;
    }
  };
  RecordBatchStreamReaderImpl2.prototype.open = function(options) {
    if (!this.closed) {
      this.autoDestroy = shouldAutoDestroy(this, options);
      if (!(this.schema || (this.schema = this._reader.readSchema()))) {
        this.cancel();
      }
    }
    return this;
  };
  RecordBatchStreamReaderImpl2.prototype.throw = function(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.throw(value);
    }
    return interfaces_1.ITERATOR_DONE;
  };
  RecordBatchStreamReaderImpl2.prototype.return = function(value) {
    if (!this.closed && this.autoDestroy && (this.closed = true)) {
      return this.reset()._reader.return(value);
    }
    return interfaces_1.ITERATOR_DONE;
  };
  RecordBatchStreamReaderImpl2.prototype.next = function() {
    if (this.closed) {
      return interfaces_1.ITERATOR_DONE;
    }
    var message2;
    var reader2 = this._reader;
    while (message2 = this._readNextMessageAndValidate()) {
      if (message2.isSchema()) {
        this.reset(message2.header());
      } else if (message2.isRecordBatch()) {
        this._recordBatchIndex++;
        var header = message2.header();
        var buffer2 = reader2.readMessageBody(message2.bodyLength);
        var recordBatch = this._loadRecordBatch(header, buffer2);
        return { done: false, value: recordBatch };
      } else if (message2.isDictionaryBatch()) {
        this._dictionaryIndex++;
        var header = message2.header();
        var buffer2 = reader2.readMessageBody(message2.bodyLength);
        var vector2 = this._loadDictionaryBatch(header, buffer2);
        this.dictionaries.set(header.id, vector2);
      }
    }
    if (this.schema && this._recordBatchIndex === 0) {
      this._recordBatchIndex++;
      return { done: false, value: new recordbatch_1$1._InternalEmptyPlaceholderRecordBatch(this.schema) };
    }
    return this.return();
  };
  RecordBatchStreamReaderImpl2.prototype._readNextMessageAndValidate = function(type2) {
    return this._reader.readMessage(type2);
  };
  return RecordBatchStreamReaderImpl2;
}(RecordBatchReaderImpl);
var AsyncRecordBatchStreamReaderImpl = function(_super) {
  tslib_1$6.__extends(AsyncRecordBatchStreamReaderImpl2, _super);
  function AsyncRecordBatchStreamReaderImpl2(source, dictionaries) {
    var _this = _super.call(this, dictionaries) || this;
    _this._reader = new message_1.AsyncMessageReader(_this._handle = source);
    return _this;
  }
  AsyncRecordBatchStreamReaderImpl2.prototype.isAsync = function() {
    return true;
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.isStream = function() {
    return true;
  };
  AsyncRecordBatchStreamReaderImpl2.prototype[Symbol.asyncIterator] = function() {
    return this;
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.cancel = function() {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      return tslib_1$6.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!(!this.closed && (this.closed = true)))
              return [3, 2];
            return [4, this.reset()._reader.return()];
          case 1:
            _a.sent();
            this._reader = null;
            this.dictionaries = null;
            _a.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.open = function(options) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var _a, _b;
      return tslib_1$6.__generator(this, function(_c) {
        switch (_c.label) {
          case 0:
            if (!!this.closed)
              return [3, 4];
            this.autoDestroy = shouldAutoDestroy(this, options);
            _a = this.schema;
            if (_a)
              return [3, 2];
            _b = this;
            return [4, this._reader.readSchema()];
          case 1:
            _a = _b.schema = _c.sent();
            _c.label = 2;
          case 2:
            if (!!_a)
              return [3, 4];
            return [4, this.cancel()];
          case 3:
            _c.sent();
            _c.label = 4;
          case 4:
            return [2, this];
        }
      });
    });
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.throw = function(value) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      return tslib_1$6.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!(!this.closed && this.autoDestroy && (this.closed = true)))
              return [3, 2];
            return [4, this.reset()._reader.throw(value)];
          case 1:
            return [2, _a.sent()];
          case 2:
            return [2, interfaces_1.ITERATOR_DONE];
        }
      });
    });
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.return = function(value) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      return tslib_1$6.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (!(!this.closed && this.autoDestroy && (this.closed = true)))
              return [3, 2];
            return [4, this.reset()._reader.return(value)];
          case 1:
            return [2, _a.sent()];
          case 2:
            return [2, interfaces_1.ITERATOR_DONE];
        }
      });
    });
  };
  AsyncRecordBatchStreamReaderImpl2.prototype.next = function() {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var message2, reader2, header, buffer2, recordBatch, header, buffer2, vector2;
      return tslib_1$6.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (this.closed) {
              return [2, interfaces_1.ITERATOR_DONE];
            }
            reader2 = this._reader;
            _a.label = 1;
          case 1:
            return [4, this._readNextMessageAndValidate()];
          case 2:
            if (!(message2 = _a.sent()))
              return [3, 9];
            if (!message2.isSchema())
              return [3, 4];
            return [4, this.reset(message2.header())];
          case 3:
            _a.sent();
            return [3, 8];
          case 4:
            if (!message2.isRecordBatch())
              return [3, 6];
            this._recordBatchIndex++;
            header = message2.header();
            return [4, reader2.readMessageBody(message2.bodyLength)];
          case 5:
            buffer2 = _a.sent();
            recordBatch = this._loadRecordBatch(header, buffer2);
            return [2, { done: false, value: recordBatch }];
          case 6:
            if (!message2.isDictionaryBatch())
              return [3, 8];
            this._dictionaryIndex++;
            header = message2.header();
            return [4, reader2.readMessageBody(message2.bodyLength)];
          case 7:
            buffer2 = _a.sent();
            vector2 = this._loadDictionaryBatch(header, buffer2);
            this.dictionaries.set(header.id, vector2);
            _a.label = 8;
          case 8:
            return [3, 1];
          case 9:
            if (this.schema && this._recordBatchIndex === 0) {
              this._recordBatchIndex++;
              return [2, { done: false, value: new recordbatch_1$1._InternalEmptyPlaceholderRecordBatch(this.schema) }];
            }
            return [4, this.return()];
          case 10:
            return [2, _a.sent()];
        }
      });
    });
  };
  AsyncRecordBatchStreamReaderImpl2.prototype._readNextMessageAndValidate = function(type2) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      return tslib_1$6.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, this._reader.readMessage(type2)];
          case 1:
            return [2, _a.sent()];
        }
      });
    });
  };
  return AsyncRecordBatchStreamReaderImpl2;
}(RecordBatchReaderImpl);
var RecordBatchFileReaderImpl = function(_super) {
  tslib_1$6.__extends(RecordBatchFileReaderImpl2, _super);
  function RecordBatchFileReaderImpl2(source, dictionaries) {
    return _super.call(this, source instanceof file_2.RandomAccessFile ? source : new file_2.RandomAccessFile(source), dictionaries) || this;
  }
  Object.defineProperty(RecordBatchFileReaderImpl2.prototype, "footer", {
    get: function() {
      return this._footer;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchFileReaderImpl2.prototype, "numDictionaries", {
    get: function() {
      return this._footer ? this._footer.numDictionaries : 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RecordBatchFileReaderImpl2.prototype, "numRecordBatches", {
    get: function() {
      return this._footer ? this._footer.numRecordBatches : 0;
    },
    enumerable: false,
    configurable: true
  });
  RecordBatchFileReaderImpl2.prototype.isSync = function() {
    return true;
  };
  RecordBatchFileReaderImpl2.prototype.isFile = function() {
    return true;
  };
  RecordBatchFileReaderImpl2.prototype.open = function(options) {
    var e_1, _a;
    if (!this.closed && !this._footer) {
      this.schema = (this._footer = this._readFooter()).schema;
      try {
        for (var _b = tslib_1$6.__values(this._footer.dictionaryBatches()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var block = _c.value;
          block && this._readDictionaryBatch(this._dictionaryIndex++);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
    return _super.prototype.open.call(this, options);
  };
  RecordBatchFileReaderImpl2.prototype.readRecordBatch = function(index) {
    if (this.closed) {
      return null;
    }
    if (!this._footer) {
      this.open();
    }
    var block = this._footer && this._footer.getRecordBatch(index);
    if (block && this._handle.seek(block.offset)) {
      var message2 = this._reader.readMessage(enum_1.MessageHeader.RecordBatch);
      if (message2 === null || message2 === void 0 ? void 0 : message2.isRecordBatch()) {
        var header = message2.header();
        var buffer2 = this._reader.readMessageBody(message2.bodyLength);
        var recordBatch = this._loadRecordBatch(header, buffer2);
        return recordBatch;
      }
    }
    return null;
  };
  RecordBatchFileReaderImpl2.prototype._readDictionaryBatch = function(index) {
    var block = this._footer && this._footer.getDictionaryBatch(index);
    if (block && this._handle.seek(block.offset)) {
      var message2 = this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch);
      if (message2 === null || message2 === void 0 ? void 0 : message2.isDictionaryBatch()) {
        var header = message2.header();
        var buffer2 = this._reader.readMessageBody(message2.bodyLength);
        var vector2 = this._loadDictionaryBatch(header, buffer2);
        this.dictionaries.set(header.id, vector2);
      }
    }
  };
  RecordBatchFileReaderImpl2.prototype._readFooter = function() {
    var _handle = this._handle;
    var offset = _handle.size - message_1.magicAndPadding;
    var length = _handle.readInt32(offset);
    var buffer2 = _handle.readAt(offset - length, length);
    return file_1.Footer.decode(buffer2);
  };
  RecordBatchFileReaderImpl2.prototype._readNextMessageAndValidate = function(type2) {
    if (!this._footer) {
      this.open();
    }
    if (this._footer && this._recordBatchIndex < this.numRecordBatches) {
      var block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);
      if (block && this._handle.seek(block.offset)) {
        return this._reader.readMessage(type2);
      }
    }
    return null;
  };
  return RecordBatchFileReaderImpl2;
}(RecordBatchStreamReaderImpl);
var AsyncRecordBatchFileReaderImpl = function(_super) {
  tslib_1$6.__extends(AsyncRecordBatchFileReaderImpl2, _super);
  function AsyncRecordBatchFileReaderImpl2(source) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }
    var _this = this;
    var byteLength = typeof rest[0] !== "number" ? rest.shift() : void 0;
    var dictionaries = rest[0] instanceof Map ? rest.shift() : void 0;
    _this = _super.call(this, source instanceof file_2.AsyncRandomAccessFile ? source : new file_2.AsyncRandomAccessFile(source, byteLength), dictionaries) || this;
    return _this;
  }
  Object.defineProperty(AsyncRecordBatchFileReaderImpl2.prototype, "footer", {
    get: function() {
      return this._footer;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AsyncRecordBatchFileReaderImpl2.prototype, "numDictionaries", {
    get: function() {
      return this._footer ? this._footer.numDictionaries : 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(AsyncRecordBatchFileReaderImpl2.prototype, "numRecordBatches", {
    get: function() {
      return this._footer ? this._footer.numRecordBatches : 0;
    },
    enumerable: false,
    configurable: true
  });
  AsyncRecordBatchFileReaderImpl2.prototype.isFile = function() {
    return true;
  };
  AsyncRecordBatchFileReaderImpl2.prototype.isAsync = function() {
    return true;
  };
  AsyncRecordBatchFileReaderImpl2.prototype.open = function(options) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var _a, _b, _c, _d, block, _e, e_2_1;
      var e_2, _f;
      return tslib_1$6.__generator(this, function(_g) {
        switch (_g.label) {
          case 0:
            if (!(!this.closed && !this._footer))
              return [3, 10];
            _a = this;
            _b = this;
            return [4, this._readFooter()];
          case 1:
            _a.schema = (_b._footer = _g.sent()).schema;
            _g.label = 2;
          case 2:
            _g.trys.push([2, 8, 9, 10]);
            _c = tslib_1$6.__values(this._footer.dictionaryBatches()), _d = _c.next();
            _g.label = 3;
          case 3:
            if (!!_d.done)
              return [3, 7];
            block = _d.value;
            _e = block;
            if (!_e)
              return [3, 5];
            return [4, this._readDictionaryBatch(this._dictionaryIndex++)];
          case 4:
            _e = _g.sent();
            _g.label = 5;
          case 5:
            _g.label = 6;
          case 6:
            _d = _c.next();
            return [3, 3];
          case 7:
            return [3, 10];
          case 8:
            e_2_1 = _g.sent();
            e_2 = { error: e_2_1 };
            return [3, 10];
          case 9:
            try {
              if (_d && !_d.done && (_f = _c.return))
                _f.call(_c);
            } finally {
              if (e_2)
                throw e_2.error;
            }
            return [7];
          case 10:
            return [4, _super.prototype.open.call(this, options)];
          case 11:
            return [2, _g.sent()];
        }
      });
    });
  };
  AsyncRecordBatchFileReaderImpl2.prototype.readRecordBatch = function(index) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var block, _a, message2, header, buffer2, recordBatch;
      return tslib_1$6.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (this.closed) {
              return [2, null];
            }
            if (!!this._footer)
              return [3, 2];
            return [4, this.open()];
          case 1:
            _b.sent();
            _b.label = 2;
          case 2:
            block = this._footer && this._footer.getRecordBatch(index);
            _a = block;
            if (!_a)
              return [3, 4];
            return [4, this._handle.seek(block.offset)];
          case 3:
            _a = _b.sent();
            _b.label = 4;
          case 4:
            if (!_a)
              return [3, 7];
            return [4, this._reader.readMessage(enum_1.MessageHeader.RecordBatch)];
          case 5:
            message2 = _b.sent();
            if (!(message2 === null || message2 === void 0 ? void 0 : message2.isRecordBatch()))
              return [3, 7];
            header = message2.header();
            return [4, this._reader.readMessageBody(message2.bodyLength)];
          case 6:
            buffer2 = _b.sent();
            recordBatch = this._loadRecordBatch(header, buffer2);
            return [2, recordBatch];
          case 7:
            return [2, null];
        }
      });
    });
  };
  AsyncRecordBatchFileReaderImpl2.prototype._readDictionaryBatch = function(index) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var block, _a, message2, header, buffer2, vector2;
      return tslib_1$6.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            block = this._footer && this._footer.getDictionaryBatch(index);
            _a = block;
            if (!_a)
              return [3, 2];
            return [4, this._handle.seek(block.offset)];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            if (!_a)
              return [3, 5];
            return [4, this._reader.readMessage(enum_1.MessageHeader.DictionaryBatch)];
          case 3:
            message2 = _b.sent();
            if (!(message2 === null || message2 === void 0 ? void 0 : message2.isDictionaryBatch()))
              return [3, 5];
            header = message2.header();
            return [4, this._reader.readMessageBody(message2.bodyLength)];
          case 4:
            buffer2 = _b.sent();
            vector2 = this._loadDictionaryBatch(header, buffer2);
            this.dictionaries.set(header.id, vector2);
            _b.label = 5;
          case 5:
            return [2];
        }
      });
    });
  };
  AsyncRecordBatchFileReaderImpl2.prototype._readFooter = function() {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var _handle, _a, offset, length, buffer2;
      return tslib_1$6.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _handle = this._handle;
            _a = _handle._pending;
            if (!_a)
              return [3, 2];
            return [4, _handle._pending];
          case 1:
            _a = _b.sent();
            _b.label = 2;
          case 2:
            offset = _handle.size - message_1.magicAndPadding;
            return [4, _handle.readInt32(offset)];
          case 3:
            length = _b.sent();
            return [4, _handle.readAt(offset - length, length)];
          case 4:
            buffer2 = _b.sent();
            return [2, file_1.Footer.decode(buffer2)];
        }
      });
    });
  };
  AsyncRecordBatchFileReaderImpl2.prototype._readNextMessageAndValidate = function(type2) {
    return tslib_1$6.__awaiter(this, void 0, void 0, function() {
      var block, _a;
      return tslib_1$6.__generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!!this._footer)
              return [3, 2];
            return [4, this.open()];
          case 1:
            _b.sent();
            _b.label = 2;
          case 2:
            if (!(this._footer && this._recordBatchIndex < this.numRecordBatches))
              return [3, 6];
            block = this._footer.getRecordBatch(this._recordBatchIndex);
            _a = block;
            if (!_a)
              return [3, 4];
            return [4, this._handle.seek(block.offset)];
          case 3:
            _a = _b.sent();
            _b.label = 4;
          case 4:
            if (!_a)
              return [3, 6];
            return [4, this._reader.readMessage(type2)];
          case 5:
            return [2, _b.sent()];
          case 6:
            return [2, null];
        }
      });
    });
  };
  return AsyncRecordBatchFileReaderImpl2;
}(AsyncRecordBatchStreamReaderImpl);
var RecordBatchJSONReaderImpl = function(_super) {
  tslib_1$6.__extends(RecordBatchJSONReaderImpl2, _super);
  function RecordBatchJSONReaderImpl2(source, dictionaries) {
    return _super.call(this, source, dictionaries) || this;
  }
  RecordBatchJSONReaderImpl2.prototype._loadVectors = function(header, body, types) {
    return new vectorloader_1.JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);
  };
  return RecordBatchJSONReaderImpl2;
}(RecordBatchStreamReaderImpl);
function shouldAutoDestroy(self2, options) {
  return options && typeof options["autoDestroy"] === "boolean" ? options["autoDestroy"] : self2["autoDestroy"];
}
function readAllSync(source) {
  var reader2;
  return tslib_1$6.__generator(this, function(_a) {
    switch (_a.label) {
      case 0:
        reader2 = RecordBatchReader.from(source);
        _a.label = 1;
      case 1:
        _a.trys.push([1, , 6, 7]);
        if (!!reader2.open({ autoDestroy: false }).closed)
          return [3, 5];
        _a.label = 2;
      case 2:
        return [4, reader2];
      case 3:
        _a.sent();
        _a.label = 4;
      case 4:
        if (!reader2.reset().open().closed)
          return [3, 2];
        _a.label = 5;
      case 5:
        return [3, 7];
      case 6:
        reader2.cancel();
        return [7];
      case 7:
        return [2];
    }
  });
}
function readAllAsync(source) {
  return tslib_1$6.__asyncGenerator(this, arguments, function readAllAsync_1() {
    var reader2;
    return tslib_1$6.__generator(this, function(_a) {
      switch (_a.label) {
        case 0:
          return [4, tslib_1$6.__await(RecordBatchReader.from(source))];
        case 1:
          reader2 = _a.sent();
          _a.label = 2;
        case 2:
          _a.trys.push([2, , 10, 12]);
          return [4, tslib_1$6.__await(reader2.open({ autoDestroy: false }))];
        case 3:
          if (!!_a.sent().closed)
            return [3, 9];
          _a.label = 4;
        case 4:
          return [4, tslib_1$6.__await(reader2)];
        case 5:
          return [4, _a.sent()];
        case 6:
          _a.sent();
          _a.label = 7;
        case 7:
          return [4, tslib_1$6.__await(reader2.reset().open())];
        case 8:
          if (!_a.sent().closed)
            return [3, 4];
          _a.label = 9;
        case 9:
          return [3, 12];
        case 10:
          return [4, tslib_1$6.__await(reader2.cancel())];
        case 11:
          _a.sent();
          return [7];
        case 12:
          return [2];
      }
    });
  });
}
function fromArrowJSON(source) {
  return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));
}
function fromByteStream(source) {
  var bytes = source.peek(message_1.magicLength + 7 & ~7);
  return bytes && bytes.byteLength >= 4 ? !message_1.checkForMagicArrowString(bytes) ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source)) : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read())) : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function() {
    return tslib_1$6.__generator(this, function(_a) {
      return [2];
    });
  }()));
}
function fromAsyncByteStream(source) {
  return tslib_1$6.__awaiter(this, void 0, void 0, function() {
    var bytes, _a, _b, _c, _d;
    return tslib_1$6.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          return [4, source.peek(message_1.magicLength + 7 & ~7)];
        case 1:
          bytes = _e.sent();
          if (!(bytes && bytes.byteLength >= 4))
            return [3, 5];
          if (!!message_1.checkForMagicArrowString(bytes))
            return [3, 2];
          _b = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source));
          return [3, 4];
        case 2:
          _c = RecordBatchFileReader.bind;
          _d = RecordBatchFileReaderImpl.bind;
          return [4, source.read()];
        case 3:
          _b = new (_c.apply(RecordBatchFileReader, [void 0, new (_d.apply(RecordBatchFileReaderImpl, [void 0, _e.sent()]))()]))();
          _e.label = 4;
        case 4:
          _a = _b;
          return [3, 6];
        case 5:
          _a = new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(function() {
            return tslib_1$6.__asyncGenerator(this, arguments, function() {
              return tslib_1$6.__generator(this, function(_a2) {
                return [2];
              });
            });
          }()));
          _e.label = 6;
        case 6:
          return [2, _a];
      }
    });
  });
}
function fromFileHandle(source) {
  return tslib_1$6.__awaiter(this, void 0, void 0, function() {
    var size, file2, _a;
    return tslib_1$6.__generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, source.stat()];
        case 1:
          size = _b.sent().size;
          file2 = new file_2.AsyncRandomAccessFile(source, size);
          if (!(size >= message_1.magicX2AndPadding))
            return [3, 3];
          _a = message_1.checkForMagicArrowString;
          return [4, file2.readAt(0, message_1.magicLength + 7 & ~7)];
        case 2:
          if (_a.apply(void 0, [_b.sent()])) {
            return [2, new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file2))];
          }
          _b.label = 3;
        case 3:
          return [2, new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file2))];
      }
    });
  });
}
var iterable = {};
Object.defineProperty(iterable, "__esModule", { value: true });
iterable.toDOMStream = void 0;
var tslib_1$5 = tslib.exports;
var buffer_1 = buffer$1;
var compat_1 = compat;
function toDOMStream(source, options) {
  if (compat_1.isAsyncIterable(source)) {
    return asyncIterableAsReadableDOMStream(source, options);
  }
  if (compat_1.isIterable(source)) {
    return iterableAsReadableDOMStream(source, options);
  }
  throw new Error("toDOMStream() must be called with an Iterable or AsyncIterable");
}
iterable.toDOMStream = toDOMStream;
function iterableAsReadableDOMStream(source, options) {
  var it = null;
  var bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  var hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(tslib_1$5.__assign(tslib_1$5.__assign({}, options), {
    start: function(controller) {
      next(controller, it || (it = source[Symbol.iterator]()));
    },
    pull: function(controller) {
      it ? next(controller, it) : controller.close();
    },
    cancel: function() {
      ((it === null || it === void 0 ? void 0 : it.return) && it.return() || true) && (it = null);
    }
  }), tslib_1$5.__assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it2) {
    var buf;
    var r = null;
    var size = controller.desiredSize || null;
    while (!(r = it2.next(bm ? size : null)).done) {
      if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
        size != null && bm && (size = size - buf.byteLength + 1);
        r.value = buf;
      }
      controller.enqueue(r.value);
      if (size != null && --size <= 0) {
        return;
      }
    }
    controller.close();
  }
}
function asyncIterableAsReadableDOMStream(source, options) {
  var it = null;
  var bm = (options === null || options === void 0 ? void 0 : options.type) === "bytes" || false;
  var hwm = (options === null || options === void 0 ? void 0 : options.highWaterMark) || Math.pow(2, 24);
  return new ReadableStream(tslib_1$5.__assign(tslib_1$5.__assign({}, options), {
    start: function(controller) {
      return tslib_1$5.__awaiter(this, void 0, void 0, function() {
        return tslib_1$5.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(controller, it || (it = source[Symbol.asyncIterator]()))];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    },
    pull: function(controller) {
      return tslib_1$5.__awaiter(this, void 0, void 0, function() {
        return tslib_1$5.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!it)
                return [3, 2];
              return [4, next(controller, it)];
            case 1:
              _b.sent();
              return [3, 3];
            case 2:
              controller.close();
              _b.label = 3;
            case 3:
              return [2];
          }
        });
      });
    },
    cancel: function() {
      return tslib_1$5.__awaiter(this, void 0, void 0, function() {
        var _a;
        return tslib_1$5.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              _a = it === null || it === void 0 ? void 0 : it.return;
              if (!_a)
                return [3, 2];
              return [4, it.return()];
            case 1:
              _a = _b.sent();
              _b.label = 2;
            case 2:
              (_a || true) && (it = null);
              return [2];
          }
        });
      });
    }
  }), tslib_1$5.__assign({ highWaterMark: bm ? hwm : void 0 }, options));
  function next(controller, it2) {
    return tslib_1$5.__awaiter(this, void 0, void 0, function() {
      var buf, r, size;
      return tslib_1$5.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            r = null;
            size = controller.desiredSize || null;
            _a.label = 1;
          case 1:
            return [4, it2.next(bm ? size : null)];
          case 2:
            if (!!(r = _a.sent()).done)
              return [3, 3];
            if (ArrayBuffer.isView(r.value) && (buf = buffer_1.toUint8Array(r.value))) {
              size != null && bm && (size = size - buf.byteLength + 1);
              r.value = buf;
            }
            controller.enqueue(r.value);
            if (size != null && --size <= 0) {
              return [2];
            }
            return [3, 1];
          case 3:
            controller.close();
            return [2];
        }
      });
    });
  }
}
var builder = {};
Object.defineProperty(builder, "__esModule", { value: true });
builder.BuilderTransform = builder.builderThroughDOMStream = void 0;
var tslib_1$4 = tslib.exports;
var index_1 = builder$2;
function builderThroughDOMStream(options) {
  return new BuilderTransform(options);
}
builder.builderThroughDOMStream = builderThroughDOMStream;
var BuilderTransform = function() {
  function BuilderTransform2(options) {
    var _a, _b;
    var _this = this;
    this._numChunks = 0;
    this._finished = false;
    this._bufferedSize = 0;
    var readableStrategy = options["readableStrategy"], writableStrategy = options["writableStrategy"], _c = options["queueingStrategy"], queueingStrategy = _c === void 0 ? "count" : _c, builderOptions = tslib_1$4.__rest(options, ["readableStrategy", "writableStrategy", "queueingStrategy"]);
    this._controller = null;
    this._builder = index_1.Builder.new(builderOptions);
    this._getSize = queueingStrategy !== "bytes" ? chunkLength : chunkByteLength;
    var _d = tslib_1$4.__assign({}, readableStrategy)["highWaterMark"], readableHighWaterMark = _d === void 0 ? queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 : _d;
    var _e = tslib_1$4.__assign({}, writableStrategy)["highWaterMark"], writableHighWaterMark = _e === void 0 ? queueingStrategy === "bytes" ? Math.pow(2, 14) : 1e3 : _e;
    this["readable"] = new ReadableStream((_a = {}, _a["cancel"] = function() {
      _this._builder.clear();
    }, _a["pull"] = function(c2) {
      _this._maybeFlush(_this._builder, _this._controller = c2);
    }, _a["start"] = function(c2) {
      _this._maybeFlush(_this._builder, _this._controller = c2);
    }, _a), {
      "highWaterMark": readableHighWaterMark,
      "size": queueingStrategy !== "bytes" ? chunkLength : chunkByteLength
    });
    this["writable"] = new WritableStream((_b = {}, _b["abort"] = function() {
      _this._builder.clear();
    }, _b["write"] = function() {
      _this._maybeFlush(_this._builder, _this._controller);
    }, _b["close"] = function() {
      _this._maybeFlush(_this._builder.finish(), _this._controller);
    }, _b), {
      "highWaterMark": writableHighWaterMark,
      "size": function(value) {
        return _this._writeValueAndReturnChunkSize(value);
      }
    });
  }
  BuilderTransform2.prototype._writeValueAndReturnChunkSize = function(value) {
    var bufferedSize = this._bufferedSize;
    this._bufferedSize = this._getSize(this._builder.append(value));
    return this._bufferedSize - bufferedSize;
  };
  BuilderTransform2.prototype._maybeFlush = function(builder2, controller) {
    if (controller === null) {
      return;
    }
    if (this._bufferedSize >= controller.desiredSize) {
      ++this._numChunks && this._enqueue(controller, builder2.toVector());
    }
    if (builder2.finished) {
      if (builder2.length > 0 || this._numChunks === 0) {
        ++this._numChunks && this._enqueue(controller, builder2.toVector());
      }
      if (!this._finished && (this._finished = true)) {
        this._enqueue(controller, null);
      }
    }
  };
  BuilderTransform2.prototype._enqueue = function(controller, chunk) {
    this._bufferedSize = 0;
    this._controller = null;
    chunk === null ? controller.close() : controller.enqueue(chunk);
  };
  return BuilderTransform2;
}();
builder.BuilderTransform = BuilderTransform;
var chunkLength = function(chunk) {
  return chunk.length;
};
var chunkByteLength = function(chunk) {
  return chunk.byteLength;
};
var reader = {};
Object.defineProperty(reader, "__esModule", { value: true });
reader.recordBatchReaderThroughDOMStream = void 0;
var tslib_1$3 = tslib.exports;
var stream_1$1 = stream;
var reader_1 = reader$1;
function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {
  var queue = new stream_1$1.AsyncByteQueue();
  var reader2 = null;
  var readable = new ReadableStream({
    cancel: function() {
      return tslib_1$3.__awaiter(this, void 0, void 0, function() {
        return tslib_1$3.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, queue.close()];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    },
    start: function(controller) {
      return tslib_1$3.__awaiter(this, void 0, void 0, function() {
        var _a, _b, _c;
        return tslib_1$3.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              _a = next;
              _b = [controller];
              _c = reader2;
              if (_c)
                return [3, 2];
              return [4, open()];
            case 1:
              _c = reader2 = _d.sent();
              _d.label = 2;
            case 2:
              return [4, _a.apply(void 0, _b.concat([_c]))];
            case 3:
              _d.sent();
              return [2];
          }
        });
      });
    },
    pull: function(controller) {
      return tslib_1$3.__awaiter(this, void 0, void 0, function() {
        return tslib_1$3.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!reader2)
                return [3, 2];
              return [4, next(controller, reader2)];
            case 1:
              _b.sent();
              return [3, 3];
            case 2:
              controller.close();
              _b.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
  });
  return { writable: new WritableStream(queue, tslib_1$3.__assign({ "highWaterMark": Math.pow(2, 14) }, writableStrategy)), readable };
  function open() {
    return tslib_1$3.__awaiter(this, void 0, void 0, function() {
      return tslib_1$3.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            return [4, reader_1.RecordBatchReader.from(queue)];
          case 1:
            return [4, _a.sent().open(readableStrategy)];
          case 2:
            return [2, _a.sent()];
        }
      });
    });
  }
  function next(controller, reader3) {
    return tslib_1$3.__awaiter(this, void 0, void 0, function() {
      var size, r;
      return tslib_1$3.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            size = controller.desiredSize;
            r = null;
            _a.label = 1;
          case 1:
            return [4, reader3.next()];
          case 2:
            if (!!(r = _a.sent()).done)
              return [3, 3];
            controller.enqueue(r.value);
            if (size != null && --size <= 0) {
              return [2];
            }
            return [3, 1];
          case 3:
            controller.close();
            return [2];
        }
      });
    });
  }
}
reader.recordBatchReaderThroughDOMStream = recordBatchReaderThroughDOMStream;
var writer = {};
Object.defineProperty(writer, "__esModule", { value: true });
writer.recordBatchWriterThroughDOMStream = void 0;
var tslib_1$2 = tslib.exports;
var stream_1 = stream;
function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {
  var writer2 = new this(writableStrategy);
  var reader2 = new stream_1.AsyncByteStream(writer2);
  var readable = new ReadableStream({
    type: "bytes",
    cancel: function() {
      return tslib_1$2.__awaiter(this, void 0, void 0, function() {
        return tslib_1$2.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, reader2.cancel()];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    },
    pull: function(controller) {
      return tslib_1$2.__awaiter(this, void 0, void 0, function() {
        return tslib_1$2.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(controller)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    },
    start: function(controller) {
      return tslib_1$2.__awaiter(this, void 0, void 0, function() {
        return tslib_1$2.__generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, next(controller)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    }
  }, tslib_1$2.__assign({ "highWaterMark": Math.pow(2, 14) }, readableStrategy));
  return { writable: new WritableStream(writer2, writableStrategy), readable };
  function next(controller) {
    return tslib_1$2.__awaiter(this, void 0, void 0, function() {
      var buf, size;
      return tslib_1$2.__generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            buf = null;
            size = controller.desiredSize;
            _a.label = 1;
          case 1:
            return [4, reader2.read(size || null)];
          case 2:
            if (!(buf = _a.sent()))
              return [3, 3];
            controller.enqueue(buf);
            if (size != null && (size -= buf.byteLength) <= 0) {
              return [2];
            }
            return [3, 1];
          case 3:
            controller.close();
            return [2];
        }
      });
    });
  }
}
writer.recordBatchWriterThroughDOMStream = recordBatchWriterThroughDOMStream;
var Arrow = {};
var dataframe = {};
var predicate = {};
Object.defineProperty(predicate, "__esModule", { value: true });
predicate.custom = predicate.or = predicate.and = predicate.col = predicate.lit = predicate.CustomPredicate = predicate.Not = predicate.GTeq = predicate.LTeq = predicate.Equals = predicate.Or = predicate.And = predicate.CombinationPredicate = predicate.ComparisonPredicate = predicate.Predicate = predicate.Col = predicate.Literal = predicate.Value = void 0;
var tslib_1$1 = tslib.exports;
var dictionary_1 = dictionary;
var Value = function() {
  function Value2() {
  }
  Value2.prototype.eq = function(other) {
    if (!(other instanceof Value2)) {
      other = new Literal(other);
    }
    return new Equals(this, other);
  };
  Value2.prototype.le = function(other) {
    if (!(other instanceof Value2)) {
      other = new Literal(other);
    }
    return new LTeq(this, other);
  };
  Value2.prototype.ge = function(other) {
    if (!(other instanceof Value2)) {
      other = new Literal(other);
    }
    return new GTeq(this, other);
  };
  Value2.prototype.lt = function(other) {
    return new Not(this.ge(other));
  };
  Value2.prototype.gt = function(other) {
    return new Not(this.le(other));
  };
  Value2.prototype.ne = function(other) {
    return new Not(this.eq(other));
  };
  return Value2;
}();
predicate.Value = Value;
var Literal = function(_super) {
  tslib_1$1.__extends(Literal2, _super);
  function Literal2(v) {
    var _this = _super.call(this) || this;
    _this.v = v;
    return _this;
  }
  return Literal2;
}(Value);
predicate.Literal = Literal;
var Col = function(_super) {
  tslib_1$1.__extends(Col2, _super);
  function Col2(name) {
    var _this = _super.call(this) || this;
    _this.name = name;
    return _this;
  }
  Col2.prototype.bind = function(batch) {
    if (!this.colidx) {
      this.colidx = -1;
      var fields = batch.schema.fields;
      for (var idx = -1; ++idx < fields.length; ) {
        if (fields[idx].name === this.name) {
          this.colidx = idx;
          break;
        }
      }
      if (this.colidx < 0) {
        throw new Error('Failed to bind Col "' + this.name + '"');
      }
    }
    var vec = this.vector = batch.getChildAt(this.colidx);
    return function(idx2) {
      return vec.get(idx2);
    };
  };
  return Col2;
}(Value);
predicate.Col = Col;
var Predicate = function() {
  function Predicate2() {
  }
  Predicate2.prototype.and = function() {
    var expr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      expr[_i] = arguments[_i];
    }
    return new (And.bind.apply(And, tslib_1$1.__spread([void 0, this], expr)))();
  };
  Predicate2.prototype.or = function() {
    var expr = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      expr[_i] = arguments[_i];
    }
    return new (Or.bind.apply(Or, tslib_1$1.__spread([void 0, this], expr)))();
  };
  Predicate2.prototype.not = function() {
    return new Not(this);
  };
  return Predicate2;
}();
predicate.Predicate = Predicate;
var ComparisonPredicate = function(_super) {
  tslib_1$1.__extends(ComparisonPredicate2, _super);
  function ComparisonPredicate2(left, right) {
    var _this = _super.call(this) || this;
    _this.left = left;
    _this.right = right;
    return _this;
  }
  ComparisonPredicate2.prototype.bind = function(batch) {
    if (this.left instanceof Literal) {
      if (this.right instanceof Literal) {
        return this._bindLitLit(batch, this.left, this.right);
      } else {
        return this._bindLitCol(batch, this.left, this.right);
      }
    } else {
      if (this.right instanceof Literal) {
        return this._bindColLit(batch, this.left, this.right);
      } else {
        return this._bindColCol(batch, this.left, this.right);
      }
    }
  };
  return ComparisonPredicate2;
}(Predicate);
predicate.ComparisonPredicate = ComparisonPredicate;
var CombinationPredicate = function(_super) {
  tslib_1$1.__extends(CombinationPredicate2, _super);
  function CombinationPredicate2() {
    var children2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children2[_i] = arguments[_i];
    }
    var _this = _super.call(this) || this;
    _this.children = children2;
    return _this;
  }
  return CombinationPredicate2;
}(Predicate);
predicate.CombinationPredicate = CombinationPredicate;
CombinationPredicate.prototype.children = Object.freeze([]);
var And = function(_super) {
  tslib_1$1.__extends(And2, _super);
  function And2() {
    var children2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children2[_i] = arguments[_i];
    }
    var _this = this;
    children2 = children2.reduce(function(accum, p) {
      return accum.concat(p instanceof And2 ? p.children : p);
    }, []);
    _this = _super.apply(this, tslib_1$1.__spread(children2)) || this;
    return _this;
  }
  And2.prototype.bind = function(batch) {
    var bound = this.children.map(function(p) {
      return p.bind(batch);
    });
    return function(idx, batch2) {
      return bound.every(function(p) {
        return p(idx, batch2);
      });
    };
  };
  return And2;
}(CombinationPredicate);
predicate.And = And;
var Or = function(_super) {
  tslib_1$1.__extends(Or2, _super);
  function Or2() {
    var children2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      children2[_i] = arguments[_i];
    }
    var _this = this;
    children2 = children2.reduce(function(accum, p) {
      return accum.concat(p instanceof Or2 ? p.children : p);
    }, []);
    _this = _super.apply(this, tslib_1$1.__spread(children2)) || this;
    return _this;
  }
  Or2.prototype.bind = function(batch) {
    var bound = this.children.map(function(p) {
      return p.bind(batch);
    });
    return function(idx, batch2) {
      return bound.some(function(p) {
        return p(idx, batch2);
      });
    };
  };
  return Or2;
}(CombinationPredicate);
predicate.Or = Or;
var Equals = function(_super) {
  tslib_1$1.__extends(Equals2, _super);
  function Equals2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Equals2.prototype._bindLitLit = function(_batch, left, right) {
    var rtrn = left.v == right.v;
    return function() {
      return rtrn;
    };
  };
  Equals2.prototype._bindColCol = function(batch, left, right) {
    var left_func = left.bind(batch);
    var right_func = right.bind(batch);
    return function(idx, batch2) {
      return left_func(idx, batch2) == right_func(idx, batch2);
    };
  };
  Equals2.prototype._bindColLit = function(batch, col2, lit2) {
    var col_func = col2.bind(batch);
    if (col2.vector instanceof dictionary_1.DictionaryVector) {
      var key_1;
      var vector_12 = col2.vector;
      if (vector_12.dictionary !== this.lastDictionary) {
        key_1 = vector_12.reverseLookup(lit2.v);
        this.lastDictionary = vector_12.dictionary;
        this.lastKey = key_1;
      } else {
        key_1 = this.lastKey;
      }
      if (key_1 === -1) {
        return function() {
          return false;
        };
      } else {
        return function(idx) {
          return vector_12.getKey(idx) === key_1;
        };
      }
    } else {
      return function(idx, cols) {
        return col_func(idx, cols) == lit2.v;
      };
    }
  };
  Equals2.prototype._bindLitCol = function(batch, lit2, col2) {
    return this._bindColLit(batch, col2, lit2);
  };
  return Equals2;
}(ComparisonPredicate);
predicate.Equals = Equals;
var LTeq = function(_super) {
  tslib_1$1.__extends(LTeq2, _super);
  function LTeq2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  LTeq2.prototype._bindLitLit = function(_batch, left, right) {
    var rtrn = left.v <= right.v;
    return function() {
      return rtrn;
    };
  };
  LTeq2.prototype._bindColCol = function(batch, left, right) {
    var left_func = left.bind(batch);
    var right_func = right.bind(batch);
    return function(idx, cols) {
      return left_func(idx, cols) <= right_func(idx, cols);
    };
  };
  LTeq2.prototype._bindColLit = function(batch, col2, lit2) {
    var col_func = col2.bind(batch);
    return function(idx, cols) {
      return col_func(idx, cols) <= lit2.v;
    };
  };
  LTeq2.prototype._bindLitCol = function(batch, lit2, col2) {
    var col_func = col2.bind(batch);
    return function(idx, cols) {
      return lit2.v <= col_func(idx, cols);
    };
  };
  return LTeq2;
}(ComparisonPredicate);
predicate.LTeq = LTeq;
var GTeq = function(_super) {
  tslib_1$1.__extends(GTeq2, _super);
  function GTeq2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  GTeq2.prototype._bindLitLit = function(_batch, left, right) {
    var rtrn = left.v >= right.v;
    return function() {
      return rtrn;
    };
  };
  GTeq2.prototype._bindColCol = function(batch, left, right) {
    var left_func = left.bind(batch);
    var right_func = right.bind(batch);
    return function(idx, cols) {
      return left_func(idx, cols) >= right_func(idx, cols);
    };
  };
  GTeq2.prototype._bindColLit = function(batch, col2, lit2) {
    var col_func = col2.bind(batch);
    return function(idx, cols) {
      return col_func(idx, cols) >= lit2.v;
    };
  };
  GTeq2.prototype._bindLitCol = function(batch, lit2, col2) {
    var col_func = col2.bind(batch);
    return function(idx, cols) {
      return lit2.v >= col_func(idx, cols);
    };
  };
  return GTeq2;
}(ComparisonPredicate);
predicate.GTeq = GTeq;
var Not = function(_super) {
  tslib_1$1.__extends(Not2, _super);
  function Not2(child) {
    var _this = _super.call(this) || this;
    _this.child = child;
    return _this;
  }
  Not2.prototype.bind = function(batch) {
    var func = this.child.bind(batch);
    return function(idx, batch2) {
      return !func(idx, batch2);
    };
  };
  return Not2;
}(Predicate);
predicate.Not = Not;
var CustomPredicate = function(_super) {
  tslib_1$1.__extends(CustomPredicate2, _super);
  function CustomPredicate2(next, bind_) {
    var _this = _super.call(this) || this;
    _this.next = next;
    _this.bind_ = bind_;
    return _this;
  }
  CustomPredicate2.prototype.bind = function(batch) {
    this.bind_(batch);
    return this.next;
  };
  return CustomPredicate2;
}(Predicate);
predicate.CustomPredicate = CustomPredicate;
function lit(v) {
  return new Literal(v);
}
predicate.lit = lit;
function col(n) {
  return new Col(n);
}
predicate.col = col;
function and() {
  var p = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    p[_i] = arguments[_i];
  }
  return new (And.bind.apply(And, tslib_1$1.__spread([void 0], p)))();
}
predicate.and = and;
function or() {
  var p = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    p[_i] = arguments[_i];
  }
  return new (Or.bind.apply(Or, tslib_1$1.__spread([void 0], p)))();
}
predicate.or = or;
function custom(next, bind) {
  return new CustomPredicate(next, bind);
}
predicate.custom = custom;
Object.defineProperty(dataframe, "__esModule", { value: true });
dataframe.FilteredDataFrame = dataframe.CountByResult = dataframe.DataFrame = void 0;
var tslib_1 = tslib.exports;
var table_1 = table;
var int_1 = int;
var schema_1 = schema;
var predicate_1 = predicate;
var recordbatch_1 = recordbatch$1;
var type_1 = type;
var DataFrame = function(_super) {
  tslib_1.__extends(DataFrame2, _super);
  function DataFrame2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DataFrame2.prototype.filter = function(predicate2) {
    return new FilteredDataFrame(this.chunks, predicate2);
  };
  DataFrame2.prototype.scan = function(next, bind) {
    var batches = this.chunks, numBatches = batches.length;
    for (var batchIndex = -1; ++batchIndex < numBatches; ) {
      var batch = batches[batchIndex];
      if (bind) {
        bind(batch);
      }
      for (var index = -1, numRows = batch.length; ++index < numRows; ) {
        next(index, batch);
      }
    }
  };
  DataFrame2.prototype.scanReverse = function(next, bind) {
    var batches = this.chunks, numBatches = batches.length;
    for (var batchIndex = numBatches; --batchIndex >= 0; ) {
      var batch = batches[batchIndex];
      if (bind) {
        bind(batch);
      }
      for (var index = batch.length; --index >= 0; ) {
        next(index, batch);
      }
    }
  };
  DataFrame2.prototype.countBy = function(name) {
    var batches = this.chunks, numBatches = batches.length;
    var count_by = typeof name === "string" ? new predicate_1.Col(name) : name;
    count_by.bind(batches[numBatches - 1]);
    var vector2 = count_by.vector;
    if (!type_1.DataType.isDictionary(vector2.type)) {
      throw new Error("countBy currently only supports dictionary-encoded columns");
    }
    var countByteLength = Math.ceil(Math.log(vector2.length) / Math.log(256));
    var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;
    var counts = new CountsArrayType(vector2.dictionary.length);
    for (var batchIndex = -1; ++batchIndex < numBatches; ) {
      var batch = batches[batchIndex];
      count_by.bind(batch);
      var keys = count_by.vector.indices;
      for (var index = -1, numRows = batch.length; ++index < numRows; ) {
        var key = keys.get(index);
        if (key !== null) {
          counts[key]++;
        }
      }
    }
    return new CountByResult(vector2.dictionary, int_1.IntVector.from(counts));
  };
  return DataFrame2;
}(table_1.Table);
dataframe.DataFrame = DataFrame;
var CountByResult = function(_super) {
  tslib_1.__extends(CountByResult2, _super);
  function CountByResult2(values, counts) {
    var _this = this;
    var schema2 = new schema_1.Schema([
      new schema_1.Field("values", values.type),
      new schema_1.Field("counts", counts.type)
    ]);
    _this = _super.call(this, new recordbatch_1.RecordBatch(schema2, counts.length, [values, counts])) || this;
    return _this;
  }
  CountByResult2.prototype.toJSON = function() {
    var values = this.getColumnAt(0);
    var counts = this.getColumnAt(1);
    var result = {};
    for (var i = -1; ++i < this.length; ) {
      result[values.get(i)] = counts.get(i);
    }
    return result;
  };
  return CountByResult2;
}(table_1.Table);
dataframe.CountByResult = CountByResult;
var FilteredBatchIterator = function() {
  function FilteredBatchIterator2(batches, predicate2) {
    this.batches = batches;
    this.predicate = predicate2;
    this.batchIndex = 0;
    this.index = 0;
    this.batch = this.batches[this.batchIndex];
    this.predicateFunc = this.predicate.bind(this.batch);
  }
  FilteredBatchIterator2.prototype.next = function() {
    while (this.batchIndex < this.batches.length) {
      while (this.index < this.batch.length) {
        if (this.predicateFunc(this.index, this.batch)) {
          return {
            value: this.batch.get(this.index++)
          };
        }
        this.index++;
      }
      if (++this.batchIndex < this.batches.length) {
        this.index = 0;
        this.batch = this.batches[this.batchIndex];
        this.predicateFunc = this.predicate.bind(this.batch);
      }
    }
    return { done: true, value: null };
  };
  FilteredBatchIterator2.prototype[Symbol.iterator] = function() {
    return this;
  };
  return FilteredBatchIterator2;
}();
var FilteredDataFrame = function(_super) {
  tslib_1.__extends(FilteredDataFrame2, _super);
  function FilteredDataFrame2(batches, predicate2) {
    var _this = _super.call(this, batches) || this;
    _this._predicate = predicate2;
    return _this;
  }
  FilteredDataFrame2.prototype.scan = function(next, bind) {
    var batches = this._chunks;
    var numBatches = batches.length;
    for (var batchIndex = -1; ++batchIndex < numBatches; ) {
      var batch = batches[batchIndex];
      var predicate2 = this._predicate.bind(batch);
      var isBound = false;
      for (var index = -1, numRows = batch.length; ++index < numRows; ) {
        if (predicate2(index, batch)) {
          if (bind && !isBound) {
            bind(batch);
            isBound = true;
          }
          next(index, batch);
        }
      }
    }
  };
  FilteredDataFrame2.prototype.scanReverse = function(next, bind) {
    var batches = this._chunks;
    var numBatches = batches.length;
    for (var batchIndex = numBatches; --batchIndex >= 0; ) {
      var batch = batches[batchIndex];
      var predicate2 = this._predicate.bind(batch);
      var isBound = false;
      for (var index = batch.length; --index >= 0; ) {
        if (predicate2(index, batch)) {
          if (bind && !isBound) {
            bind(batch);
            isBound = true;
          }
          next(index, batch);
        }
      }
    }
  };
  FilteredDataFrame2.prototype.count = function() {
    var sum2 = 0;
    var batches = this._chunks;
    var numBatches = batches.length;
    for (var batchIndex = -1; ++batchIndex < numBatches; ) {
      var batch = batches[batchIndex];
      var predicate2 = this._predicate.bind(batch);
      for (var index = -1, numRows = batch.length; ++index < numRows; ) {
        if (predicate2(index, batch)) {
          ++sum2;
        }
      }
    }
    return sum2;
  };
  FilteredDataFrame2.prototype[Symbol.iterator] = function() {
    return new FilteredBatchIterator(this._chunks, this._predicate);
  };
  FilteredDataFrame2.prototype.filter = function(predicate2) {
    return new FilteredDataFrame2(this._chunks, this._predicate.and(predicate2));
  };
  FilteredDataFrame2.prototype.countBy = function(name) {
    var batches = this._chunks, numBatches = batches.length;
    var count_by = typeof name === "string" ? new predicate_1.Col(name) : name;
    count_by.bind(batches[numBatches - 1]);
    var vector2 = count_by.vector;
    if (!type_1.DataType.isDictionary(vector2.type)) {
      throw new Error("countBy currently only supports dictionary-encoded columns");
    }
    var countByteLength = Math.ceil(Math.log(vector2.length) / Math.log(256));
    var CountsArrayType = countByteLength == 4 ? Uint32Array : countByteLength >= 2 ? Uint16Array : Uint8Array;
    var counts = new CountsArrayType(vector2.dictionary.length);
    for (var batchIndex = -1; ++batchIndex < numBatches; ) {
      var batch = batches[batchIndex];
      var predicate2 = this._predicate.bind(batch);
      count_by.bind(batch);
      var keys = count_by.vector.indices;
      for (var index = -1, numRows = batch.length; ++index < numRows; ) {
        var key = keys.get(index);
        if (key !== null && predicate2(index, batch)) {
          counts[key]++;
        }
      }
    }
    return new CountByResult(vector2.dictionary, int_1.IntVector.from(counts));
  };
  return FilteredDataFrame2;
}(DataFrame);
dataframe.FilteredDataFrame = FilteredDataFrame;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isTypedArray = exports.util = exports.predicate = exports.CountByResult = exports.FilteredDataFrame = exports.DataFrame = exports.RecordBatch = exports.Message = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = exports.RecordBatchJSONWriter = exports.RecordBatchStreamWriter = exports.RecordBatchFileWriter = exports.RecordBatchWriter = exports.AsyncRecordBatchStreamReader = exports.AsyncRecordBatchFileReader = exports.RecordBatchStreamReader = exports.RecordBatchFileReader = exports.RecordBatchReader = exports.AsyncByteQueue = exports.AsyncByteStream = exports.ByteStream = exports.Utf8Builder = exports.SparseUnionBuilder = exports.DenseUnionBuilder = exports.UnionBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.StructBuilder = exports.NullBuilder = exports.MapBuilder = exports.ListBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeListBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.BoolBuilder = exports.BinaryBuilder = exports.Builder = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = exports.Field = exports.Schema = exports.Visitor = exports.Column = exports.Table = exports.Map_ = exports.FixedSizeList = exports.IntervalYearMonth = exports.IntervalDayTime = exports.Interval = exports.Dictionary = exports.SparseUnion = exports.DenseUnion = exports.Union = exports.Struct = exports.List = exports.Decimal = exports.TimeNanosecond = exports.TimeMicrosecond = exports.TimeMillisecond = exports.TimeSecond = exports.Time = exports.TimestampNanosecond = exports.TimestampMicrosecond = exports.TimestampMillisecond = exports.TimestampSecond = exports.Timestamp = exports.DateMillisecond = exports.DateDay = exports.Date_ = exports.FixedSizeBinary = exports.Binary = exports.Utf8 = exports.Float64 = exports.Float32 = exports.Float16 = exports.Float = exports.Uint64 = exports.Uint32 = exports.Uint16 = exports.Uint8 = exports.Int64 = exports.Int32 = exports.Int16 = exports.Int8 = exports.Int = exports.Bool = exports.Null = exports.DataType = exports.Data = exports.BufferType = exports.Type = exports.MessageHeader = exports.MetadataVersion = exports.IntervalUnit = exports.UnionMode = exports.Precision = exports.TimeUnit = exports.DateUnit = void 0;
  var tslib_12 = tslib.exports;
  var Schema_12 = Schema$1;
  Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function() {
    return Schema_12.DateUnit;
  } });
  Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function() {
    return Schema_12.TimeUnit;
  } });
  Object.defineProperty(exports, "Precision", { enumerable: true, get: function() {
    return Schema_12.Precision;
  } });
  Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function() {
    return Schema_12.UnionMode;
  } });
  Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function() {
    return Schema_12.IntervalUnit;
  } });
  Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function() {
    return Schema_12.MetadataVersion;
  } });
  var Message_12 = Message$1;
  Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function() {
    return Message_12.MessageHeader;
  } });
  var enum_12 = _enum;
  Object.defineProperty(exports, "Type", { enumerable: true, get: function() {
    return enum_12.Type;
  } });
  Object.defineProperty(exports, "BufferType", { enumerable: true, get: function() {
    return enum_12.BufferType;
  } });
  var data_12 = data;
  Object.defineProperty(exports, "Data", { enumerable: true, get: function() {
    return data_12.Data;
  } });
  var type_12 = type;
  Object.defineProperty(exports, "DataType", { enumerable: true, get: function() {
    return type_12.DataType;
  } });
  Object.defineProperty(exports, "Null", { enumerable: true, get: function() {
    return type_12.Null;
  } });
  Object.defineProperty(exports, "Bool", { enumerable: true, get: function() {
    return type_12.Bool;
  } });
  Object.defineProperty(exports, "Int", { enumerable: true, get: function() {
    return type_12.Int;
  } });
  Object.defineProperty(exports, "Int8", { enumerable: true, get: function() {
    return type_12.Int8;
  } });
  Object.defineProperty(exports, "Int16", { enumerable: true, get: function() {
    return type_12.Int16;
  } });
  Object.defineProperty(exports, "Int32", { enumerable: true, get: function() {
    return type_12.Int32;
  } });
  Object.defineProperty(exports, "Int64", { enumerable: true, get: function() {
    return type_12.Int64;
  } });
  Object.defineProperty(exports, "Uint8", { enumerable: true, get: function() {
    return type_12.Uint8;
  } });
  Object.defineProperty(exports, "Uint16", { enumerable: true, get: function() {
    return type_12.Uint16;
  } });
  Object.defineProperty(exports, "Uint32", { enumerable: true, get: function() {
    return type_12.Uint32;
  } });
  Object.defineProperty(exports, "Uint64", { enumerable: true, get: function() {
    return type_12.Uint64;
  } });
  Object.defineProperty(exports, "Float", { enumerable: true, get: function() {
    return type_12.Float;
  } });
  Object.defineProperty(exports, "Float16", { enumerable: true, get: function() {
    return type_12.Float16;
  } });
  Object.defineProperty(exports, "Float32", { enumerable: true, get: function() {
    return type_12.Float32;
  } });
  Object.defineProperty(exports, "Float64", { enumerable: true, get: function() {
    return type_12.Float64;
  } });
  Object.defineProperty(exports, "Utf8", { enumerable: true, get: function() {
    return type_12.Utf8;
  } });
  Object.defineProperty(exports, "Binary", { enumerable: true, get: function() {
    return type_12.Binary;
  } });
  Object.defineProperty(exports, "FixedSizeBinary", { enumerable: true, get: function() {
    return type_12.FixedSizeBinary;
  } });
  Object.defineProperty(exports, "Date_", { enumerable: true, get: function() {
    return type_12.Date_;
  } });
  Object.defineProperty(exports, "DateDay", { enumerable: true, get: function() {
    return type_12.DateDay;
  } });
  Object.defineProperty(exports, "DateMillisecond", { enumerable: true, get: function() {
    return type_12.DateMillisecond;
  } });
  Object.defineProperty(exports, "Timestamp", { enumerable: true, get: function() {
    return type_12.Timestamp;
  } });
  Object.defineProperty(exports, "TimestampSecond", { enumerable: true, get: function() {
    return type_12.TimestampSecond;
  } });
  Object.defineProperty(exports, "TimestampMillisecond", { enumerable: true, get: function() {
    return type_12.TimestampMillisecond;
  } });
  Object.defineProperty(exports, "TimestampMicrosecond", { enumerable: true, get: function() {
    return type_12.TimestampMicrosecond;
  } });
  Object.defineProperty(exports, "TimestampNanosecond", { enumerable: true, get: function() {
    return type_12.TimestampNanosecond;
  } });
  Object.defineProperty(exports, "Time", { enumerable: true, get: function() {
    return type_12.Time;
  } });
  Object.defineProperty(exports, "TimeSecond", { enumerable: true, get: function() {
    return type_12.TimeSecond;
  } });
  Object.defineProperty(exports, "TimeMillisecond", { enumerable: true, get: function() {
    return type_12.TimeMillisecond;
  } });
  Object.defineProperty(exports, "TimeMicrosecond", { enumerable: true, get: function() {
    return type_12.TimeMicrosecond;
  } });
  Object.defineProperty(exports, "TimeNanosecond", { enumerable: true, get: function() {
    return type_12.TimeNanosecond;
  } });
  Object.defineProperty(exports, "Decimal", { enumerable: true, get: function() {
    return type_12.Decimal;
  } });
  Object.defineProperty(exports, "List", { enumerable: true, get: function() {
    return type_12.List;
  } });
  Object.defineProperty(exports, "Struct", { enumerable: true, get: function() {
    return type_12.Struct;
  } });
  Object.defineProperty(exports, "Union", { enumerable: true, get: function() {
    return type_12.Union;
  } });
  Object.defineProperty(exports, "DenseUnion", { enumerable: true, get: function() {
    return type_12.DenseUnion;
  } });
  Object.defineProperty(exports, "SparseUnion", { enumerable: true, get: function() {
    return type_12.SparseUnion;
  } });
  Object.defineProperty(exports, "Dictionary", { enumerable: true, get: function() {
    return type_12.Dictionary;
  } });
  Object.defineProperty(exports, "Interval", { enumerable: true, get: function() {
    return type_12.Interval;
  } });
  Object.defineProperty(exports, "IntervalDayTime", { enumerable: true, get: function() {
    return type_12.IntervalDayTime;
  } });
  Object.defineProperty(exports, "IntervalYearMonth", { enumerable: true, get: function() {
    return type_12.IntervalYearMonth;
  } });
  Object.defineProperty(exports, "FixedSizeList", { enumerable: true, get: function() {
    return type_12.FixedSizeList;
  } });
  Object.defineProperty(exports, "Map_", { enumerable: true, get: function() {
    return type_12.Map_;
  } });
  var table_12 = table;
  Object.defineProperty(exports, "Table", { enumerable: true, get: function() {
    return table_12.Table;
  } });
  var column_12 = column;
  Object.defineProperty(exports, "Column", { enumerable: true, get: function() {
    return column_12.Column;
  } });
  var visitor_12 = visitor;
  Object.defineProperty(exports, "Visitor", { enumerable: true, get: function() {
    return visitor_12.Visitor;
  } });
  var schema_12 = schema;
  Object.defineProperty(exports, "Schema", { enumerable: true, get: function() {
    return schema_12.Schema;
  } });
  Object.defineProperty(exports, "Field", { enumerable: true, get: function() {
    return schema_12.Field;
  } });
  var index_12 = vector;
  Object.defineProperty(exports, "Vector", { enumerable: true, get: function() {
    return index_12.Vector;
  } });
  Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function() {
    return index_12.BaseVector;
  } });
  Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function() {
    return index_12.BinaryVector;
  } });
  Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function() {
    return index_12.BoolVector;
  } });
  Object.defineProperty(exports, "Chunked", { enumerable: true, get: function() {
    return index_12.Chunked;
  } });
  Object.defineProperty(exports, "DateVector", { enumerable: true, get: function() {
    return index_12.DateVector;
  } });
  Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function() {
    return index_12.DateDayVector;
  } });
  Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function() {
    return index_12.DateMillisecondVector;
  } });
  Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function() {
    return index_12.DecimalVector;
  } });
  Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function() {
    return index_12.DictionaryVector;
  } });
  Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function() {
    return index_12.FixedSizeBinaryVector;
  } });
  Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function() {
    return index_12.FixedSizeListVector;
  } });
  Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function() {
    return index_12.FloatVector;
  } });
  Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function() {
    return index_12.Float16Vector;
  } });
  Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function() {
    return index_12.Float32Vector;
  } });
  Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function() {
    return index_12.Float64Vector;
  } });
  Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function() {
    return index_12.IntervalVector;
  } });
  Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function() {
    return index_12.IntervalDayTimeVector;
  } });
  Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function() {
    return index_12.IntervalYearMonthVector;
  } });
  Object.defineProperty(exports, "IntVector", { enumerable: true, get: function() {
    return index_12.IntVector;
  } });
  Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function() {
    return index_12.Int8Vector;
  } });
  Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function() {
    return index_12.Int16Vector;
  } });
  Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function() {
    return index_12.Int32Vector;
  } });
  Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function() {
    return index_12.Int64Vector;
  } });
  Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function() {
    return index_12.Uint8Vector;
  } });
  Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function() {
    return index_12.Uint16Vector;
  } });
  Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function() {
    return index_12.Uint32Vector;
  } });
  Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function() {
    return index_12.Uint64Vector;
  } });
  Object.defineProperty(exports, "ListVector", { enumerable: true, get: function() {
    return index_12.ListVector;
  } });
  Object.defineProperty(exports, "MapVector", { enumerable: true, get: function() {
    return index_12.MapVector;
  } });
  Object.defineProperty(exports, "NullVector", { enumerable: true, get: function() {
    return index_12.NullVector;
  } });
  Object.defineProperty(exports, "StructVector", { enumerable: true, get: function() {
    return index_12.StructVector;
  } });
  Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function() {
    return index_12.TimestampVector;
  } });
  Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function() {
    return index_12.TimestampSecondVector;
  } });
  Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function() {
    return index_12.TimestampMillisecondVector;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function() {
    return index_12.TimestampMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function() {
    return index_12.TimestampNanosecondVector;
  } });
  Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function() {
    return index_12.TimeVector;
  } });
  Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function() {
    return index_12.TimeSecondVector;
  } });
  Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function() {
    return index_12.TimeMillisecondVector;
  } });
  Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function() {
    return index_12.TimeMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function() {
    return index_12.TimeNanosecondVector;
  } });
  Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function() {
    return index_12.UnionVector;
  } });
  Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function() {
    return index_12.DenseUnionVector;
  } });
  Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function() {
    return index_12.SparseUnionVector;
  } });
  Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function() {
    return index_12.Utf8Vector;
  } });
  var index_2 = builder$2;
  Object.defineProperty(exports, "Builder", { enumerable: true, get: function() {
    return index_2.Builder;
  } });
  Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function() {
    return index_2.BinaryBuilder;
  } });
  Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function() {
    return index_2.BoolBuilder;
  } });
  Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function() {
    return index_2.DateBuilder;
  } });
  Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function() {
    return index_2.DateDayBuilder;
  } });
  Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function() {
    return index_2.DateMillisecondBuilder;
  } });
  Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function() {
    return index_2.DecimalBuilder;
  } });
  Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function() {
    return index_2.DictionaryBuilder;
  } });
  Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function() {
    return index_2.FixedSizeBinaryBuilder;
  } });
  Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function() {
    return index_2.FixedSizeListBuilder;
  } });
  Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function() {
    return index_2.FloatBuilder;
  } });
  Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function() {
    return index_2.Float16Builder;
  } });
  Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function() {
    return index_2.Float32Builder;
  } });
  Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function() {
    return index_2.Float64Builder;
  } });
  Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function() {
    return index_2.IntervalBuilder;
  } });
  Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function() {
    return index_2.IntervalDayTimeBuilder;
  } });
  Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function() {
    return index_2.IntervalYearMonthBuilder;
  } });
  Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function() {
    return index_2.IntBuilder;
  } });
  Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function() {
    return index_2.Int8Builder;
  } });
  Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function() {
    return index_2.Int16Builder;
  } });
  Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function() {
    return index_2.Int32Builder;
  } });
  Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function() {
    return index_2.Int64Builder;
  } });
  Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function() {
    return index_2.Uint8Builder;
  } });
  Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function() {
    return index_2.Uint16Builder;
  } });
  Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function() {
    return index_2.Uint32Builder;
  } });
  Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function() {
    return index_2.Uint64Builder;
  } });
  Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function() {
    return index_2.ListBuilder;
  } });
  Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function() {
    return index_2.MapBuilder;
  } });
  Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function() {
    return index_2.NullBuilder;
  } });
  Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function() {
    return index_2.StructBuilder;
  } });
  Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function() {
    return index_2.TimestampBuilder;
  } });
  Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function() {
    return index_2.TimestampSecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function() {
    return index_2.TimestampMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function() {
    return index_2.TimestampMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function() {
    return index_2.TimestampNanosecondBuilder;
  } });
  Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function() {
    return index_2.TimeBuilder;
  } });
  Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function() {
    return index_2.TimeSecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function() {
    return index_2.TimeMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function() {
    return index_2.TimeMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function() {
    return index_2.TimeNanosecondBuilder;
  } });
  Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function() {
    return index_2.UnionBuilder;
  } });
  Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function() {
    return index_2.DenseUnionBuilder;
  } });
  Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function() {
    return index_2.SparseUnionBuilder;
  } });
  Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function() {
    return index_2.Utf8Builder;
  } });
  var stream_12 = stream;
  Object.defineProperty(exports, "ByteStream", { enumerable: true, get: function() {
    return stream_12.ByteStream;
  } });
  Object.defineProperty(exports, "AsyncByteStream", { enumerable: true, get: function() {
    return stream_12.AsyncByteStream;
  } });
  Object.defineProperty(exports, "AsyncByteQueue", { enumerable: true, get: function() {
    return stream_12.AsyncByteQueue;
  } });
  var reader_12 = reader$1;
  Object.defineProperty(exports, "RecordBatchReader", { enumerable: true, get: function() {
    return reader_12.RecordBatchReader;
  } });
  Object.defineProperty(exports, "RecordBatchFileReader", { enumerable: true, get: function() {
    return reader_12.RecordBatchFileReader;
  } });
  Object.defineProperty(exports, "RecordBatchStreamReader", { enumerable: true, get: function() {
    return reader_12.RecordBatchStreamReader;
  } });
  Object.defineProperty(exports, "AsyncRecordBatchFileReader", { enumerable: true, get: function() {
    return reader_12.AsyncRecordBatchFileReader;
  } });
  Object.defineProperty(exports, "AsyncRecordBatchStreamReader", { enumerable: true, get: function() {
    return reader_12.AsyncRecordBatchStreamReader;
  } });
  var writer_12 = writer$1;
  Object.defineProperty(exports, "RecordBatchWriter", { enumerable: true, get: function() {
    return writer_12.RecordBatchWriter;
  } });
  Object.defineProperty(exports, "RecordBatchFileWriter", { enumerable: true, get: function() {
    return writer_12.RecordBatchFileWriter;
  } });
  Object.defineProperty(exports, "RecordBatchStreamWriter", { enumerable: true, get: function() {
    return writer_12.RecordBatchStreamWriter;
  } });
  Object.defineProperty(exports, "RecordBatchJSONWriter", { enumerable: true, get: function() {
    return writer_12.RecordBatchJSONWriter;
  } });
  var message_12 = message$1;
  Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function() {
    return message_12.MessageReader;
  } });
  Object.defineProperty(exports, "AsyncMessageReader", { enumerable: true, get: function() {
    return message_12.AsyncMessageReader;
  } });
  Object.defineProperty(exports, "JSONMessageReader", { enumerable: true, get: function() {
    return message_12.JSONMessageReader;
  } });
  var message_22 = message;
  Object.defineProperty(exports, "Message", { enumerable: true, get: function() {
    return message_22.Message;
  } });
  var recordbatch_12 = recordbatch$1;
  Object.defineProperty(exports, "RecordBatch", { enumerable: true, get: function() {
    return recordbatch_12.RecordBatch;
  } });
  var dataframe_1 = dataframe;
  Object.defineProperty(exports, "DataFrame", { enumerable: true, get: function() {
    return dataframe_1.DataFrame;
  } });
  Object.defineProperty(exports, "FilteredDataFrame", { enumerable: true, get: function() {
    return dataframe_1.FilteredDataFrame;
  } });
  Object.defineProperty(exports, "CountByResult", { enumerable: true, get: function() {
    return dataframe_1.CountByResult;
  } });
  var util_bn_ = bn;
  var util_int_ = int$1;
  var util_bit_ = bit;
  var util_math_ = math;
  var util_buffer_ = buffer$1;
  var util_vector_ = vector$1;
  var predicate$1 = predicate;
  exports.predicate = predicate$1;
  var typecomparator_12 = typecomparator;
  exports.util = tslib_12.__assign(tslib_12.__assign(tslib_12.__assign(tslib_12.__assign(tslib_12.__assign(tslib_12.__assign(tslib_12.__assign({}, util_bn_), util_int_), util_bit_), util_math_), util_buffer_), util_vector_), {
    compareSchemas: typecomparator_12.compareSchemas,
    compareFields: typecomparator_12.compareFields,
    compareTypes: typecomparator_12.compareTypes
  });
  var args_12 = args;
  Object.defineProperty(exports, "isTypedArray", { enumerable: true, get: function() {
    return args_12.isTypedArray;
  } });
})(Arrow);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.isTypedArray = exports.Utf8Builder = exports.SparseUnionBuilder = exports.DenseUnionBuilder = exports.UnionBuilder = exports.TimeNanosecondBuilder = exports.TimeMicrosecondBuilder = exports.TimeMillisecondBuilder = exports.TimeSecondBuilder = exports.TimeBuilder = exports.TimestampNanosecondBuilder = exports.TimestampMicrosecondBuilder = exports.TimestampMillisecondBuilder = exports.TimestampSecondBuilder = exports.TimestampBuilder = exports.StructBuilder = exports.NullBuilder = exports.MapBuilder = exports.ListBuilder = exports.Uint64Builder = exports.Uint32Builder = exports.Uint16Builder = exports.Uint8Builder = exports.Int64Builder = exports.Int32Builder = exports.Int16Builder = exports.Int8Builder = exports.IntBuilder = exports.IntervalYearMonthBuilder = exports.IntervalDayTimeBuilder = exports.IntervalBuilder = exports.Float64Builder = exports.Float32Builder = exports.Float16Builder = exports.FloatBuilder = exports.FixedSizeListBuilder = exports.FixedSizeBinaryBuilder = exports.DictionaryBuilder = exports.DecimalBuilder = exports.DateMillisecondBuilder = exports.DateDayBuilder = exports.DateBuilder = exports.BoolBuilder = exports.BinaryBuilder = exports.Builder = exports.util = exports.predicate = exports.CountByResult = exports.FilteredDataFrame = exports.DataFrame = exports.RecordBatch = exports.Message = exports.JSONMessageReader = exports.AsyncMessageReader = exports.MessageReader = exports.RecordBatchJSONWriter = exports.RecordBatchStreamWriter = exports.RecordBatchFileWriter = exports.RecordBatchWriter = exports.AsyncRecordBatchStreamReader = exports.AsyncRecordBatchFileReader = exports.RecordBatchStreamReader = exports.RecordBatchFileReader = exports.RecordBatchReader = exports.AsyncByteQueue = exports.AsyncByteStream = exports.ByteStream = exports.Utf8Vector = exports.SparseUnionVector = exports.DenseUnionVector = exports.UnionVector = exports.TimeNanosecondVector = exports.TimeMicrosecondVector = exports.TimeMillisecondVector = exports.TimeSecondVector = exports.TimeVector = exports.TimestampNanosecondVector = exports.TimestampMicrosecondVector = exports.TimestampMillisecondVector = exports.TimestampSecondVector = exports.TimestampVector = exports.StructVector = exports.NullVector = exports.MapVector = exports.ListVector = exports.Uint64Vector = exports.Uint32Vector = exports.Uint16Vector = exports.Uint8Vector = exports.Int64Vector = exports.Int32Vector = exports.Int16Vector = exports.Int8Vector = exports.IntVector = exports.IntervalYearMonthVector = exports.IntervalDayTimeVector = exports.IntervalVector = exports.Float64Vector = exports.Float32Vector = exports.Float16Vector = exports.FloatVector = exports.FixedSizeListVector = exports.FixedSizeBinaryVector = exports.DictionaryVector = exports.DecimalVector = exports.DateMillisecondVector = exports.DateDayVector = exports.DateVector = exports.Chunked = exports.BoolVector = exports.BinaryVector = exports.BaseVector = exports.Vector = exports.Visitor = exports.Field = exports.Schema = exports.Column = exports.Table = exports.Map_ = exports.FixedSizeList = exports.IntervalYearMonth = exports.IntervalDayTime = exports.Interval = exports.Dictionary = exports.SparseUnion = exports.DenseUnion = exports.Union = exports.Struct = exports.List = exports.Decimal = exports.TimeNanosecond = exports.TimeMicrosecond = exports.TimeMillisecond = exports.TimeSecond = exports.Time = exports.TimestampNanosecond = exports.TimestampMicrosecond = exports.TimestampMillisecond = exports.TimestampSecond = exports.Timestamp = exports.DateMillisecond = exports.DateDay = exports.Date_ = exports.FixedSizeBinary = exports.Binary = exports.Utf8 = exports.Float64 = exports.Float32 = exports.Float16 = exports.Float = exports.Uint64 = exports.Uint32 = exports.Uint16 = exports.Uint8 = exports.Int64 = exports.Int32 = exports.Int16 = exports.Int8 = exports.Int = exports.Bool = exports.Null = exports.DataType = exports.Data = exports.BufferType = exports.UnionMode = exports.Type = exports.TimeUnit = exports.Precision = exports.MetadataVersion = exports.MessageHeader = exports.IntervalUnit = exports.DateUnit = void 0;
  var adapters_12 = adapters;
  var index_12 = builder$2;
  var reader_12 = reader$1;
  var writer_12 = writer$1;
  var iterable_1 = iterable;
  var builder_12 = builder;
  var reader_2 = reader;
  var writer_2 = writer;
  adapters_12.default.toDOMStream = iterable_1.toDOMStream;
  index_12.Builder["throughDOM"] = builder_12.builderThroughDOMStream;
  reader_12.RecordBatchReader["throughDOM"] = reader_2.recordBatchReaderThroughDOMStream;
  reader_12.RecordBatchFileReader["throughDOM"] = reader_2.recordBatchReaderThroughDOMStream;
  reader_12.RecordBatchStreamReader["throughDOM"] = reader_2.recordBatchReaderThroughDOMStream;
  writer_12.RecordBatchWriter["throughDOM"] = writer_2.recordBatchWriterThroughDOMStream;
  writer_12.RecordBatchFileWriter["throughDOM"] = writer_2.recordBatchWriterThroughDOMStream;
  writer_12.RecordBatchStreamWriter["throughDOM"] = writer_2.recordBatchWriterThroughDOMStream;
  var Arrow_1 = Arrow;
  Object.defineProperty(exports, "DateUnit", { enumerable: true, get: function() {
    return Arrow_1.DateUnit;
  } });
  Object.defineProperty(exports, "IntervalUnit", { enumerable: true, get: function() {
    return Arrow_1.IntervalUnit;
  } });
  Object.defineProperty(exports, "MessageHeader", { enumerable: true, get: function() {
    return Arrow_1.MessageHeader;
  } });
  Object.defineProperty(exports, "MetadataVersion", { enumerable: true, get: function() {
    return Arrow_1.MetadataVersion;
  } });
  Object.defineProperty(exports, "Precision", { enumerable: true, get: function() {
    return Arrow_1.Precision;
  } });
  Object.defineProperty(exports, "TimeUnit", { enumerable: true, get: function() {
    return Arrow_1.TimeUnit;
  } });
  Object.defineProperty(exports, "Type", { enumerable: true, get: function() {
    return Arrow_1.Type;
  } });
  Object.defineProperty(exports, "UnionMode", { enumerable: true, get: function() {
    return Arrow_1.UnionMode;
  } });
  Object.defineProperty(exports, "BufferType", { enumerable: true, get: function() {
    return Arrow_1.BufferType;
  } });
  Object.defineProperty(exports, "Data", { enumerable: true, get: function() {
    return Arrow_1.Data;
  } });
  Object.defineProperty(exports, "DataType", { enumerable: true, get: function() {
    return Arrow_1.DataType;
  } });
  Object.defineProperty(exports, "Null", { enumerable: true, get: function() {
    return Arrow_1.Null;
  } });
  Object.defineProperty(exports, "Bool", { enumerable: true, get: function() {
    return Arrow_1.Bool;
  } });
  Object.defineProperty(exports, "Int", { enumerable: true, get: function() {
    return Arrow_1.Int;
  } });
  Object.defineProperty(exports, "Int8", { enumerable: true, get: function() {
    return Arrow_1.Int8;
  } });
  Object.defineProperty(exports, "Int16", { enumerable: true, get: function() {
    return Arrow_1.Int16;
  } });
  Object.defineProperty(exports, "Int32", { enumerable: true, get: function() {
    return Arrow_1.Int32;
  } });
  Object.defineProperty(exports, "Int64", { enumerable: true, get: function() {
    return Arrow_1.Int64;
  } });
  Object.defineProperty(exports, "Uint8", { enumerable: true, get: function() {
    return Arrow_1.Uint8;
  } });
  Object.defineProperty(exports, "Uint16", { enumerable: true, get: function() {
    return Arrow_1.Uint16;
  } });
  Object.defineProperty(exports, "Uint32", { enumerable: true, get: function() {
    return Arrow_1.Uint32;
  } });
  Object.defineProperty(exports, "Uint64", { enumerable: true, get: function() {
    return Arrow_1.Uint64;
  } });
  Object.defineProperty(exports, "Float", { enumerable: true, get: function() {
    return Arrow_1.Float;
  } });
  Object.defineProperty(exports, "Float16", { enumerable: true, get: function() {
    return Arrow_1.Float16;
  } });
  Object.defineProperty(exports, "Float32", { enumerable: true, get: function() {
    return Arrow_1.Float32;
  } });
  Object.defineProperty(exports, "Float64", { enumerable: true, get: function() {
    return Arrow_1.Float64;
  } });
  Object.defineProperty(exports, "Utf8", { enumerable: true, get: function() {
    return Arrow_1.Utf8;
  } });
  Object.defineProperty(exports, "Binary", { enumerable: true, get: function() {
    return Arrow_1.Binary;
  } });
  Object.defineProperty(exports, "FixedSizeBinary", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeBinary;
  } });
  Object.defineProperty(exports, "Date_", { enumerable: true, get: function() {
    return Arrow_1.Date_;
  } });
  Object.defineProperty(exports, "DateDay", { enumerable: true, get: function() {
    return Arrow_1.DateDay;
  } });
  Object.defineProperty(exports, "DateMillisecond", { enumerable: true, get: function() {
    return Arrow_1.DateMillisecond;
  } });
  Object.defineProperty(exports, "Timestamp", { enumerable: true, get: function() {
    return Arrow_1.Timestamp;
  } });
  Object.defineProperty(exports, "TimestampSecond", { enumerable: true, get: function() {
    return Arrow_1.TimestampSecond;
  } });
  Object.defineProperty(exports, "TimestampMillisecond", { enumerable: true, get: function() {
    return Arrow_1.TimestampMillisecond;
  } });
  Object.defineProperty(exports, "TimestampMicrosecond", { enumerable: true, get: function() {
    return Arrow_1.TimestampMicrosecond;
  } });
  Object.defineProperty(exports, "TimestampNanosecond", { enumerable: true, get: function() {
    return Arrow_1.TimestampNanosecond;
  } });
  Object.defineProperty(exports, "Time", { enumerable: true, get: function() {
    return Arrow_1.Time;
  } });
  Object.defineProperty(exports, "TimeSecond", { enumerable: true, get: function() {
    return Arrow_1.TimeSecond;
  } });
  Object.defineProperty(exports, "TimeMillisecond", { enumerable: true, get: function() {
    return Arrow_1.TimeMillisecond;
  } });
  Object.defineProperty(exports, "TimeMicrosecond", { enumerable: true, get: function() {
    return Arrow_1.TimeMicrosecond;
  } });
  Object.defineProperty(exports, "TimeNanosecond", { enumerable: true, get: function() {
    return Arrow_1.TimeNanosecond;
  } });
  Object.defineProperty(exports, "Decimal", { enumerable: true, get: function() {
    return Arrow_1.Decimal;
  } });
  Object.defineProperty(exports, "List", { enumerable: true, get: function() {
    return Arrow_1.List;
  } });
  Object.defineProperty(exports, "Struct", { enumerable: true, get: function() {
    return Arrow_1.Struct;
  } });
  Object.defineProperty(exports, "Union", { enumerable: true, get: function() {
    return Arrow_1.Union;
  } });
  Object.defineProperty(exports, "DenseUnion", { enumerable: true, get: function() {
    return Arrow_1.DenseUnion;
  } });
  Object.defineProperty(exports, "SparseUnion", { enumerable: true, get: function() {
    return Arrow_1.SparseUnion;
  } });
  Object.defineProperty(exports, "Dictionary", { enumerable: true, get: function() {
    return Arrow_1.Dictionary;
  } });
  Object.defineProperty(exports, "Interval", { enumerable: true, get: function() {
    return Arrow_1.Interval;
  } });
  Object.defineProperty(exports, "IntervalDayTime", { enumerable: true, get: function() {
    return Arrow_1.IntervalDayTime;
  } });
  Object.defineProperty(exports, "IntervalYearMonth", { enumerable: true, get: function() {
    return Arrow_1.IntervalYearMonth;
  } });
  Object.defineProperty(exports, "FixedSizeList", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeList;
  } });
  Object.defineProperty(exports, "Map_", { enumerable: true, get: function() {
    return Arrow_1.Map_;
  } });
  Object.defineProperty(exports, "Table", { enumerable: true, get: function() {
    return Arrow_1.Table;
  } });
  Object.defineProperty(exports, "Column", { enumerable: true, get: function() {
    return Arrow_1.Column;
  } });
  Object.defineProperty(exports, "Schema", { enumerable: true, get: function() {
    return Arrow_1.Schema;
  } });
  Object.defineProperty(exports, "Field", { enumerable: true, get: function() {
    return Arrow_1.Field;
  } });
  Object.defineProperty(exports, "Visitor", { enumerable: true, get: function() {
    return Arrow_1.Visitor;
  } });
  Object.defineProperty(exports, "Vector", { enumerable: true, get: function() {
    return Arrow_1.Vector;
  } });
  Object.defineProperty(exports, "BaseVector", { enumerable: true, get: function() {
    return Arrow_1.BaseVector;
  } });
  Object.defineProperty(exports, "BinaryVector", { enumerable: true, get: function() {
    return Arrow_1.BinaryVector;
  } });
  Object.defineProperty(exports, "BoolVector", { enumerable: true, get: function() {
    return Arrow_1.BoolVector;
  } });
  Object.defineProperty(exports, "Chunked", { enumerable: true, get: function() {
    return Arrow_1.Chunked;
  } });
  Object.defineProperty(exports, "DateVector", { enumerable: true, get: function() {
    return Arrow_1.DateVector;
  } });
  Object.defineProperty(exports, "DateDayVector", { enumerable: true, get: function() {
    return Arrow_1.DateDayVector;
  } });
  Object.defineProperty(exports, "DateMillisecondVector", { enumerable: true, get: function() {
    return Arrow_1.DateMillisecondVector;
  } });
  Object.defineProperty(exports, "DecimalVector", { enumerable: true, get: function() {
    return Arrow_1.DecimalVector;
  } });
  Object.defineProperty(exports, "DictionaryVector", { enumerable: true, get: function() {
    return Arrow_1.DictionaryVector;
  } });
  Object.defineProperty(exports, "FixedSizeBinaryVector", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeBinaryVector;
  } });
  Object.defineProperty(exports, "FixedSizeListVector", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeListVector;
  } });
  Object.defineProperty(exports, "FloatVector", { enumerable: true, get: function() {
    return Arrow_1.FloatVector;
  } });
  Object.defineProperty(exports, "Float16Vector", { enumerable: true, get: function() {
    return Arrow_1.Float16Vector;
  } });
  Object.defineProperty(exports, "Float32Vector", { enumerable: true, get: function() {
    return Arrow_1.Float32Vector;
  } });
  Object.defineProperty(exports, "Float64Vector", { enumerable: true, get: function() {
    return Arrow_1.Float64Vector;
  } });
  Object.defineProperty(exports, "IntervalVector", { enumerable: true, get: function() {
    return Arrow_1.IntervalVector;
  } });
  Object.defineProperty(exports, "IntervalDayTimeVector", { enumerable: true, get: function() {
    return Arrow_1.IntervalDayTimeVector;
  } });
  Object.defineProperty(exports, "IntervalYearMonthVector", { enumerable: true, get: function() {
    return Arrow_1.IntervalYearMonthVector;
  } });
  Object.defineProperty(exports, "IntVector", { enumerable: true, get: function() {
    return Arrow_1.IntVector;
  } });
  Object.defineProperty(exports, "Int8Vector", { enumerable: true, get: function() {
    return Arrow_1.Int8Vector;
  } });
  Object.defineProperty(exports, "Int16Vector", { enumerable: true, get: function() {
    return Arrow_1.Int16Vector;
  } });
  Object.defineProperty(exports, "Int32Vector", { enumerable: true, get: function() {
    return Arrow_1.Int32Vector;
  } });
  Object.defineProperty(exports, "Int64Vector", { enumerable: true, get: function() {
    return Arrow_1.Int64Vector;
  } });
  Object.defineProperty(exports, "Uint8Vector", { enumerable: true, get: function() {
    return Arrow_1.Uint8Vector;
  } });
  Object.defineProperty(exports, "Uint16Vector", { enumerable: true, get: function() {
    return Arrow_1.Uint16Vector;
  } });
  Object.defineProperty(exports, "Uint32Vector", { enumerable: true, get: function() {
    return Arrow_1.Uint32Vector;
  } });
  Object.defineProperty(exports, "Uint64Vector", { enumerable: true, get: function() {
    return Arrow_1.Uint64Vector;
  } });
  Object.defineProperty(exports, "ListVector", { enumerable: true, get: function() {
    return Arrow_1.ListVector;
  } });
  Object.defineProperty(exports, "MapVector", { enumerable: true, get: function() {
    return Arrow_1.MapVector;
  } });
  Object.defineProperty(exports, "NullVector", { enumerable: true, get: function() {
    return Arrow_1.NullVector;
  } });
  Object.defineProperty(exports, "StructVector", { enumerable: true, get: function() {
    return Arrow_1.StructVector;
  } });
  Object.defineProperty(exports, "TimestampVector", { enumerable: true, get: function() {
    return Arrow_1.TimestampVector;
  } });
  Object.defineProperty(exports, "TimestampSecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimestampSecondVector;
  } });
  Object.defineProperty(exports, "TimestampMillisecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimestampMillisecondVector;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimestampMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimestampNanosecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimestampNanosecondVector;
  } });
  Object.defineProperty(exports, "TimeVector", { enumerable: true, get: function() {
    return Arrow_1.TimeVector;
  } });
  Object.defineProperty(exports, "TimeSecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimeSecondVector;
  } });
  Object.defineProperty(exports, "TimeMillisecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimeMillisecondVector;
  } });
  Object.defineProperty(exports, "TimeMicrosecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimeMicrosecondVector;
  } });
  Object.defineProperty(exports, "TimeNanosecondVector", { enumerable: true, get: function() {
    return Arrow_1.TimeNanosecondVector;
  } });
  Object.defineProperty(exports, "UnionVector", { enumerable: true, get: function() {
    return Arrow_1.UnionVector;
  } });
  Object.defineProperty(exports, "DenseUnionVector", { enumerable: true, get: function() {
    return Arrow_1.DenseUnionVector;
  } });
  Object.defineProperty(exports, "SparseUnionVector", { enumerable: true, get: function() {
    return Arrow_1.SparseUnionVector;
  } });
  Object.defineProperty(exports, "Utf8Vector", { enumerable: true, get: function() {
    return Arrow_1.Utf8Vector;
  } });
  Object.defineProperty(exports, "ByteStream", { enumerable: true, get: function() {
    return Arrow_1.ByteStream;
  } });
  Object.defineProperty(exports, "AsyncByteStream", { enumerable: true, get: function() {
    return Arrow_1.AsyncByteStream;
  } });
  Object.defineProperty(exports, "AsyncByteQueue", { enumerable: true, get: function() {
    return Arrow_1.AsyncByteQueue;
  } });
  Object.defineProperty(exports, "RecordBatchReader", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchReader;
  } });
  Object.defineProperty(exports, "RecordBatchFileReader", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchFileReader;
  } });
  Object.defineProperty(exports, "RecordBatchStreamReader", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchStreamReader;
  } });
  Object.defineProperty(exports, "AsyncRecordBatchFileReader", { enumerable: true, get: function() {
    return Arrow_1.AsyncRecordBatchFileReader;
  } });
  Object.defineProperty(exports, "AsyncRecordBatchStreamReader", { enumerable: true, get: function() {
    return Arrow_1.AsyncRecordBatchStreamReader;
  } });
  Object.defineProperty(exports, "RecordBatchWriter", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchWriter;
  } });
  Object.defineProperty(exports, "RecordBatchFileWriter", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchFileWriter;
  } });
  Object.defineProperty(exports, "RecordBatchStreamWriter", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchStreamWriter;
  } });
  Object.defineProperty(exports, "RecordBatchJSONWriter", { enumerable: true, get: function() {
    return Arrow_1.RecordBatchJSONWriter;
  } });
  Object.defineProperty(exports, "MessageReader", { enumerable: true, get: function() {
    return Arrow_1.MessageReader;
  } });
  Object.defineProperty(exports, "AsyncMessageReader", { enumerable: true, get: function() {
    return Arrow_1.AsyncMessageReader;
  } });
  Object.defineProperty(exports, "JSONMessageReader", { enumerable: true, get: function() {
    return Arrow_1.JSONMessageReader;
  } });
  Object.defineProperty(exports, "Message", { enumerable: true, get: function() {
    return Arrow_1.Message;
  } });
  Object.defineProperty(exports, "RecordBatch", { enumerable: true, get: function() {
    return Arrow_1.RecordBatch;
  } });
  Object.defineProperty(exports, "DataFrame", { enumerable: true, get: function() {
    return Arrow_1.DataFrame;
  } });
  Object.defineProperty(exports, "FilteredDataFrame", { enumerable: true, get: function() {
    return Arrow_1.FilteredDataFrame;
  } });
  Object.defineProperty(exports, "CountByResult", { enumerable: true, get: function() {
    return Arrow_1.CountByResult;
  } });
  Object.defineProperty(exports, "predicate", { enumerable: true, get: function() {
    return Arrow_1.predicate;
  } });
  Object.defineProperty(exports, "util", { enumerable: true, get: function() {
    return Arrow_1.util;
  } });
  Object.defineProperty(exports, "Builder", { enumerable: true, get: function() {
    return Arrow_1.Builder;
  } });
  Object.defineProperty(exports, "BinaryBuilder", { enumerable: true, get: function() {
    return Arrow_1.BinaryBuilder;
  } });
  Object.defineProperty(exports, "BoolBuilder", { enumerable: true, get: function() {
    return Arrow_1.BoolBuilder;
  } });
  Object.defineProperty(exports, "DateBuilder", { enumerable: true, get: function() {
    return Arrow_1.DateBuilder;
  } });
  Object.defineProperty(exports, "DateDayBuilder", { enumerable: true, get: function() {
    return Arrow_1.DateDayBuilder;
  } });
  Object.defineProperty(exports, "DateMillisecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.DateMillisecondBuilder;
  } });
  Object.defineProperty(exports, "DecimalBuilder", { enumerable: true, get: function() {
    return Arrow_1.DecimalBuilder;
  } });
  Object.defineProperty(exports, "DictionaryBuilder", { enumerable: true, get: function() {
    return Arrow_1.DictionaryBuilder;
  } });
  Object.defineProperty(exports, "FixedSizeBinaryBuilder", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeBinaryBuilder;
  } });
  Object.defineProperty(exports, "FixedSizeListBuilder", { enumerable: true, get: function() {
    return Arrow_1.FixedSizeListBuilder;
  } });
  Object.defineProperty(exports, "FloatBuilder", { enumerable: true, get: function() {
    return Arrow_1.FloatBuilder;
  } });
  Object.defineProperty(exports, "Float16Builder", { enumerable: true, get: function() {
    return Arrow_1.Float16Builder;
  } });
  Object.defineProperty(exports, "Float32Builder", { enumerable: true, get: function() {
    return Arrow_1.Float32Builder;
  } });
  Object.defineProperty(exports, "Float64Builder", { enumerable: true, get: function() {
    return Arrow_1.Float64Builder;
  } });
  Object.defineProperty(exports, "IntervalBuilder", { enumerable: true, get: function() {
    return Arrow_1.IntervalBuilder;
  } });
  Object.defineProperty(exports, "IntervalDayTimeBuilder", { enumerable: true, get: function() {
    return Arrow_1.IntervalDayTimeBuilder;
  } });
  Object.defineProperty(exports, "IntervalYearMonthBuilder", { enumerable: true, get: function() {
    return Arrow_1.IntervalYearMonthBuilder;
  } });
  Object.defineProperty(exports, "IntBuilder", { enumerable: true, get: function() {
    return Arrow_1.IntBuilder;
  } });
  Object.defineProperty(exports, "Int8Builder", { enumerable: true, get: function() {
    return Arrow_1.Int8Builder;
  } });
  Object.defineProperty(exports, "Int16Builder", { enumerable: true, get: function() {
    return Arrow_1.Int16Builder;
  } });
  Object.defineProperty(exports, "Int32Builder", { enumerable: true, get: function() {
    return Arrow_1.Int32Builder;
  } });
  Object.defineProperty(exports, "Int64Builder", { enumerable: true, get: function() {
    return Arrow_1.Int64Builder;
  } });
  Object.defineProperty(exports, "Uint8Builder", { enumerable: true, get: function() {
    return Arrow_1.Uint8Builder;
  } });
  Object.defineProperty(exports, "Uint16Builder", { enumerable: true, get: function() {
    return Arrow_1.Uint16Builder;
  } });
  Object.defineProperty(exports, "Uint32Builder", { enumerable: true, get: function() {
    return Arrow_1.Uint32Builder;
  } });
  Object.defineProperty(exports, "Uint64Builder", { enumerable: true, get: function() {
    return Arrow_1.Uint64Builder;
  } });
  Object.defineProperty(exports, "ListBuilder", { enumerable: true, get: function() {
    return Arrow_1.ListBuilder;
  } });
  Object.defineProperty(exports, "MapBuilder", { enumerable: true, get: function() {
    return Arrow_1.MapBuilder;
  } });
  Object.defineProperty(exports, "NullBuilder", { enumerable: true, get: function() {
    return Arrow_1.NullBuilder;
  } });
  Object.defineProperty(exports, "StructBuilder", { enumerable: true, get: function() {
    return Arrow_1.StructBuilder;
  } });
  Object.defineProperty(exports, "TimestampBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimestampBuilder;
  } });
  Object.defineProperty(exports, "TimestampSecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimestampSecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMillisecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimestampMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampMicrosecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimestampMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimestampNanosecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimestampNanosecondBuilder;
  } });
  Object.defineProperty(exports, "TimeBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimeBuilder;
  } });
  Object.defineProperty(exports, "TimeSecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimeSecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMillisecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimeMillisecondBuilder;
  } });
  Object.defineProperty(exports, "TimeMicrosecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimeMicrosecondBuilder;
  } });
  Object.defineProperty(exports, "TimeNanosecondBuilder", { enumerable: true, get: function() {
    return Arrow_1.TimeNanosecondBuilder;
  } });
  Object.defineProperty(exports, "UnionBuilder", { enumerable: true, get: function() {
    return Arrow_1.UnionBuilder;
  } });
  Object.defineProperty(exports, "DenseUnionBuilder", { enumerable: true, get: function() {
    return Arrow_1.DenseUnionBuilder;
  } });
  Object.defineProperty(exports, "SparseUnionBuilder", { enumerable: true, get: function() {
    return Arrow_1.SparseUnionBuilder;
  } });
  Object.defineProperty(exports, "Utf8Builder", { enumerable: true, get: function() {
    return Arrow_1.Utf8Builder;
  } });
  Object.defineProperty(exports, "isTypedArray", { enumerable: true, get: function() {
    return Arrow_1.isTypedArray;
  } });
})(Arrow_dom);
const proxyMarker = Symbol("Comlink.proxy");
const createEndpoint = Symbol("Comlink.endpoint");
const releaseProxy = Symbol("Comlink.releaseProxy");
const throwMarker = Symbol("Comlink.thrown");
const isObject = (val) => typeof val === "object" && val !== null || typeof val === "function";
const proxyTransferHandler = {
  canHandle: (val) => isObject(val) && val[proxyMarker],
  serialize(obj) {
    const { port1, port2 } = new MessageChannel();
    expose(obj, port1);
    return [port2, [port2]];
  },
  deserialize(port) {
    port.start();
    return wrap(port);
  }
};
const throwTransferHandler = {
  canHandle: (value) => isObject(value) && throwMarker in value,
  serialize({ value }) {
    let serialized;
    if (value instanceof Error) {
      serialized = {
        isError: true,
        value: {
          message: value.message,
          name: value.name,
          stack: value.stack
        }
      };
    } else {
      serialized = { isError: false, value };
    }
    return [serialized, []];
  },
  deserialize(serialized) {
    if (serialized.isError) {
      throw Object.assign(new Error(serialized.value.message), serialized.value);
    }
    throw serialized.value;
  }
};
const transferHandlers = new Map([
  ["proxy", proxyTransferHandler],
  ["throw", throwTransferHandler]
]);
function expose(obj, ep = self) {
  ep.addEventListener("message", function callback(ev) {
    if (!ev || !ev.data) {
      return;
    }
    const { id: id2, type: type2, path } = Object.assign({ path: [] }, ev.data);
    const argumentList = (ev.data.argumentList || []).map(fromWireValue);
    let returnValue;
    try {
      const parent = path.slice(0, -1).reduce((obj2, prop) => obj2[prop], obj);
      const rawValue = path.reduce((obj2, prop) => obj2[prop], obj);
      switch (type2) {
        case "GET":
          {
            returnValue = rawValue;
          }
          break;
        case "SET":
          {
            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);
            returnValue = true;
          }
          break;
        case "APPLY":
          {
            returnValue = rawValue.apply(parent, argumentList);
          }
          break;
        case "CONSTRUCT":
          {
            const value = new rawValue(...argumentList);
            returnValue = proxy(value);
          }
          break;
        case "ENDPOINT":
          {
            const { port1, port2 } = new MessageChannel();
            expose(obj, port2);
            returnValue = transfer(port1, [port1]);
          }
          break;
        case "RELEASE":
          {
            returnValue = void 0;
          }
          break;
        default:
          return;
      }
    } catch (value) {
      returnValue = { value, [throwMarker]: 0 };
    }
    Promise.resolve(returnValue).catch((value) => {
      return { value, [throwMarker]: 0 };
    }).then((returnValue2) => {
      const [wireValue, transferables] = toWireValue(returnValue2);
      ep.postMessage(Object.assign(Object.assign({}, wireValue), { id: id2 }), transferables);
      if (type2 === "RELEASE") {
        ep.removeEventListener("message", callback);
        closeEndPoint(ep);
      }
    });
  });
  if (ep.start) {
    ep.start();
  }
}
function isMessagePort(endpoint) {
  return endpoint.constructor.name === "MessagePort";
}
function closeEndPoint(endpoint) {
  if (isMessagePort(endpoint))
    endpoint.close();
}
function wrap(ep, target) {
  return createProxy(ep, [], target);
}
function throwIfProxyReleased(isReleased) {
  if (isReleased) {
    throw new Error("Proxy has been released and is not useable");
  }
}
function createProxy(ep, path = [], target = function() {
}) {
  let isProxyReleased = false;
  const proxy2 = new Proxy(target, {
    get(_target, prop) {
      throwIfProxyReleased(isProxyReleased);
      if (prop === releaseProxy) {
        return () => {
          return requestResponseMessage(ep, {
            type: "RELEASE",
            path: path.map((p) => p.toString())
          }).then(() => {
            closeEndPoint(ep);
            isProxyReleased = true;
          });
        };
      }
      if (prop === "then") {
        if (path.length === 0) {
          return { then: () => proxy2 };
        }
        const r = requestResponseMessage(ep, {
          type: "GET",
          path: path.map((p) => p.toString())
        }).then(fromWireValue);
        return r.then.bind(r);
      }
      return createProxy(ep, [...path, prop]);
    },
    set(_target, prop, rawValue) {
      throwIfProxyReleased(isProxyReleased);
      const [value, transferables] = toWireValue(rawValue);
      return requestResponseMessage(ep, {
        type: "SET",
        path: [...path, prop].map((p) => p.toString()),
        value
      }, transferables).then(fromWireValue);
    },
    apply(_target, _thisArg, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const last = path[path.length - 1];
      if (last === createEndpoint) {
        return requestResponseMessage(ep, {
          type: "ENDPOINT"
        }).then(fromWireValue);
      }
      if (last === "bind") {
        return createProxy(ep, path.slice(0, -1));
      }
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "APPLY",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    },
    construct(_target, rawArgumentList) {
      throwIfProxyReleased(isProxyReleased);
      const [argumentList, transferables] = processArguments(rawArgumentList);
      return requestResponseMessage(ep, {
        type: "CONSTRUCT",
        path: path.map((p) => p.toString()),
        argumentList
      }, transferables).then(fromWireValue);
    }
  });
  return proxy2;
}
function myFlat(arr) {
  return Array.prototype.concat.apply([], arr);
}
function processArguments(argumentList) {
  const processed = argumentList.map(toWireValue);
  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];
}
const transferCache = new WeakMap();
function transfer(obj, transfers) {
  transferCache.set(obj, transfers);
  return obj;
}
function proxy(obj) {
  return Object.assign(obj, { [proxyMarker]: true });
}
function toWireValue(value) {
  for (const [name, handler] of transferHandlers) {
    if (handler.canHandle(value)) {
      const [serializedValue, transferables] = handler.serialize(value);
      return [
        {
          type: "HANDLER",
          name,
          value: serializedValue
        },
        transferables
      ];
    }
  }
  return [
    {
      type: "RAW",
      value
    },
    transferCache.get(value) || []
  ];
}
function fromWireValue(value) {
  switch (value.type) {
    case "HANDLER":
      return transferHandlers.get(value.name).deserialize(value.value);
    case "RAW":
      return value.value;
  }
}
function requestResponseMessage(ep, msg, transfers) {
  return new Promise((resolve) => {
    const id2 = generateUUID();
    ep.addEventListener("message", function l(ev) {
      if (!ev.data || !ev.data.id || ev.data.id !== id2) {
        return;
      }
      ep.removeEventListener("message", l);
      resolve(ev.data);
    });
    if (ep.start) {
      ep.start();
    }
    ep.postMessage(Object.assign({ id: id2 }, msg), transfers);
  });
}
function generateUUID() {
  return new Array(4).fill(0).map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16)).join("-");
}
class Counter extends Map {
  get_count(x) {
    return super.get(x) || 0;
  }
  get_counter(x) {
    const current = super.get(x);
    if (current) {
      return current;
    } else {
      super.set(x, new Counter());
      return super.get(x);
    }
  }
  merge(counter) {
    for (let row2 of counter.value_iter()) {
      this.add(...row2);
    }
  }
  inc(...values) {
    this.add(1, ...values);
  }
  add(i, ...values) {
    if (values.length === 1) {
      this.set(values[0], this.get_count(values[0]) + i);
    } else {
      const child = this.get_counter(values[0]);
      child.add(i, ...values.slice(1));
    }
  }
  is_counter() {
  }
  values() {
    return Array.from(this.value_iter());
  }
  *value_iter() {
    for (let [k, v] of this.entries()) {
      if (v.is_counter) {
        for (let row2 of v.value_iter()) {
          yield [row2[0], k, ...row2.slice(1)];
        }
      } else {
        yield [v, k];
      }
    }
  }
}
const encodedJs = "";
const blob = typeof window !== "undefined" && window.Blob && new Blob([atob(encodedJs)], { type: "text/javascript;charset=utf-8" });
function WorkerWrapper() {
  const objURL = blob && (window.URL || window.webkitURL).createObjectURL(blob);
  try {
    return objURL ? new Worker(objURL) : new Worker("data:application/javascript;base64," + encodedJs, { type: "module" });
  } finally {
    objURL && (window.URL || window.webkitURL).revokeObjectURL(objURL);
  }
}
class Batch {
}
class Tile extends Batch {
  constructor() {
    super();
    this.max_ix = void 0;
    this.promise = Promise.resolve();
    this.download_state = "Unattempted";
  }
  get dictionary_lookups() {
    return this.parent.dictionary_lookups;
  }
  is_visible(max_ix, viewport_limits) {
    if (this.min_ix > max_ix) {
      return false;
    }
    if (viewport_limits === void 0) {
      return false;
    }
    const c2 = this.extent;
    return !(c2.x[0] > viewport_limits.x[1] || c2.x[1] < viewport_limits.x[0] || c2.y[0] > viewport_limits.y[1] || c2.y[1] < viewport_limits.y[0]);
  }
  get tileWorker() {
    return this.parent.tileWorker;
  }
  get needed_mutations() {
    this._current_mutations = this._current_mutations || {};
    const needed = {};
    for (const [k, v] of Object.entries(this.mutations)) {
      const current = this._current_mutations[k];
      if (v !== current) {
        needed[k] = v;
      }
    }
    return needed;
  }
  apply_mutations_once() {
    const { needed_mutations } = this;
    if (Object.keys(needed_mutations).length === 0) {
      return Promise.resolve("complete");
    }
    if (needed_mutations === void 0) {
      return Promise.resolve("deferred");
    }
    return this.extend_promise(() => {
      this._table = void 0;
      return this.tileWorker.run_transforms(needed_mutations, transfer(this._table_buffer, [this._table_buffer])).then(([buffer2, codes]) => {
        this._table_buffer = buffer2;
        Object.assign(this._current_mutations, needed_mutations);
        this.local_dictionary_lookups = codes;
        this.update_master_dictionary_lookups();
        return "changed";
      });
    });
  }
  *points(bounding = void 0, sorted = false) {
    if (!this.is_visible(1e100, bounding)) {
      return;
    }
    for (const p of this) {
      if (p_in_rect([p.x, p.y], bounding)) {
        yield p;
      }
    }
    if (sorted == false) {
      for (const child of this.children) {
        if (!child.ready) {
          continue;
        }
        for (const p of child.points(bounding, sorted)) {
          if (p_in_rect([p.x, p.y], bounding)) {
            yield p;
          }
        }
      }
    } else {
      let children2 = this.children.map((tile) => {
        const f = {
          t: tile,
          iterator: tile.points(bounding, sorted),
          next: void 0
        };
        f.next = f.iterator.next();
        return f;
      });
      children2 = children2.filter((d) => d.next.value);
      while (children2.length > 0) {
        let mindex = 0;
        for (let i = 1; i < children2.length; i++) {
          if (children2[i].next.value.ix < children2[mindex].next.value.ix) {
            mindex = i;
          }
        }
        yield children2[mindex].next.value;
        children2[mindex].next = children2[mindex].iterator.next();
        if (children2[mindex].next.done) {
          children2 = children2.splice(mindex, 1);
        }
      }
    }
  }
  forEach(callback) {
    for (const p of this.points()) {
      if (p === void 0) {
        continue;
      }
      callback(p);
    }
  }
  set highest_known_ix(val) {
    if (this._highest_known_ix == void 0 || this._highest_known_ix < val) {
      this._highest_known_ix = val;
      if (this.parent) {
        this.parent.highest_known_ix = val;
      }
    }
  }
  get highest_known_ix() {
    return this._highest_known_ix;
  }
  get table() {
    if (this._table) {
      return this._table;
    }
    if (this._table_buffer && this._table_buffer.byteLength > 0) {
      return this._table = Arrow_dom.Table.from(this._table_buffer);
    }
    return void 0;
  }
  get min_ix() {
    if (this._min_ix !== void 0) {
      return this._min_ix;
    }
    if (this.parent) {
      return this.parent.max_ix + 1;
    }
    return void 0;
  }
  get schema() {
    return this.download().then((results) => this._schema);
  }
  extend_promise(callback) {
    this.promise = this.promise.then(() => callback());
    return this.promise;
  }
  get ready() {
    return this._table_buffer && this._table_buffer.byteLength > 0;
  }
  get _schema() {
    if (this.__schema) {
      return this.__schema;
    }
    const attributes = [];
    for (const field of this.table.schema.fields) {
      const { name, type: type2, nullable } = field;
      if (type2 && type2.typeId == 5) {
        attributes.push({
          name,
          type: "string",
          extent: []
        });
      }
      if (type2 && type2.dictionary) {
        attributes.push({
          name,
          type: "dictionary",
          keys: this.table.getColumn(name).data.dictionary.toArray(),
          extent: [-2047, this.table.getColumn(name).data.dictionary.length - 2047]
        });
      }
      if (type2 && type2.typeId == 8) {
        attributes.push({
          name,
          type: "date",
          extent: extent(this.table.getColumn(name).data.values)
        });
      }
      if (type2 && type2.typeId == 3) {
        attributes.push({
          name,
          type: "float",
          extent: extent(this.table.getColumn(name).data.values)
        });
      }
    }
    this.__schema = attributes;
    return attributes;
  }
  *yielder() {
    for (const row2 of this.table) {
      if (row2) {
        yield row2;
      }
    }
  }
  update_master_dictionary_lookups() {
    const fields = this.local_dictionary_lookups;
    for (const [fieldname, dictionary2] of Object.entries(fields)) {
      this.dictionary_lookups[fieldname] = this.dictionary_lookups[fieldname] || new Map();
      const map2 = this.dictionary_lookups[fieldname];
      let ix = 0;
      for (const [index, textvalue] of dictionary2.entries()) {
        if (!map2.has(textvalue)) {
          ix = map2.size / 2;
          map2.set(ix, textvalue);
          map2.set(textvalue, ix);
        }
        this.dictionary_lookups[fieldname];
      }
    }
    this.dictionary_lookups;
  }
  get theoretical_extent() {
    const base2 = this.root_extent;
    const [z, x, y] = this.codes;
    const x_step = base2.x[1] - base2.x[0];
    const each_x = x_step / 2 ** z;
    const y_step = base2.y[1] - base2.y[0];
    const each_y = y_step / 2 ** z;
    return {
      x: [base2.x[0] + x * each_x, base2.x[0] + (x + 1) * each_x],
      y: [base2.y[0] + y * each_y, base2.y[0] + (y + 1) * each_y]
    };
  }
  get extent() {
    if (this._extent) {
      return this._extent;
    }
    return this.theoretical_extent;
  }
  get mutations() {
    return this.parent.mutations;
  }
  [Symbol.iterator]() {
    return this.yielder();
  }
  count(...category_names) {
    const cols = [];
    for (const k of category_names) {
      cols.push(this.table.getColumn(k));
    }
    const counts = new Counter();
    for (let i = 0; i < this.table.length; i++) {
      const k = cols.map((d) => d.get(i));
      counts.inc(...k);
    }
    return counts;
  }
  get root_extent() {
    return this.parent.root_extent;
  }
}
class QuadTile extends Tile {
  constructor(base_url, key, parent = void 0, prefs) {
    super();
    this._already_called = false;
    this.url = base_url;
    this.parent = parent;
    if (parent === void 0) {
      this._mutations = prefs.mutate;
    }
    this.key = key;
    const [z, x, y] = key.split("/").map((d) => parseInt(d));
    this.codes = [z, x, y];
    this.class = new.target;
  }
  download_to_depth(depth, corners = { x: [-1, 1], y: [-1, 1] }, recurse = false) {
    if (this.max_ix < depth && this.is_visible(depth, corners) && !recurse) {
      const promises = this.children.map((child) => child.download());
      if (this._children) {
        for (const child of this._children) {
          promises.concat(child.download_to_depth(depth, corners, false));
        }
      }
      return Promise.all(promises);
    }
    return this.download().then(() => {
      if (this.max_ix < depth && this.is_visible(depth, corners) && recurse) {
        const child_processes = this.children.map((child) => child.download_to_depth(depth, corners));
        return Promise.all(child_processes).then((d) => this);
      }
      return this;
    });
  }
  download() {
    if (this._download) {
      return this._download;
    }
    if (this._already_called) {
      throw "Illegally attempting to download twice";
    }
    this._already_called = true;
    const url = this.url.match("//") ? `${this.url}/${this.key}.feather` : `${window.location.origin}/${this.url}/${this.key}.feather`;
    this.download_state = "In progress";
    this._download = this.tileWorker.fetch(url, this.needed_mutations).catch((err) => {
      this.download_state = "Errored";
      throw err;
    }).then(([buffer2, metadata2, codes]) => {
      this.download_state = "Complete";
      this._current_mutations = JSON.parse(JSON.stringify(this.needed_mutations));
      this._table_buffer = buffer2;
      this._table = Arrow_dom.Table.from(buffer2);
      this._extent = JSON.parse(metadata2.get("extent"));
      this.child_locations = JSON.parse(metadata2.get("children"));
      this._min_ix = this.table.getColumn("ix").get(0);
      this.max_ix = 0 + this.table.getColumn("ix").get(this.table.length - 1);
      this.highest_known_ix = this.max_ix;
      this._current_mutations = JSON.parse(JSON.stringify(this.needed_mutations));
      this.local_dictionary_lookups = codes;
      this.update_master_dictionary_lookups();
      return this.table;
    });
    return this._download;
  }
  get children() {
    if (this._children !== void 0) {
      return this._children;
    }
    if (this.download_state !== "Complete") {
      return [];
    }
    this._children = [];
    for (const key of this.child_locations) {
      this._children.push(new this.class(this.url, key, this));
    }
    return this._children;
  }
}
class RootTile extends QuadTile {
  constructor(base_url, prefs = {}) {
    let key;
    if (base_url.match(/(\/[0-9]+){3}/)) {
      const sections = base_url.split("/");
      base_url = sections.slice(0, -3).join("/");
      key = sections.slice(-3).join("/");
    } else {
      key = "0/0/0";
    }
    super(base_url, key, void 0, prefs);
    this.extend_promise(() => this.download());
    this._min_ix = 1;
  }
  get root_extent() {
    if (this._extent) {
      return this._extent;
    }
    return void 0;
  }
  log_tiles(depth = 1, f = (tile) => `${tile.children.length}`) {
    const array2 = [];
    const w = range(2 ** depth);
    for (const i of w) {
      array2[i] = [];
      for (const j of w) {
        array2[i][j] = " ";
      }
      array2[i][2 ** depth] = "|";
    }
    array2[2 ** depth] = Array(2 ** depth + 1).fill("-");
    this.visit((tile) => {
      const [z, x, y] = tile.key.split("/").map((d) => +d);
      if (z === depth) {
        array2[y][x] = "_";
        array2[y][x] = f(tile);
      }
    });
  }
  download_most_needed_tiles(bbox, max_ix, queue_length = 4) {
    if (!this._download_queue) {
      this._download_queue = new Set();
    }
    const queue = this._download_queue;
    if (queue.size >= queue_length) {
      return;
    }
    const scores = [];
    const callback = (tile) => {
      const distance = check_overlap(tile, bbox);
      scores.push([distance, tile, bbox, tile.download_state]);
    };
    this.visit(callback);
    scores.sort((a, b) => a[0] - b[0]);
    while (scores.length && queue.size < queue_length) {
      const [distance, tile, bbox2, _] = scores.pop();
      if (tile.min_ix > max_ix || distance < 0) {
        continue;
      }
      if (tile.download_state !== "Unattempted") {
        continue;
      }
      queue.add(tile.key);
      tile.download().catch((err) => {
        console.warn("Error on", tile.key);
        queue.delete(tile.key);
        throw err;
      }).then(() => queue.delete(tile.key));
    }
  }
  get children() {
    if (this._children !== void 0) {
      return this._children;
    }
    if (this.download_state !== "Complete") {
      return [];
    }
    this._children = [];
    for (const key of this.child_locations) {
      this._children.push(new QuadTile(this.url, key, this));
    }
    return this._children;
  }
  get mutations() {
    return this._mutations ? this._mutations : this._mutations = new Map();
  }
  findPoint(ix) {
    return this.map((t) => t).filter((t) => t.table && t.min_ix <= ix && t.max_ix >= ix).map((t) => {
      const mid = bisectLeft(t.table.getColumn("ix").data.values, ix);
      if (t.table.get(mid) && t.table.get(mid).ix === ix) {
        return t.table.get(mid);
      }
      return null;
    }).filter((d) => d);
  }
  apply_mutations(function_map, synchronous = false) {
    Object.assign(this.mutations, function_map);
    const all = this.map((tile) => tile.apply_mutations_once(function_map));
    if (synchronous) {
      return all;
    }
    return Promise.all(all);
  }
  get dictionary_lookups() {
    return this._dictionary_lookups ? this._dictionary_lookups : this._dictionary_lookups = {};
  }
  get tileWorker() {
    const NUM_WORKERS = 4;
    if (this._tileWorkers !== void 0) {
      this._tileWorkers.unshift(this._tileWorkers.pop());
      return this._tileWorkers[0];
    }
    this._tileWorkers = [];
    for (const i of range(NUM_WORKERS)) {
      this._tileWorkers.push(wrap(new WorkerWrapper()));
    }
    return this._tileWorkers[0];
  }
  map(callback, after = false) {
    const q = [];
    this.visit((d) => {
      q.push(callback(d));
    }, after = after);
    return q;
  }
  visit(callback, after = false, filter2 = () => true) {
    const stack = [this];
    const after_stack = [];
    let current;
    while (current = stack.shift()) {
      if (!after) {
        callback(current);
      } else {
        after_stack.push(current);
      }
      if (!filter2(current)) {
        continue;
      }
      if (current.download_state == "Complete") {
        stack.push(...current.children);
      }
    }
    if (after) {
      while (current = after_stack.pop()) {
        callback(current);
      }
    }
  }
}
function p_in_rect(p, rect) {
  if (rect === void 0) {
    return true;
  }
  return p[0] < rect.x[1] && p[0] > rect.x[0] && p[1] < rect.y[1] && p[1] > rect.y[0];
}
function area(rect) {
  return (rect.x[1] - rect.x[0]) * (rect.y[1] - rect.y[0]);
}
function check_overlap(tile, bbox) {
  const c2 = tile.extent;
  if (c2.x[0] > bbox.x[1] || c2.x[1] < bbox.x[0] || c2.y[0] > bbox.y[1] || c2.y[1] < bbox.y[0])
    ;
  const intersection = {
    x: [
      max([bbox.x[0], c2.x[0]]),
      min([bbox.x[1], c2.x[1]])
    ],
    y: [
      max([bbox.y[0], c2.y[0]]),
      min([bbox.y[1], c2.y[1]])
    ]
  };
  const { x, y } = intersection;
  let disqualify = 0;
  if (x[0] > x[1]) {
    disqualify -= 1;
  }
  if (y[0] > y[1]) {
    disqualify -= 2;
  }
  if (disqualify < 0) {
    return disqualify;
  }
  return area(intersection) / area(bbox);
}
const base_elements = [
  {
    id: "canvas-2d-background",
    nodetype: "canvas"
  },
  {
    id: "webgl-canvas",
    nodetype: "canvas"
  },
  {
    id: "canvas-2d",
    nodetype: "canvas"
  },
  {
    id: "deepscatter-svg",
    nodetype: "svg"
  }
];
class Scatterplot {
  constructor(selector2, width, height) {
    this.bound = false;
    if (selector2 !== void 0) {
      this.bind(selector2, width, height);
    }
    this.width = width;
    this.height = height;
    this.ready = Promise.resolve();
    this.d3 = { select };
  }
  bind(selector2, width, height) {
    this.div = select(selector2).selectAll("div.deepscatter_container").data([1]).join("div").attr("class", "deepscatter_container").style("position", "absolute");
    if (this.div.empty()) {
      console.error(selector2);
      throw "Must pass a valid div selector";
    }
    this.elements = [];
    this.prefs = {
      zoom_balance: 0.35,
      duration: 2,
      point_size: 1,
      alpha: 0.4,
      click_function: "alert(`You clicked on a point with data ${JSON.stringify(datum)}`)"
    };
    for (const d of base_elements) {
      const container = this.div.append("div").attr("id", `container-for-${d.id}`).style("position", "absolute").style("top", 0).style("left", 0).style("pointer-events", d.id === "deepscatter-svg" ? "auto" : "none");
      container.append(d.nodetype).attr("id", d.id).attr("width", width || window.innerWidth).attr("height", height || window.innerHeight);
      this.elements.push(container);
    }
    this.bound = true;
  }
  async reinitialize() {
    const { prefs } = this;
    this._root = new RootTile(this.source_url, prefs);
    await this._root.download();
    this._renderer = new ReglRenderer("#container-for-webgl-canvas", this._root, this);
    this._zoom = new Zoom("#deepscatter-svg", this.prefs);
    this._zoom.attach_tiles(this._root);
    this._zoom.attach_renderer("regl", this._renderer);
    this._zoom.initialize_zoom();
    const bkgd = select("#container-for-canvas-2d-background").select("canvas");
    const ctx = bkgd.node().getContext("2d");
    ctx.fillStyle = prefs.background_color || "rgba(133, 133, 111, .8)";
    ctx.fillRect(0, 0, window.innerWidth * 2, window.innerHeight * 2);
    this._renderer.initialize();
    this.ready = this._root.promise;
    return this.ready;
  }
  visualize_tiles() {
    const map2 = this;
    const ctx = map2.elements[2].selectAll("canvas").node().getContext("2d");
    ctx.clearRect(0, 0, 1e4, 1e4);
    const { x_, y_ } = map2._zoom.scales();
    ctx.strokeStyle = "#888888";
    const tiles = map2._root.map((t) => t);
    for (const i of range(13)) {
      setTimeout(() => {
        for (const tile of tiles) {
          if (tile.codes[0] != i) {
            continue;
          }
          if (!tile.extent) {
            continue;
          }
          const [x12, x2] = tile.extent.x.map((x) => x_(x));
          const [y12, y2] = tile.extent.y.map((y) => y_(y));
          const depth = tile.codes[0];
          ctx.lineWidth = 8 / Math.sqrt(depth);
          ctx.globalAlpha = 0.33;
          ctx.strokeRect(x12, y12, x2 - x12, y2 - y12);
          if (tile.download_state !== "Unattempted") {
            ctx.fillRect(x12, y12, x2 - x12, y2 - y12);
          }
          ctx.globalAlpha = 1;
        }
      }, i * 400);
    }
  }
  update_prefs(prefs) {
    for (const k in ["jitter", "alpha", "max_points"]) {
      prefs[`last_${k}`] = this.prefs[k] || void 0;
    }
    if (this.prefs.encoding && prefs.encoding) {
      for (const k of Object.keys(this.prefs.encoding)) {
        if (prefs.encoding[k]) {
          this.prefs.encoding[k] = prefs.encoding[k];
        }
      }
    }
    merge(this.prefs, prefs);
  }
  set tooltip_html(func) {
    if (!this._zoom) {
      setTimeout(() => this.tooltip_html = func, 100);
    } else {
      this._zoom._tooltip_html_function = func;
    }
  }
  get tooltip_html() {
    return this._zoom.tooltip_html;
  }
  async plotAPI(prefs) {
    if (prefs === void 0 || prefs === null) {
      return Promise.resolve(1);
    }
    this.update_prefs(prefs);
    if (prefs.lookup_tables) {
      const table_loads = [];
      this.lookup_promises = this.lookup_promises || new Map();
      for (const table2 of prefs.lookup_tables) {
        if (!this.lookup_promises.get(table2)) {
          table_loads.push(this.load_lookup_table(table2));
        }
      }
      await Promise.all(table_loads);
    }
    if (prefs.source_url && prefs.source_url !== this.source_url) {
      this.source_url = prefs.source_url;
      await this.reinitialize();
    }
    if (prefs.basemap_gleofeather) {
      prefs.polygons = [{ file: prefs.basemap_gleofeather }];
    }
    await this._root.promise;
    if (prefs.mutate) {
      this._root.apply_mutations(prefs.mutate);
    }
    const { width, height } = this;
    this.update_prefs(prefs);
    if (prefs.zoom !== void 0) {
      if (prefs.zoom === null) {
        this._zoom.zoom_to(1, width / 2, height / 2);
        prefs.zoom = void 0;
      } else if (prefs.zoom.bbox) {
        this._zoom.zoom_to_bbox(prefs.zoom.bbox, prefs.duration);
      }
    }
    this._renderer.most_recent_restart = Date.now();
    this._renderer.aes.apply_encoding(prefs.encoding);
    if (this._renderer.apply_webgl_scale) {
      this._renderer.apply_webgl_scale(prefs);
    }
    if (this._renderer.reglframe) {
      this._renderer.reglframe.cancel();
      this._renderer.reglframe = void 0;
    }
    this._renderer.reglframe = this._renderer.regl.frame(() => {
      this._renderer.tick("Basic");
    });
    this._zoom.restart_timer(6e4);
  }
  async root_table() {
    if (!this._root) {
      return false;
    }
    return this._root.table;
  }
  get query() {
    const p = JSON.parse(JSON.stringify(this.prefs));
    p.zoom = { bbox: this._renderer.zoom.current_corners() };
    return p;
  }
  top_n_points(n = 20) {
    const { _root, _renderer } = this;
    const current_corners = _renderer.zoom.current_corners();
    const output = [];
    const filter1 = _renderer.aes.filter.current.get_function();
    const filter2 = _renderer.aes.filter2.current.get_function();
    for (const p of _root.points(current_corners, true)) {
      if (filter1(p) && filter2(p)) {
        output.push(p);
      }
      if (output.length >= n) {
        return output;
      }
    }
    return output;
  }
  drawContours(contours, drawTo) {
    const drawTwo = drawTo || select("body");
    const canvas = drawTwo.select("#canvas-2d");
    const ctx = canvas.node().getContext("2d");
    for (const contour of contours) {
      ctx.fillStyle = "rgba(25, 25, 29, 1)";
      ctx.fillRect(0, 0, window.innerWidth * 2, window.innerHeight * 2);
      ctx.strokeStyle = "#8a0303";
      ctx.fillStyle = "rgba(30, 30, 34, 1)";
      ctx.lineWidth = max([0.45, 0.25 * Math.exp(Math.log(this._zoom.transform.k / 2))]);
      const path = geoPath(geoIdentity().scale(this._zoom.transform.k).translate([this._zoom.transform.x, this._zoom.transform.y]), ctx);
      ctx.beginPath(), path(contour), ctx.fill();
    }
  }
  contours(aes) {
    const data2 = this._renderer.calculate_contours(aes);
    const {
      x,
      y,
      x_,
      y_
    } = this._zoom.scales();
    function fix_point(p) {
      if (!p) {
        return;
      }
      if (p.coordinates) {
        return fix_point(p.coordinates);
      }
      if (!p.length) {
        return;
      }
      if (p[0].length) {
        return p.map(fix_point);
      }
      p[0] = x(x_.invert(p[0]));
      p[1] = y(y_.invert(p[1]));
    }
    fix_point(data2);
    this.drawContours(data2);
  }
}
export { Scatterplot as default };
